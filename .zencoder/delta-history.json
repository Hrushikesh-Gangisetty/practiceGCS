{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/build.gradle.kts":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/build.gradle.kts","baseContent":"plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.kotlin.compose)\n}\n\nandroid {\n    namespace = \"com.example.kotlingcspractice\"\n    compileSdk = 35\n\n    defaultConfig {\n        applicationId = \"com.example.kotlingcspractice\"\n        minSdk = 24\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n    buildFeatures {\n        compose = true\n    }\n}\n\ndependencies {\n\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.lifecycle.runtime.ktx)\n    implementation(libs.androidx.activity.compose)\n    implementation(platform(libs.androidx.compose.bom))\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.tooling.preview)\n    implementation(libs.androidx.material3)\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n    androidTestImplementation(platform(libs.androidx.compose.bom))\n    androidTestImplementation(libs.androidx.ui.test.junit4)\n    debugImplementation(libs.androidx.ui.tooling)\n    debugImplementation(libs.androidx.ui.test.manifest)\n}\n\nependencies {\n    // MAVLink message definitions (standard dialects like common.xml)\n    implementation(\"com.divpundir.mavlink:definitions:1.2.8\")\n\n\n    // TCP connection client\n    implementation(\"com.divpundir.mavlink:connection-tcp:1.2.8\")\n\n\n    // Coroutines adapter (recommended for Android)\n    implementation(\"com.divpundir.mavlink:adapter-coroutines:1.2.8\")\n}\n","baseTimestamp":1756872092925,"deltas":[{"timestamp":1756872097721,"changes":[{"type":"MODIFY","lineNumber":60,"content":"dependencies {","oldContent":"ependencies {"}]},{"timestamp":1756874970936,"changes":[{"type":"MODIFY","lineNumber":8,"content":"    compileSdk = 36","oldContent":"    compileSdk = 35"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/MainActivity.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/MainActivity.kt","baseContent":"package com.example.kotlingcspractice\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.example.kotlingcspractice.ui.theme.KotlinGCSPracticeTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            KotlinGCSPracticeTheme {\n                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->\n                    Greeting(\n                        name = \"Android\",\n                        modifier = Modifier.padding(innerPadding)\n                    )\n                }\n            }\n        }\n    }\n}\n\n","baseTimestamp":1756872127024,"deltas":[{"timestamp":1756872129954,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->"},{"type":"DELETE","lineNumber":22,"oldContent":"                    Greeting("},{"type":"DELETE","lineNumber":23,"oldContent":"                        name = \"Android\","},{"type":"DELETE","lineNumber":24,"oldContent":"                        modifier = Modifier.padding(innerPadding)"},{"type":"DELETE","lineNumber":25,"oldContent":"                    )"},{"type":"INSERT","lineNumber":21,"content":"                "}]},{"timestamp":1756872147854,"changes":[{"type":"DELETE","lineNumber":28,"oldContent":""}]},{"timestamp":1756872150621,"changes":[{"type":"MODIFY","lineNumber":21,"content":"","oldContent":"                "}]},{"timestamp":1756874845118,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":19,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":20,"oldContent":"            KotlinGCSPracticeTheme {"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":"                }"},{"type":"DELETE","lineNumber":23,"oldContent":"            }"},{"type":"INSERT","lineNumber":18,"content":"        "}]},{"timestamp":1756874850632,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"}"}]},{"timestamp":1756874861811,"changes":[{"type":"MODIFY","lineNumber":18,"content":"        setContent { ","oldContent":"        "},{"type":"INSERT","lineNumber":19,"content":"            "},{"type":"INSERT","lineNumber":21,"content":"        }"}]},{"timestamp":1756874869472,"changes":[{"type":"MODIFY","lineNumber":19,"content":"            val vm ","oldContent":"            "},{"type":"MODIFY","lineNumber":22,"content":"    }","oldContent":"    }"}]},{"timestamp":1756874874958,"changes":[{"type":"MODIFY","lineNumber":19,"content":"            val vm : TelemetryViewModel = TelemetryViewModel()","oldContent":"            val vm "},{"type":"INSERT","lineNumber":20,"content":"            "},{"type":"INSERT","lineNumber":22,"content":"        }"},{"type":"DELETE","lineNumber":22,"oldContent":"    }"}]},{"timestamp":1756874880854,"changes":[{"type":"INSERT","lineNumber":13,"content":"import com.example.kotlingcspractice.Telemetry.TelemetryViewModel"},{"type":"DELETE","lineNumber":22,"oldContent":"    }"},{"type":"INSERT","lineNumber":24,"content":"    }"}]},{"timestamp":1756874886972,"changes":[{"type":"MODIFY","lineNumber":21,"content":"            val state ","oldContent":"            "}]},{"timestamp":1756874891698,"changes":[{"type":"MODIFY","lineNumber":21,"content":"            val state = vm.telemetry","oldContent":"            val state "}]},{"timestamp":1756874894442,"changes":[{"type":"MODIFY","lineNumber":21,"content":"            val state = vm.telemetry.coll","oldContent":"            val state = vm.telemetry"}]},{"timestamp":1756874902723,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.lifecycle.compose.collectAsStateWithLifecycle"},{"type":"MODIFY","lineNumber":22,"content":"            val state = vm.telemetry.collectAsStateWithLifecycle()","oldContent":"            val state = vm.telemetry.coll"}]},{"timestamp":1756874912675,"changes":[{"type":"INSERT","lineNumber":14,"content":"import com.example.kotlingcspractice.Design.TelemetryOverlay"},{"type":"DELETE","lineNumber":22,"oldContent":"            val state = vm.telemetry.coll"},{"type":"INSERT","lineNumber":24,"content":"            TelemetryOverlay("},{"type":"INSERT","lineNumber":25,"content":"                sta"},{"type":"INSERT","lineNumber":26,"content":"            )"},{"type":"INSERT","lineNumber":28,"content":"        }"}]},{"timestamp":1756874917071,"changes":[{"type":"INSERT","lineNumber":25,"content":"                state = state.value,"},{"type":"INSERT","lineNumber":26,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":27,"content":"                    .fillMaxSize()"},{"type":"INSERT","lineNumber":28,"content":"                    .padding(16.dp)"},{"type":"INSERT","lineNumber":29,"content":"            )"},{"type":"DELETE","lineNumber":26,"oldContent":"                sta"},{"type":"INSERT","lineNumber":31,"content":"        }"},{"type":"DELETE","lineNumber":28,"oldContent":"            )"},{"type":"DELETE","lineNumber":30,"oldContent":"        }"}]},{"timestamp":1756874926970,"changes":[{"type":"INSERT","lineNumber":7,"content":"import androidx.compose.foundation.layout.fillMaxWidth"},{"type":"DELETE","lineNumber":26,"oldContent":"        }"},{"type":"DELETE","lineNumber":28,"oldContent":"                    .fillMaxSize()"},{"type":"DELETE","lineNumber":29,"oldContent":"    }"},{"type":"DELETE","lineNumber":30,"oldContent":"                    .padding(16.dp)"},{"type":"INSERT","lineNumber":28,"content":"                    .fillMaxWidth()"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"INSERT","lineNumber":31,"content":"        }"},{"type":"INSERT","lineNumber":32,"content":"    }"},{"type":"INSERT","lineNumber":33,"content":""}]},{"timestamp":1756874934164,"changes":[{"type":"MODIFY","lineNumber":30,"content":"        }","oldContent":"        }"},{"type":"INSERT","lineNumber":32,"content":"}"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"}]},{"timestamp":1756874941051,"changes":[{"type":"MODIFY","lineNumber":22,"content":"        setContent {","oldContent":"        setContent { "},{"type":"INSERT","lineNumber":29,"content":"            )"},{"type":"DELETE","lineNumber":30,"oldContent":"        }"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/data.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\ndata class TelemetryState","baseTimestamp":1756872194164,"deltas":[{"timestamp":1756872218483,"changes":[{"type":"INSERT","lineNumber":3,"content":"    val connected : Boolean = false,"}]},{"timestamp":1756872226460,"changes":[{"type":"MODIFY","lineNumber":4,"content":"    val altitudeMsl","oldContent":"    "}]},{"timestamp":1756872231980,"changes":[{"type":"MODIFY","lineNumber":4,"content":"    val altitudeMsl: Float? = null,","oldContent":"    val altitudeMsl"},{"type":"INSERT","lineNumber":5,"content":"    "}]},{"timestamp":1756872243337,"changes":[{"type":"INSERT","lineNumber":5,"content":"    val altitudeRelative: Float? = null,"}]},{"timestamp":1756872248587,"changes":[{"type":"MODIFY","lineNumber":6,"content":"    val air","oldContent":"    "}]},{"timestamp":1756872253050,"changes":[{"type":"MODIFY","lineNumber":6,"content":"    val airspeed: Float? = null,","oldContent":"    val air"},{"type":"INSERT","lineNumber":7,"content":"    val groundspeed: Float? = null,"},{"type":"INSERT","lineNumber":8,"content":"    "}]},{"timestamp":1756872262272,"changes":[{"type":"INSERT","lineNumber":8,"content":"    val volatage: Float? = null,"},{"type":"DELETE","lineNumber":9,"oldContent":"    "}]},{"timestamp":1756872273519,"changes":[{"type":"INSERT","lineNumber":9,"content":"    val batteryPerc"}]},{"timestamp":1756872276401,"changes":[{"type":"MODIFY","lineNumber":9,"content":"    val batteryPercent: Int? = null,","oldContent":"    val batteryPerc"},{"type":"INSERT","lineNumber":10,"content":"    "}]},{"timestamp":1756872297965,"changes":[{"type":"INSERT","lineNumber":10,"content":"    val currentA : Float? = null,"}]},{"timestamp":1756872309362,"changes":[{"type":"INSERT","lineNumber":11,"content":"    val sats : Int? = null,"}]},{"timestamp":1756872318205,"changes":[{"type":"MODIFY","lineNumber":12,"content":"    val hdop : Float? = null,","oldContent":"    "}]},{"timestamp":1756872323240,"changes":[{"type":"INSERT","lineNumber":3,"content":"    //"}]},{"timestamp":1756872330900,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    ","oldContent":"    //"},{"type":"INSERT","lineNumber":5,"content":"    //Altitude"}]},{"timestamp":1756872338346,"changes":[{"type":"INSERT","lineNumber":8,"content":"    //"}]},{"timestamp":1756872340746,"changes":[{"type":"MODIFY","lineNumber":3,"content":"","oldContent":"    "}]},{"timestamp":1756872343725,"changes":[{"type":"MODIFY","lineNumber":8,"content":"    //Speeds","oldContent":"    //"}]},{"timestamp":1756872348310,"changes":[{"type":"INSERT","lineNumber":11,"content":"    //Battery"}]},{"timestamp":1756872352843,"changes":[{"type":"INSERT","lineNumber":15,"content":"    //Sat count"}]},{"timestamp":1756872356205,"changes":[{"type":"MODIFY","lineNumber":15,"content":"    //Sat count and HDOP","oldContent":"    //Sat count"},{"type":"MODIFY","lineNumber":18,"content":")","oldContent":"    "}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\nclass MavlinkTelemetry","baseTimestamp":1756872430188,"deltas":[{"timestamp":1756874382709,"changes":[{"type":"MODIFY","lineNumber":41,"content":"){","oldContent":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000f"},{"type":"DELETE","lineNumber":65,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":"                }"},{"type":"INSERT","lineNumber":65,"content":"            connection.streamState.collect {"},{"type":"INSERT","lineNumber":66,"content":"                st->"},{"type":"MODIFY","lineNumber":88,"content":"        }","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":119,"oldContent":"}"},{"type":"DELETE","lineNumber":120,"oldContent":"    }"},{"type":"INSERT","lineNumber":119,"content":"            .filter { it.systemId == fcuSystemId && it.componentId == fcuComponentId }"},{"type":"INSERT","lineNumber":120,"content":"            .map { it.message }"},{"type":"MODIFY","lineNumber":171,"content":"        ","oldContent":"}"},{"type":"DELETE","lineNumber":176,"oldContent":"                    val sats "},{"type":"DELETE","lineNumber":177,"oldContent":"        }"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gp"},{"type":"INSERT","lineNumber":178,"content":"        }"},{"type":"INSERT","lineNumber":180,"content":"}"}]},{"timestamp":1756874386220,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import com.divpundir.mavlink.definitions.common.BatteryStatus","oldContent":"        //VFR_HUD for alt and speed"},{"type":"MODIFY","lineNumber":118,"content":"        val frames = connection.mavFrame","oldContent":"                    "},{"type":"DELETE","lineNumber":151,"oldContent":"}"},{"type":"DELETE","lineNumber":152,"oldContent":"    }"},{"type":"INSERT","lineNumber":151,"content":"                    val currentA ="},{"type":"INSERT","lineNumber":152,"content":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it > 0 }","oldContent":"                    val sats = gp"},{"type":"INSERT","lineNumber":177,"content":"                }"}]},{"timestamp":1756874392075,"changes":[{"type":"MODIFY","lineNumber":11,"content":"import com.divpundir.mavlink.definitions.common.GlobalPositionInt","oldContent":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"}"},{"type":"DELETE","lineNumber":76,"oldContent":"    }"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"INSERT","lineNumber":76,"content":"        scope.launch{"},{"type":"MODIFY","lineNumber":150,"content":"                .collect { b -> ","oldContent":"    }"},{"type":"MODIFY","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent","oldContent":"}"},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }","oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it > 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    "},{"type":"INSERT","lineNumber":180,"content":"    }"}]},{"timestamp":1756874394386,"changes":[{"type":"MODIFY","lineNumber":177,"content":"                    val","oldContent":"                    "},{"type":"MODIFY","lineNumber":181,"content":"}","oldContent":"}"}]},{"timestamp":1756874399756,"changes":[{"type":"MODIFY","lineNumber":74,"content":"        //Auto reconnect on failure","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":108,"oldContent":"    }"},{"type":"MODIFY","lineNumber":108,"content":"            }","oldContent":"        }"},{"type":"INSERT","lineNumber":109,"content":"            //Set rates here"},{"type":"MODIFY","lineNumber":155,"content":"                    }","oldContent":"}"},{"type":"MODIFY","lineNumber":160,"content":"        scope.launch{","oldContent":"}"},{"type":"MODIFY","lineNumber":163,"content":"                    val vBatt = ","oldContent":"        "},{"type":"MODIFY","lineNumber":168,"content":"                    ","oldContent":"        }"},{"type":"DELETE","lineNumber":173,"oldContent":"                }"},{"type":"DELETE","lineNumber":174,"oldContent":"                    val"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop = gps.","oldContent":"                    val"},{"type":"INSERT","lineNumber":181,"content":"}"}]},{"timestamp":1756874403275,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import com.divpundir.mavlink.connection.tcp.TcpClientMavConnection","oldContent":"                .collect { b -> "},{"type":"MODIFY","lineNumber":64,"content":"        scope.launch{","oldContent":"}"},{"type":"MODIFY","lineNumber":104,"content":"                        param6 = 0f,","oldContent":"    }"},{"type":"MODIFY","lineNumber":109,"content":"            //Set rates here","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":143,"content":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":144,"oldContent":"                }"},{"type":"MODIFY","lineNumber":170,"content":"        }","oldContent":"}"},{"type":"MODIFY","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count","oldContent":"                    val"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop = ","oldContent":"                    val hdop = gps."},{"type":"INSERT","lineNumber":178,"content":"                        if "},{"type":"INSERT","lineNumber":180,"content":"        }"}]},{"timestamp":1756874411419,"changes":[{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":"                }"},{"type":"INSERT","lineNumber":38,"content":"    private val fcuComponentId : UByte = 1u,"},{"type":"INSERT","lineNumber":39,"content":"    private val gcsSystemId : UByte = 200u,"},{"type":"MODIFY","lineNumber":63,"content":"        //Keep connected flag in sync","oldContent":"                }"},{"type":"MODIFY","lineNumber":100,"content":"                        param2 = intervalUsec,","oldContent":"}"},{"type":"MODIFY","lineNumber":102,"content":"                        param4 = 0f,","oldContent":"        }"},{"type":"MODIFY","lineNumber":121,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)","oldContent":"        }"},{"type":"MODIFY","lineNumber":144,"content":"                }","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"MODIFY","lineNumber":149,"content":"            frames.filterIsInstance<BatteryStatus>()","oldContent":"    }"},{"type":"MODIFY","lineNumber":154,"content":"                        it.copy(currentA = currentA)","oldContent":"}"},{"type":"MODIFY","lineNumber":162,"content":"                .collect { s -> ","oldContent":"}"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt())","oldContent":"                        if "},{"type":"MODIFY","lineNumber":181,"content":"    }","oldContent":"    }"}]},{"timestamp":1756874414701,"changes":[{"type":"MODIFY","lineNumber":35,"content":"    private val host : String = \"127.0.0.1\",","oldContent":"    }"},{"type":"MODIFY","lineNumber":58,"content":"                _state.update { it.copy(connected = false) }","oldContent":"}"},{"type":"MODIFY","lineNumber":99,"content":"                        param1 = messageId.toFloat(),","oldContent":"}"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt() == )","oldContent":"                        if (gps.eph.toUInt())"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"DELETE","lineNumber":181,"oldContent":"    }"}]},{"timestamp":1756874421550,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":10,"oldContent":"                    val pct = "},{"type":"INSERT","lineNumber":9,"content":"import com.divpundir.mavlink.definitions.common.CommandLong"},{"type":"INSERT","lineNumber":10,"content":"import com.divpundir.mavlink.definitions.common.CommonDialect"},{"type":"DELETE","lineNumber":31,"oldContent":"    }"},{"type":"DELETE","lineNumber":32,"oldContent":"        }"},{"type":"INSERT","lineNumber":31,"content":"import kotlinx.coroutines.isActive"},{"type":"INSERT","lineNumber":32,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":51,"oldContent":"                .collect{ gp->"},{"type":"DELETE","lineNumber":52,"oldContent":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":51,"content":"    private val connection = TcpClientMavConnection(host,port, CommonDialect).asCoroutine()"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"MODIFY","lineNumber":73,"content":"","oldContent":"}"},{"type":"MODIFY","lineNumber":77,"content":"            val heartbeat = Heartbeat(","oldContent":"                    "},{"type":"DELETE","lineNumber":85,"oldContent":"                    }"},{"type":"DELETE","lineNumber":86,"oldContent":"                        it.copy(currentA = currentA)"},{"type":"INSERT","lineNumber":85,"content":"                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,heartbeat)"},{"type":"INSERT","lineNumber":86,"content":"                delay(1000)"},{"type":"MODIFY","lineNumber":94,"content":"                    val cmd = CommandLong(","oldContent":"        }"},{"type":"MODIFY","lineNumber":96,"content":"                        targetComponent = fcuComponentId,","oldContent":"                    "},{"type":"MODIFY","lineNumber":107,"content":"                    connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,cmd)","oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"MODIFY","lineNumber":111,"content":"            setMessageRate(24u,1f) // GPS_RAW_INT","oldContent":"                            altitudeMsl = hud.alt,"},{"type":"MODIFY","lineNumber":113,"content":"            setMessageRate(74u,5f) // VFR_HUD","oldContent":"}"},{"type":"MODIFY","lineNumber":122,"content":"","oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":127,"oldContent":"    }"},{"type":"DELETE","lineNumber":128,"oldContent":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":130,"oldContent":"                    val vBatt = "},{"type":"INSERT","lineNumber":127,"content":"                    _state.update{"},{"type":"INSERT","lineNumber":128,"content":"                        it.copy("},{"type":"INSERT","lineNumber":129,"content":"                            altitudeMsl = hud.alt,"},{"type":"INSERT","lineNumber":130,"content":"                            airspeed = hud.airspeed.takeIf { v->v>0f },"},{"type":"DELETE","lineNumber":139,"oldContent":"                }"},{"type":"DELETE","lineNumber":140,"oldContent":"                    "},{"type":"DELETE","lineNumber":141,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":142,"oldContent":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":139,"content":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":140,"content":"                .collect{ gp->"},{"type":"INSERT","lineNumber":141,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":142,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"MODIFY","lineNumber":146,"content":"        ","oldContent":"            "},{"type":"MODIFY","lineNumber":153,"content":"                    _state.update{","oldContent":"        "},{"type":"DELETE","lineNumber":157,"oldContent":"    }"},{"type":"INSERT","lineNumber":158,"content":"        "},{"type":"MODIFY","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()","oldContent":"        }"},{"type":"MODIFY","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u","oldContent":"    }"},{"type":"INSERT","lineNumber":165,"content":"                    val pct = "},{"type":"INSERT","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":166,"oldContent":"}"},{"type":"DELETE","lineNumber":167,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":168,"oldContent":"                    "},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"DELETE","lineNumber":171,"oldContent":"                        if "},{"type":"DELETE","lineNumber":172,"oldContent":"        }"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":"}"}]},{"timestamp":1756874431089,"changes":[{"type":"MODIFY","lineNumber":20,"content":"import kotlinx.coroutines.CoroutineScope","oldContent":"                    val currentA ="},{"type":"DELETE","lineNumber":55,"oldContent":"                    _state.update{it.copy(volatage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":56,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":57,"oldContent":"                    val pct = "},{"type":"INSERT","lineNumber":55,"content":"        //Initial Launch Scope"},{"type":"INSERT","lineNumber":56,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":57,"content":"            while(isActive && !connection.tryConnect(this)){"},{"type":"MODIFY","lineNumber":68,"content":"                    is StreamState.Active -> _state.update { it.copy(connected = true) }","oldContent":"                }"},{"type":"DELETE","lineNumber":81,"oldContent":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000f"},{"type":"DELETE","lineNumber":82,"oldContent":"                    val vBatt = "},{"type":"DELETE","lineNumber":83,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":84,"oldContent":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":81,"content":"                customMode = 0u,"},{"type":"INSERT","lineNumber":82,"content":"                mavlinkVersion = 3u"},{"type":"INSERT","lineNumber":83,"content":"            )"},{"type":"INSERT","lineNumber":84,"content":"            while(isActive){"},{"type":"MODIFY","lineNumber":101,"content":"                        param3 = 0f,","oldContent":"                    _state.update{it.copy(volatage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":105,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":106,"oldContent":"                    }"},{"type":"INSERT","lineNumber":105,"content":"                        param7 = 0f"},{"type":"INSERT","lineNumber":106,"content":"                    )"},{"type":"MODIFY","lineNumber":112,"content":"            setMessageRate(33u,5f) // GLOBAL_POSITION_INT","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":114,"content":"            setMessageRate(147u,1f) // BATTERY_STATUS","oldContent":"                        it.copy(currentA = currentA)"},{"type":"DELETE","lineNumber":136,"oldContent":"        // BATTERY_STATUS for battery info"},{"type":"DELETE","lineNumber":137,"oldContent":"}"},{"type":"DELETE","lineNumber":138,"oldContent":"                .collect {  }"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"        // GLOBAL_POSITION_INT for relative alt"},{"type":"INSERT","lineNumber":138,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":145,"oldContent":"                }"},{"type":"DELETE","lineNumber":146,"oldContent":"        "},{"type":"DELETE","lineNumber":148,"oldContent":"                    val sats "},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"INSERT","lineNumber":147,"content":"        // BATTERY_STATUS for battery info"},{"type":"INSERT","lineNumber":148,"content":"        scope.launch{"},{"type":"MODIFY","lineNumber":156,"content":"                }","oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"INSERT","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent"},{"type":"DELETE","lineNumber":159,"oldContent":"        }"},{"type":"DELETE","lineNumber":160,"oldContent":"                        if "},{"type":"DELETE","lineNumber":162,"oldContent":"}"},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"INSERT","lineNumber":162,"content":"                .collect { s -> "},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt = "},{"type":"DELETE","lineNumber":166,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"INSERT","lineNumber":168,"content":"                    "},{"type":"DELETE","lineNumber":170,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":"}"}]},{"timestamp":1756874436525,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import com.divpundir.mavlink.adapters.coroutines.asCoroutine","oldContent":"class MavlinkTelemetry"},{"type":"MODIFY","lineNumber":27,"content":"import kotlinx.coroutines.flow.filterIsInstance","oldContent":""},{"type":"MODIFY","lineNumber":30,"content":"import kotlinx.coroutines.flow.update","oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":33,"oldContent":"}"},{"type":"DELETE","lineNumber":34,"oldContent":"    }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":36,"oldContent":"                }"},{"type":"DELETE","lineNumber":37,"oldContent":"                    "},{"type":"INSERT","lineNumber":36,"content":"    private val port : Int = 5760,"},{"type":"INSERT","lineNumber":37,"content":"    private val fcuSystemId : UByte = 1u,"},{"type":"DELETE","lineNumber":47,"oldContent":"                }"},{"type":"DELETE","lineNumber":48,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"INSERT","lineNumber":47,"content":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"DELETE","lineNumber":59,"oldContent":"                }"},{"type":"DELETE","lineNumber":60,"oldContent":"                    "},{"type":"DELETE","lineNumber":61,"oldContent":"                    _state.update{it.copy(volatage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":62,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":59,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":60,"content":"            }"},{"type":"INSERT","lineNumber":61,"content":"        }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"DELETE","lineNumber":79,"oldContent":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"INSERT","lineNumber":79,"content":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":80,"content":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"}"},{"type":"INSERT","lineNumber":92,"content":"            suspend fun setMessageRate(messageId: UInt,hz: Float){"},{"type":"INSERT","lineNumber":93,"content":"                val intervalUsec = if(hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"MODIFY","lineNumber":95,"content":"                        targetSystem = fcuSystemId,","oldContent":"        }"},{"type":"DELETE","lineNumber":97,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":98,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":97,"content":"                        command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"INSERT","lineNumber":98,"content":"                        confirmation = 0u,"},{"type":"MODIFY","lineNumber":103,"content":"                        param5 = 0f,","oldContent":"}"},{"type":"MODIFY","lineNumber":110,"content":"            setMessageRate(1u,1f) // SYS_STATUS","oldContent":"                .collect { hud->"},{"type":"DELETE","lineNumber":115,"oldContent":"                }"},{"type":"MODIFY","lineNumber":116,"content":"        // Collecting the messages from the FCU","oldContent":"    }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"DELETE","lineNumber":123,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":124,"oldContent":"                    val currentA ="},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"                    "},{"type":"INSERT","lineNumber":123,"content":"        //VFR_HUD for alt and speed"},{"type":"INSERT","lineNumber":124,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":125,"content":"            frames.filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":126,"content":"                .collect { hud->"},{"type":"INSERT","lineNumber":131,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v> 0f }"},{"type":"INSERT","lineNumber":132,"content":"                        )"},{"type":"INSERT","lineNumber":133,"content":"                    }"},{"type":"INSERT","lineNumber":134,"content":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"                        if "},{"type":"DELETE","lineNumber":133,"oldContent":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":"}"},{"type":"MODIFY","lineNumber":143,"content":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":144,"content":"                }"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":147,"oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":149,"oldContent":"                    val pct = "},{"type":"DELETE","lineNumber":150,"oldContent":"        "},{"type":"DELETE","lineNumber":151,"oldContent":"}"},{"type":"DELETE","lineNumber":152,"oldContent":"    }"},{"type":"INSERT","lineNumber":149,"content":"            frames.filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":150,"content":"                .collect { b -> "},{"type":"INSERT","lineNumber":151,"content":"                    val currentA ="},{"type":"INSERT","lineNumber":152,"content":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"INSERT","lineNumber":153,"content":"                    _state.update{"},{"type":"INSERT","lineNumber":154,"content":"                        it.copy(currentA = currentA)"},{"type":"INSERT","lineNumber":155,"content":"                    }"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"INSERT","lineNumber":158,"content":"        "},{"type":"INSERT","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent"},{"type":"INSERT","lineNumber":160,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":162,"content":"                .collect { s -> "},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt = "},{"type":"INSERT","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u"},{"type":"INSERT","lineNumber":165,"content":"                    val pct = "},{"type":"INSERT","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":168,"content":"                    "},{"type":"DELETE","lineNumber":155,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":156,"oldContent":"                }"},{"type":"DELETE","lineNumber":158,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":160,"oldContent":"        // SYS_STATUS for voltage and battery percent"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":162,"oldContent":"                .collect { s -> "},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874446633,"changes":[{"type":"MODIFY","lineNumber":15,"content":"import com.divpundir.mavlink.definitions.common.VfrHud","oldContent":"            frames.filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":24,"oldContent":"                        it.copy("},{"type":"DELETE","lineNumber":25,"oldContent":"                    )"},{"type":"INSERT","lineNumber":24,"content":"import kotlinx.coroutines.flow.StateFlow"},{"type":"INSERT","lineNumber":25,"content":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"DELETE","lineNumber":43,"oldContent":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"DELETE","lineNumber":44,"oldContent":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":43,"content":"    val state : StateFlow<TelemetryState> = _state.asStateFlow()"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"MODIFY","lineNumber":46,"content":"    val lastFailure : StateFlow<Throwable> get() = _lastFailure.asStateFlow() as StateFlow<Throwable>","oldContent":"}"},{"type":"MODIFY","lineNumber":53,"content":"    fun start(scope: CoroutineScope){","oldContent":"                .collect{ gp->"},{"type":"MODIFY","lineNumber":72,"content":"        }","oldContent":"    }"},{"type":"MODIFY","lineNumber":87,"content":"            }","oldContent":"                }"},{"type":"MODIFY","lineNumber":89,"content":"","oldContent":"            frames.filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":90,"content":"        //Message Rates"},{"type":"DELETE","lineNumber":91,"oldContent":"                }"},{"type":"INSERT","lineNumber":115,"content":"        }"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":118,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"DELETE","lineNumber":119,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":120,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":121,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":118,"content":"        val frames = connection.mavFrame"},{"type":"INSERT","lineNumber":119,"content":"            .filter { it.systemId == fcuSystemId && it.componentId == fcuComponentId }"},{"type":"INSERT","lineNumber":120,"content":"            .map { it.message }"},{"type":"INSERT","lineNumber":121,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)"},{"type":"DELETE","lineNumber":132,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"INSERT","lineNumber":135,"content":"        }"},{"type":"DELETE","lineNumber":139,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":140,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":141,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":142,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":139,"content":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":140,"content":"                .collect{ gp->"},{"type":"INSERT","lineNumber":141,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":142,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":145,"oldContent":"        scope.launch{"},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"DELETE","lineNumber":154,"oldContent":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":159,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"DELETE","lineNumber":162,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":165,"oldContent":"                    "},{"type":"DELETE","lineNumber":168,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":168,"content":"                    "},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats)}"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874455188,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"}"},{"type":"DELETE","lineNumber":22,"oldContent":"    }"},{"type":"DELETE","lineNumber":23,"oldContent":"        }"},{"type":"INSERT","lineNumber":21,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":22,"content":"import kotlinx.coroutines.flow.MutableStateFlow"},{"type":"INSERT","lineNumber":23,"content":"import kotlinx.coroutines.flow.SharingStarted"},{"type":"MODIFY","lineNumber":26,"content":"import kotlinx.coroutines.flow.filter","oldContent":"                        it.copy(currentA = currentA)"},{"type":"DELETE","lineNumber":28,"oldContent":"                .collect{ gp->"},{"type":"DELETE","lineNumber":29,"oldContent":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":28,"content":"import kotlinx.coroutines.flow.map"},{"type":"INSERT","lineNumber":29,"content":"import kotlinx.coroutines.flow.shareIn"},{"type":"MODIFY","lineNumber":45,"content":"    //Diagnostic info","oldContent":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":67,"content":"                when(st){","oldContent":"                }"},{"type":"INSERT","lineNumber":69,"content":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":71,"content":"            }","oldContent":"    }"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"MODIFY","lineNumber":78,"content":"                type = MavType.GCS.wrap(),","oldContent":"                }"},{"type":"MODIFY","lineNumber":91,"content":"        scope.launch {","oldContent":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":99,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":100,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":99,"content":"                        param1 = messageId.toFloat(),"},{"type":"INSERT","lineNumber":100,"content":"                        param2 = intervalUsec,"},{"type":"MODIFY","lineNumber":102,"content":"                        param4 = 0f,","oldContent":"        }"},{"type":"MODIFY","lineNumber":104,"content":"                        param6 = 0f,","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":108,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":109,"oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":108,"content":"            }"},{"type":"INSERT","lineNumber":109,"content":"            //Set rates here"},{"type":"MODIFY","lineNumber":122,"content":"","oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":127,"oldContent":"                    val vBatt = "},{"type":"DELETE","lineNumber":128,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":129,"oldContent":"        // SYS_STATUS for voltage and battery percent"},{"type":"DELETE","lineNumber":130,"oldContent":"        }"},{"type":"INSERT","lineNumber":127,"content":"                    _state.update{"},{"type":"INSERT","lineNumber":128,"content":"                        it.copy("},{"type":"INSERT","lineNumber":129,"content":"                            altitudeMsl = hud.alt,"},{"type":"INSERT","lineNumber":130,"content":"                            airspeed = hud.airspeed.takeIf { v->v>0f },"},{"type":"MODIFY","lineNumber":135,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":137,"oldContent":"}"},{"type":"DELETE","lineNumber":138,"oldContent":"    }"},{"type":"INSERT","lineNumber":137,"content":"        // GLOBAL_POSITION_INT for relative alt"},{"type":"INSERT","lineNumber":138,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":147,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":148,"oldContent":"                    "},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"INSERT","lineNumber":147,"content":"        // BATTERY_STATUS for battery info"},{"type":"INSERT","lineNumber":148,"content":"        scope.launch{"},{"type":"DELETE","lineNumber":155,"oldContent":"        }"},{"type":"DELETE","lineNumber":158,"oldContent":"        "},{"type":"DELETE","lineNumber":159,"oldContent":"}"},{"type":"DELETE","lineNumber":161,"oldContent":"                }"},{"type":"INSERT","lineNumber":158,"content":"        "},{"type":"INSERT","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent"},{"type":"INSERT","lineNumber":160,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":162,"content":"                .collect { s -> "},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt = "},{"type":"INSERT","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u"},{"type":"INSERT","lineNumber":165,"content":"                    val pct = "},{"type":"DELETE","lineNumber":163,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":165,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":168,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":170,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":173,"content":"        scope.launch{","oldContent":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874483810,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import com.divpundir.mavlink.connection.StreamState","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":13,"content":"import com.divpundir.mavlink.definitions.common.MavCmd","oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":"}"},{"type":"DELETE","lineNumber":18,"oldContent":"    }"},{"type":"DELETE","lineNumber":19,"oldContent":"        "},{"type":"INSERT","lineNumber":17,"content":"import com.divpundir.mavlink.definitions.minimal.MavAutopilot"},{"type":"INSERT","lineNumber":18,"content":"import com.divpundir.mavlink.definitions.minimal.MavModeFlag"},{"type":"INSERT","lineNumber":19,"content":"import com.divpundir.mavlink.definitions.minimal.MavType"},{"type":"MODIFY","lineNumber":40,"content":"    private val gcsComponentId : UByte = 1u","oldContent":"                        )"},{"type":"DELETE","lineNumber":49,"oldContent":"                }"},{"type":"DELETE","lineNumber":50,"oldContent":"                .collect { hud->"},{"type":"INSERT","lineNumber":49,"content":"    //connection"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"MODIFY","lineNumber":54,"content":"","oldContent":"                }"},{"type":"MODIFY","lineNumber":66,"content":"                st->","oldContent":"                }"},{"type":"DELETE","lineNumber":70,"oldContent":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"                    "},{"type":"INSERT","lineNumber":70,"content":"                }"},{"type":"INSERT","lineNumber":72,"content":"        }"},{"type":"MODIFY","lineNumber":75,"content":"","oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":88,"content":"        }","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":107,"content":"                    connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,cmd)","oldContent":"    }"},{"type":"MODIFY","lineNumber":111,"content":"            setMessageRate(24u,1f) // GPS_RAW_INT","oldContent":"                    val hdop = "},{"type":"MODIFY","lineNumber":113,"content":"            setMessageRate(74u,5f) // VFR_HUD","oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":134,"content":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"        }"},{"type":"MODIFY","lineNumber":136,"content":"","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"MODIFY","lineNumber":146,"content":"        ","oldContent":"        "},{"type":"MODIFY","lineNumber":153,"content":"                    _state.update{","oldContent":"}"},{"type":"INSERT","lineNumber":154,"content":"                        it.copy(currentA = currentA)"},{"type":"INSERT","lineNumber":155,"content":"                    }"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"DELETE","lineNumber":155,"oldContent":"                    _state.update{it.copy(sats)}"},{"type":"DELETE","lineNumber":156,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":160,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":163,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"MODIFY","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":169,"content":"                }","oldContent":"}"},{"type":"DELETE","lineNumber":171,"oldContent":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":172,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }","oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874578297,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import com.divpundir.mavlink.definitions.minimal.Heartbeat","oldContent":"        //Message Rates"},{"type":"MODIFY","lineNumber":65,"content":"            connection.streamState.collect {","oldContent":"            //Set rates here"},{"type":"MODIFY","lineNumber":72,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":74,"content":"        //Auto reconnect on failure","oldContent":"                    val hdop = "},{"type":"MODIFY","lineNumber":76,"content":"        scope.launch{","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":94,"content":"                    val cmd = CommandLong(","oldContent":"}"},{"type":"MODIFY","lineNumber":96,"content":"                        targetComponent = fcuComponentId,","oldContent":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":146,"oldContent":"        "},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"DELETE","lineNumber":149,"oldContent":"        }"},{"type":"DELETE","lineNumber":150,"oldContent":"                }"},{"type":"DELETE","lineNumber":151,"oldContent":"                    _state.update{it.copy(sats)}"},{"type":"DELETE","lineNumber":152,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":149,"content":"            frames.filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":150,"content":"                .collect { b ->"},{"type":"INSERT","lineNumber":151,"content":"                    val currentA ="},{"type":"INSERT","lineNumber":152,"content":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":155,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":158,"oldContent":"        "},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"DELETE","lineNumber":162,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":163,"oldContent":"                    val vBatt = "},{"type":"INSERT","lineNumber":162,"content":"                .collect { s ->"},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt ="},{"type":"INSERT","lineNumber":165,"content":"                    val pct ="},{"type":"DELETE","lineNumber":167,"oldContent":"                    val pct = "},{"type":"MODIFY","lineNumber":168,"content":"","oldContent":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":170,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":171,"oldContent":"        "},{"type":"DELETE","lineNumber":172,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":173,"oldContent":"    }"},{"type":"DELETE","lineNumber":175,"oldContent":"                }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop =","oldContent":"                    val hdop = "},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875126167,"changes":[{"type":"MODIFY","lineNumber":36,"content":"    private val port : Int = 5762,","oldContent":"    private val port : Int = 5760,"},{"type":"DELETE","lineNumber":41,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":42,"oldContent":"                    val currentA ="},{"type":"INSERT","lineNumber":41,"content":"){"},{"type":"INSERT","lineNumber":42,"content":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":58,"content":"                _state.update { it.copy(connected = false) }","oldContent":"                }"},{"type":"DELETE","lineNumber":63,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":64,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":63,"content":"        //Keep connected flag in sync"},{"type":"INSERT","lineNumber":64,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":71,"content":"            }"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":85,"oldContent":"                }"},{"type":"DELETE","lineNumber":86,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":85,"content":"                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,heartbeat)"},{"type":"INSERT","lineNumber":86,"content":"                delay(1000)"},{"type":"DELETE","lineNumber":105,"oldContent":"}"},{"type":"DELETE","lineNumber":106,"oldContent":"    }"},{"type":"INSERT","lineNumber":105,"content":"                        param7 = 0f"},{"type":"INSERT","lineNumber":106,"content":"                    )"},{"type":"MODIFY","lineNumber":112,"content":"            setMessageRate(33u,5f) // GLOBAL_POSITION_INT","oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":114,"content":"            setMessageRate(147u,1f) // BATTERY_STATUS","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":143,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":144,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":143,"content":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"INSERT","lineNumber":144,"content":"                }"},{"type":"MODIFY","lineNumber":157,"content":"        }","oldContent":"        }"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"DELETE","lineNumber":174,"oldContent":"                    val hdop = "},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }","oldContent":"    }"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f","oldContent":"                }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875257704,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"}"},{"type":"DELETE","lineNumber":4,"oldContent":"                .collect {  }"},{"type":"DELETE","lineNumber":5,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":3,"content":"import com.divpundir.mavlink.adapters.coroutines.tryConnect"},{"type":"INSERT","lineNumber":4,"content":"import com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2"},{"type":"INSERT","lineNumber":5,"content":"import com.divpundir.mavlink.api.wrap"},{"type":"MODIFY","lineNumber":14,"content":"import com.divpundir.mavlink.definitions.common.SysStatus","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":35,"content":"    private val host : String = \"10.0.0.1\",","oldContent":"    private val host : String = \"127.0.0.1\","},{"type":"MODIFY","lineNumber":73,"content":"","oldContent":"                }"},{"type":"MODIFY","lineNumber":77,"content":"            val heartbeat = Heartbeat(","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":101,"content":"                        param3 = 0f,","oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":131,"oldContent":"        }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    _state.update{it.copy(sats)}"},{"type":"DELETE","lineNumber":133,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":131,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v> 0f }"},{"type":"INSERT","lineNumber":132,"content":"                        )"},{"type":"INSERT","lineNumber":133,"content":"                    }"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"DELETE","lineNumber":157,"oldContent":"        }"},{"type":"MODIFY","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u","oldContent":"                }"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop =","oldContent":"    }"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875271127,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import com.divpundir.mavlink.definitions.common.GpsRawInt","oldContent":"        }"},{"type":"MODIFY","lineNumber":35,"content":"    private val host : String = \"10.0.2.2\",","oldContent":"    private val host : String = \"10.0.0.1\","},{"type":"DELETE","lineNumber":38,"oldContent":"                }"},{"type":"DELETE","lineNumber":39,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"INSERT","lineNumber":38,"content":"    private val fcuComponentId : UByte = 1u,"},{"type":"INSERT","lineNumber":39,"content":"    private val gcsSystemId : UByte = 200u,"},{"type":"DELETE","lineNumber":124,"oldContent":"}"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"        }"},{"type":"INSERT","lineNumber":124,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":125,"content":"            frames.filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":126,"content":"                .collect { hud->"},{"type":"DELETE","lineNumber":160,"oldContent":"}"},{"type":"DELETE","lineNumber":161,"oldContent":"        }"},{"type":"INSERT","lineNumber":160,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()"},{"type":"MODIFY","lineNumber":169,"content":"                }","oldContent":"    }"},{"type":"MODIFY","lineNumber":175,"content":"                .collect { gps ->","oldContent":"    }"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f","oldContent":"}"},{"type":"MODIFY","lineNumber":180,"content":"                }","oldContent":"    }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875470283,"changes":[{"type":"MODIFY","lineNumber":84,"content":"            while(isActive){","oldContent":"}"},{"type":"MODIFY","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt , batteryPercent = pct) }","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"}]},{"timestamp":1756875647211,"changes":[{"type":"MODIFY","lineNumber":83,"content":"            )","oldContent":"}"},{"type":"MODIFY","lineNumber":123,"content":"        //VFR_HUD for alt and speed","oldContent":"}"},{"type":"MODIFY","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f","oldContent":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryViewModel.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\nclass TelemetryViewModel {\n    \n}","baseTimestamp":1756874618561,"deltas":[{"timestamp":1756874624499,"changes":[{"type":"MODIFY","lineNumber":2,"content":"class TelemetryViewModel() {","oldContent":"class TelemetryViewModel {"}]},{"timestamp":1756874627157,"changes":[{"type":"MODIFY","lineNumber":2,"content":"class TelemetryViewModel(","oldContent":"class TelemetryViewModel() {"},{"type":"INSERT","lineNumber":4,"content":") {"},{"type":"INSERT","lineNumber":5,"content":"    "}]},{"timestamp":1756874636295,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    private val repo: MavlinkTelemetryRepository ","oldContent":"    "},{"type":"MODIFY","lineNumber":6,"content":"}","oldContent":"}"}]},{"timestamp":1756874640532,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    private val repo: MavlinkTelemetryRepository = MavlinkTelemetryRepository()","oldContent":"    private val repo: MavlinkTelemetryRepository "},{"type":"INSERT","lineNumber":4,"content":"    "},{"type":"INSERT","lineNumber":6,"content":"    "},{"type":"DELETE","lineNumber":6,"oldContent":"}"}]},{"timestamp":1756874647329,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"MODIFY","lineNumber":6,"content":"}","oldContent":"}"}]},{"timestamp":1756874656558,"changes":[{"type":"INSERT","lineNumber":2,"content":"import androidx.lifecycle.ViewModel"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":") {"},{"type":"DELETE","lineNumber":5,"oldContent":"}"},{"type":"INSERT","lineNumber":6,"content":") : ViewModel{"},{"type":"INSERT","lineNumber":8,"content":"}"}]},{"timestamp":1756874658894,"changes":[{"type":"MODIFY","lineNumber":4,"content":"class TelemetryViewModel(","oldContent":"class TelemetryViewModel("},{"type":"MODIFY","lineNumber":6,"content":") : ViewModel(){","oldContent":") : ViewModel{"}]},{"timestamp":1756874682248,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":"class TelemetryViewModel("},{"type":"MODIFY","lineNumber":7,"content":"    val telemetry : StateFlow<TelemetryState> get() = repo.state","oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    init {"},{"type":"INSERT","lineNumber":9,"content":"        repo.start(viewModelScope)"},{"type":"INSERT","lineNumber":10,"content":"    }"}]},{"timestamp":1756874687539,"changes":[{"type":"INSERT","lineNumber":3,"content":"import kotlinx.coroutines.flow.StateFlow"},{"type":"DELETE","lineNumber":9,"oldContent":"}"},{"type":"INSERT","lineNumber":12,"content":"}"}]},{"timestamp":1756874692487,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.lifecycle.viewModelScope"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Design/TelemetryOverLayUI.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Design/TelemetryOverLayUI.kt","baseContent":"package com.example.kotlingcspractice.Design\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport your.package.telemetry.TelemetryState\nimport kotlin.math.round\n\n@Composable\nfun TelemetryOverlay(\n    state: TelemetryState,\n    modifier: Modifier = Modifier\n) {\n    Surface(modifier = modifier, color = MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)) {\n        Column(\n            modifier = Modifier.padding(12.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\"Telemetry\", style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)\n                val connText = if (state.connected) \"Connected\" else \"Disconnected\"\n                val connColor = if (state.connected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error\n                Text(connText, color = connColor)\n            }\n\n            TelemetryRow(\"Altitude (MSL)\", state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"—\")\n            TelemetryRow(\"Altitude (Rel)\", state.altitudeRelative?.let { \"${fmt(it)} m\" } ?: \"—\")\n            TelemetryRow(\"Airspeed\", state.airspeed?.let { \"${fmt(it)} m/s\" } ?: \"—\")\n            TelemetryRow(\"Groundspeed\", state.groundspeed?.let { \"${fmt(it)} m/s\" } ?: \"—\")\n            TelemetryRow(\"Voltage\", state.voltage?.let { \"${fmt(it)} V\" } ?: \"—\")\n            TelemetryRow(\"Battery\", state.batteryPct?.let { \"$it%\" } ?: \"—\")\n            TelemetryRow(\"Current\", state.currentA?.let { \"${fmt(it)} A\" } ?: \"—\")\n            TelemetryRow(\"Satellites\", state.sats?.toString() ?: \"—\")\n            TelemetryRow(\"HDOP\", state.hdop?.let { fmt(it) } ?: \"—\")\n        }\n    }\n}\n\n@Composable\nprivate fun TelemetryRow(label: String, value: String) {\n    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {\n        Text(label, style = MaterialTheme.typography.bodyMedium)\n        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)\n    }\n}\n\nprivate fun fmt(v: Float, places: Int = 2): String {\n    val factor = 10f.pow(places)\n    return (kotlin.math.round(v * factor) / factor).toString()\n}\n\nprivate fun Float.pow(p: Int): Float = Math.pow(this.toDouble(), p.toDouble()).toFloat()","baseTimestamp":1756874756402,"deltas":[{"timestamp":1756874767725,"changes":[{"type":"INSERT","lineNumber":9,"content":"import com.example.kotlingcspractice.Telemetry.TelemetryState"}]},{"timestamp":1756874784780,"changes":[{"type":"MODIFY","lineNumber":10,"content":"","oldContent":"import your.package.telemetry.TelemetryState"}]},{"timestamp":1756874794921,"changes":[{"type":"MODIFY","lineNumber":38,"content":"            TelemetryRow(\"Voltage\", state.volatage?.let { \"${fmt(it)} V\" } ?: \"—\")","oldContent":"            TelemetryRow(\"Voltage\", state.voltage?.let { \"${fmt(it)} V\" } ?: \"—\")"}]},{"timestamp":1756874801022,"changes":[{"type":"MODIFY","lineNumber":39,"content":"            TelemetryRow(\"Battery\", state.batteryPercent?.let { \"$it%\" } ?: \"—\")","oldContent":"            TelemetryRow(\"Battery\", state.batteryPct?.let { \"$it%\" } ?: \"—\")"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/AndroidManifest.xml":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/AndroidManifest.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.KotlinGCSPractice\"\n        tools:targetApi=\"31\">\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.KotlinGCSPractice\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n</manifest>","baseTimestamp":1756875375296}}}