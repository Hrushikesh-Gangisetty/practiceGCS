{"snapshots":{"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/build.gradle.kts":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/build.gradle.kts","baseContent":"plugins {\n    alias(libs.plugins.android.application)\n    alias(libs.plugins.kotlin.android)\n    alias(libs.plugins.kotlin.compose)\n}\n\nandroid {\n    namespace = \"com.example.kotlingcspractice\"\n    compileSdk = 35\n\n    defaultConfig {\n        applicationId = \"com.example.kotlingcspractice\"\n        minSdk = 24\n        targetSdk = 35\n        versionCode = 1\n        versionName = \"1.0\"\n\n        testInstrumentationRunner = \"androidx.test.runner.AndroidJUnitRunner\"\n    }\n\n    buildTypes {\n        release {\n            isMinifyEnabled = false\n            proguardFiles(\n                getDefaultProguardFile(\"proguard-android-optimize.txt\"),\n                \"proguard-rules.pro\"\n            )\n        }\n    }\n    compileOptions {\n        sourceCompatibility = JavaVersion.VERSION_11\n        targetCompatibility = JavaVersion.VERSION_11\n    }\n    kotlinOptions {\n        jvmTarget = \"11\"\n    }\n    buildFeatures {\n        compose = true\n    }\n}\n\ndependencies {\n\n    implementation(libs.androidx.core.ktx)\n    implementation(libs.androidx.lifecycle.runtime.ktx)\n    implementation(libs.androidx.activity.compose)\n    implementation(platform(libs.androidx.compose.bom))\n    implementation(libs.androidx.ui)\n    implementation(libs.androidx.ui.graphics)\n    implementation(libs.androidx.ui.tooling.preview)\n    implementation(libs.androidx.material3)\n    testImplementation(libs.junit)\n    androidTestImplementation(libs.androidx.junit)\n    androidTestImplementation(libs.androidx.espresso.core)\n    androidTestImplementation(platform(libs.androidx.compose.bom))\n    androidTestImplementation(libs.androidx.ui.test.junit4)\n    debugImplementation(libs.androidx.ui.tooling)\n    debugImplementation(libs.androidx.ui.test.manifest)\n}\n\nependencies {\n    // MAVLink message definitions (standard dialects like common.xml)\n    implementation(\"com.divpundir.mavlink:definitions:1.2.8\")\n\n\n    // TCP connection client\n    implementation(\"com.divpundir.mavlink:connection-tcp:1.2.8\")\n\n\n    // Coroutines adapter (recommended for Android)\n    implementation(\"com.divpundir.mavlink:adapter-coroutines:1.2.8\")\n}\n","baseTimestamp":1756872092925,"deltas":[{"timestamp":1756872097721,"changes":[{"type":"MODIFY","lineNumber":60,"content":"dependencies {","oldContent":"ependencies {"}]},{"timestamp":1756874970936,"changes":[{"type":"MODIFY","lineNumber":8,"content":"    compileSdk = 36","oldContent":"    compileSdk = 35"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/MainActivity.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/MainActivity.kt","baseContent":"package com.example.kotlingcspractice\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.foundation.layout.fillMaxSize\nimport androidx.compose.foundation.layout.padding\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.material3.Text\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.tooling.preview.Preview\nimport com.example.kotlingcspractice.ui.theme.KotlinGCSPracticeTheme\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        enableEdgeToEdge()\n        setContent {\n            KotlinGCSPracticeTheme {\n                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->\n                    Greeting(\n                        name = \"Android\",\n                        modifier = Modifier.padding(innerPadding)\n                    )\n                }\n            }\n        }\n    }\n}\n\n","baseTimestamp":1756872127024,"deltas":[{"timestamp":1756872129954,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"                Scaffold(modifier = Modifier.fillMaxSize()) { innerPadding ->"},{"type":"DELETE","lineNumber":22,"oldContent":"                    Greeting("},{"type":"DELETE","lineNumber":23,"oldContent":"                        name = \"Android\","},{"type":"DELETE","lineNumber":24,"oldContent":"                        modifier = Modifier.padding(innerPadding)"},{"type":"DELETE","lineNumber":25,"oldContent":"                    )"},{"type":"INSERT","lineNumber":21,"content":"                "}]},{"timestamp":1756872147854,"changes":[{"type":"DELETE","lineNumber":28,"oldContent":""}]},{"timestamp":1756872150621,"changes":[{"type":"MODIFY","lineNumber":21,"content":"","oldContent":"                "}]},{"timestamp":1756874845118,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"        enableEdgeToEdge()"},{"type":"DELETE","lineNumber":19,"oldContent":"        setContent {"},{"type":"DELETE","lineNumber":20,"oldContent":"            KotlinGCSPracticeTheme {"},{"type":"DELETE","lineNumber":21,"oldContent":""},{"type":"DELETE","lineNumber":22,"oldContent":"                }"},{"type":"DELETE","lineNumber":23,"oldContent":"            }"},{"type":"INSERT","lineNumber":18,"content":"        "}]},{"timestamp":1756874850632,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"}"}]},{"timestamp":1756874861811,"changes":[{"type":"MODIFY","lineNumber":18,"content":"        setContent { ","oldContent":"        "},{"type":"INSERT","lineNumber":19,"content":"            "},{"type":"INSERT","lineNumber":21,"content":"        }"}]},{"timestamp":1756874869472,"changes":[{"type":"MODIFY","lineNumber":19,"content":"            val vm ","oldContent":"            "},{"type":"MODIFY","lineNumber":22,"content":"    }","oldContent":"    }"}]},{"timestamp":1756874874958,"changes":[{"type":"MODIFY","lineNumber":19,"content":"            val vm : TelemetryViewModel = TelemetryViewModel()","oldContent":"            val vm "},{"type":"INSERT","lineNumber":20,"content":"            "},{"type":"INSERT","lineNumber":22,"content":"        }"},{"type":"DELETE","lineNumber":22,"oldContent":"    }"}]},{"timestamp":1756874880854,"changes":[{"type":"INSERT","lineNumber":13,"content":"import com.example.kotlingcspractice.Telemetry.TelemetryViewModel"},{"type":"DELETE","lineNumber":22,"oldContent":"    }"},{"type":"INSERT","lineNumber":24,"content":"    }"}]},{"timestamp":1756874886972,"changes":[{"type":"MODIFY","lineNumber":21,"content":"            val state ","oldContent":"            "}]},{"timestamp":1756874891698,"changes":[{"type":"MODIFY","lineNumber":21,"content":"            val state = vm.telemetry","oldContent":"            val state "}]},{"timestamp":1756874894442,"changes":[{"type":"MODIFY","lineNumber":21,"content":"            val state = vm.telemetry.coll","oldContent":"            val state = vm.telemetry"}]},{"timestamp":1756874902723,"changes":[{"type":"INSERT","lineNumber":13,"content":"import androidx.lifecycle.compose.collectAsStateWithLifecycle"},{"type":"MODIFY","lineNumber":22,"content":"            val state = vm.telemetry.collectAsStateWithLifecycle()","oldContent":"            val state = vm.telemetry.coll"}]},{"timestamp":1756874912675,"changes":[{"type":"INSERT","lineNumber":14,"content":"import com.example.kotlingcspractice.Design.TelemetryOverlay"},{"type":"DELETE","lineNumber":22,"oldContent":"            val state = vm.telemetry.coll"},{"type":"INSERT","lineNumber":24,"content":"            TelemetryOverlay("},{"type":"INSERT","lineNumber":25,"content":"                sta"},{"type":"INSERT","lineNumber":26,"content":"            )"},{"type":"INSERT","lineNumber":28,"content":"        }"}]},{"timestamp":1756874917071,"changes":[{"type":"INSERT","lineNumber":25,"content":"                state = state.value,"},{"type":"INSERT","lineNumber":26,"content":"                modifier = Modifier"},{"type":"INSERT","lineNumber":27,"content":"                    .fillMaxSize()"},{"type":"INSERT","lineNumber":28,"content":"                    .padding(16.dp)"},{"type":"INSERT","lineNumber":29,"content":"            )"},{"type":"DELETE","lineNumber":26,"oldContent":"                sta"},{"type":"INSERT","lineNumber":31,"content":"        }"},{"type":"DELETE","lineNumber":28,"oldContent":"            )"},{"type":"DELETE","lineNumber":30,"oldContent":"        }"}]},{"timestamp":1756874926970,"changes":[{"type":"INSERT","lineNumber":7,"content":"import androidx.compose.foundation.layout.fillMaxWidth"},{"type":"DELETE","lineNumber":26,"oldContent":"        }"},{"type":"DELETE","lineNumber":28,"oldContent":"                    .fillMaxSize()"},{"type":"DELETE","lineNumber":29,"oldContent":"    }"},{"type":"DELETE","lineNumber":30,"oldContent":"                    .padding(16.dp)"},{"type":"INSERT","lineNumber":28,"content":"                    .fillMaxWidth()"},{"type":"DELETE","lineNumber":32,"oldContent":""},{"type":"INSERT","lineNumber":31,"content":"        }"},{"type":"INSERT","lineNumber":32,"content":"    }"},{"type":"INSERT","lineNumber":33,"content":""}]},{"timestamp":1756874934164,"changes":[{"type":"MODIFY","lineNumber":30,"content":"        }","oldContent":"        }"},{"type":"INSERT","lineNumber":32,"content":"}"},{"type":"DELETE","lineNumber":33,"oldContent":"        }"}]},{"timestamp":1756874941051,"changes":[{"type":"MODIFY","lineNumber":22,"content":"        setContent {","oldContent":"        setContent { "},{"type":"INSERT","lineNumber":29,"content":"            )"},{"type":"DELETE","lineNumber":30,"oldContent":"        }"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/data.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\ndata class TelemetryState","baseTimestamp":1756872194164,"deltas":[{"timestamp":1756872218483,"changes":[{"type":"INSERT","lineNumber":3,"content":"    val connected : Boolean = false,"}]},{"timestamp":1756872226460,"changes":[{"type":"MODIFY","lineNumber":4,"content":"    val altitudeMsl","oldContent":"    "}]},{"timestamp":1756872231980,"changes":[{"type":"MODIFY","lineNumber":4,"content":"    val altitudeMsl: Float? = null,","oldContent":"    val altitudeMsl"},{"type":"INSERT","lineNumber":5,"content":"    "}]},{"timestamp":1756872243337,"changes":[{"type":"INSERT","lineNumber":5,"content":"    val altitudeRelative: Float? = null,"}]},{"timestamp":1756872248587,"changes":[{"type":"MODIFY","lineNumber":6,"content":"    val air","oldContent":"    "}]},{"timestamp":1756872253050,"changes":[{"type":"MODIFY","lineNumber":6,"content":"    val airspeed: Float? = null,","oldContent":"    val air"},{"type":"INSERT","lineNumber":7,"content":"    val groundspeed: Float? = null,"},{"type":"INSERT","lineNumber":8,"content":"    "}]},{"timestamp":1756872262272,"changes":[{"type":"INSERT","lineNumber":8,"content":"    val volatage: Float? = null,"},{"type":"DELETE","lineNumber":9,"oldContent":"    "}]},{"timestamp":1756872273519,"changes":[{"type":"INSERT","lineNumber":9,"content":"    val batteryPerc"}]},{"timestamp":1756872276401,"changes":[{"type":"MODIFY","lineNumber":9,"content":"    val batteryPercent: Int? = null,","oldContent":"    val batteryPerc"},{"type":"INSERT","lineNumber":10,"content":"    "}]},{"timestamp":1756872297965,"changes":[{"type":"INSERT","lineNumber":10,"content":"    val currentA : Float? = null,"}]},{"timestamp":1756872309362,"changes":[{"type":"INSERT","lineNumber":11,"content":"    val sats : Int? = null,"}]},{"timestamp":1756872318205,"changes":[{"type":"MODIFY","lineNumber":12,"content":"    val hdop : Float? = null,","oldContent":"    "}]},{"timestamp":1756872323240,"changes":[{"type":"INSERT","lineNumber":3,"content":"    //"}]},{"timestamp":1756872330900,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    ","oldContent":"    //"},{"type":"INSERT","lineNumber":5,"content":"    //Altitude"}]},{"timestamp":1756872338346,"changes":[{"type":"INSERT","lineNumber":8,"content":"    //"}]},{"timestamp":1756872340746,"changes":[{"type":"MODIFY","lineNumber":3,"content":"","oldContent":"    "}]},{"timestamp":1756872343725,"changes":[{"type":"MODIFY","lineNumber":8,"content":"    //Speeds","oldContent":"    //"}]},{"timestamp":1756872348310,"changes":[{"type":"INSERT","lineNumber":11,"content":"    //Battery"}]},{"timestamp":1756872352843,"changes":[{"type":"INSERT","lineNumber":15,"content":"    //Sat count"}]},{"timestamp":1756872356205,"changes":[{"type":"MODIFY","lineNumber":15,"content":"    //Sat count and HDOP","oldContent":"    //Sat count"},{"type":"MODIFY","lineNumber":18,"content":")","oldContent":"    "}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\nclass MavlinkTelemetry","baseTimestamp":1756872430188,"deltas":[{"timestamp":1756874382709,"changes":[{"type":"MODIFY","lineNumber":41,"content":"){","oldContent":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000f"},{"type":"DELETE","lineNumber":65,"oldContent":"        }"},{"type":"DELETE","lineNumber":66,"oldContent":"                }"},{"type":"INSERT","lineNumber":65,"content":"            connection.streamState.collect {"},{"type":"INSERT","lineNumber":66,"content":"                st->"},{"type":"MODIFY","lineNumber":88,"content":"        }","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":119,"oldContent":"}"},{"type":"DELETE","lineNumber":120,"oldContent":"    }"},{"type":"INSERT","lineNumber":119,"content":"            .filter { it.systemId == fcuSystemId && it.componentId == fcuComponentId }"},{"type":"INSERT","lineNumber":120,"content":"            .map { it.message }"},{"type":"MODIFY","lineNumber":171,"content":"        ","oldContent":"}"},{"type":"DELETE","lineNumber":176,"oldContent":"                    val sats "},{"type":"DELETE","lineNumber":177,"oldContent":"        }"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gp"},{"type":"INSERT","lineNumber":178,"content":"        }"},{"type":"INSERT","lineNumber":180,"content":"}"}]},{"timestamp":1756874386220,"changes":[{"type":"MODIFY","lineNumber":8,"content":"import com.divpundir.mavlink.definitions.common.BatteryStatus","oldContent":"        //VFR_HUD for alt and speed"},{"type":"MODIFY","lineNumber":118,"content":"        val frames = connection.mavFrame","oldContent":"                    "},{"type":"DELETE","lineNumber":151,"oldContent":"}"},{"type":"DELETE","lineNumber":152,"oldContent":"    }"},{"type":"INSERT","lineNumber":151,"content":"                    val currentA ="},{"type":"INSERT","lineNumber":152,"content":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it > 0 }","oldContent":"                    val sats = gp"},{"type":"INSERT","lineNumber":177,"content":"                }"}]},{"timestamp":1756874392075,"changes":[{"type":"MODIFY","lineNumber":11,"content":"import com.divpundir.mavlink.definitions.common.GlobalPositionInt","oldContent":"    }"},{"type":"DELETE","lineNumber":75,"oldContent":"}"},{"type":"DELETE","lineNumber":76,"oldContent":"    }"},{"type":"INSERT","lineNumber":75,"content":""},{"type":"INSERT","lineNumber":76,"content":"        scope.launch{"},{"type":"MODIFY","lineNumber":150,"content":"                .collect { b -> ","oldContent":"    }"},{"type":"MODIFY","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent","oldContent":"}"},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }","oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it > 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    "},{"type":"INSERT","lineNumber":180,"content":"    }"}]},{"timestamp":1756874394386,"changes":[{"type":"MODIFY","lineNumber":177,"content":"                    val","oldContent":"                    "},{"type":"MODIFY","lineNumber":181,"content":"}","oldContent":"}"}]},{"timestamp":1756874399756,"changes":[{"type":"MODIFY","lineNumber":74,"content":"        //Auto reconnect on failure","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":108,"oldContent":"    }"},{"type":"MODIFY","lineNumber":108,"content":"            }","oldContent":"        }"},{"type":"INSERT","lineNumber":109,"content":"            //Set rates here"},{"type":"MODIFY","lineNumber":155,"content":"                    }","oldContent":"}"},{"type":"MODIFY","lineNumber":160,"content":"        scope.launch{","oldContent":"}"},{"type":"MODIFY","lineNumber":163,"content":"                    val vBatt = ","oldContent":"        "},{"type":"MODIFY","lineNumber":168,"content":"                    ","oldContent":"        }"},{"type":"DELETE","lineNumber":173,"oldContent":"                }"},{"type":"DELETE","lineNumber":174,"oldContent":"                    val"},{"type":"DELETE","lineNumber":175,"oldContent":"    }"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop = gps.","oldContent":"                    val"},{"type":"INSERT","lineNumber":181,"content":"}"}]},{"timestamp":1756874403275,"changes":[{"type":"MODIFY","lineNumber":7,"content":"import com.divpundir.mavlink.connection.tcp.TcpClientMavConnection","oldContent":"                .collect { b -> "},{"type":"MODIFY","lineNumber":64,"content":"        scope.launch{","oldContent":"}"},{"type":"MODIFY","lineNumber":104,"content":"                        param6 = 0f,","oldContent":"    }"},{"type":"MODIFY","lineNumber":109,"content":"            //Set rates here","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":143,"content":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":144,"oldContent":"                }"},{"type":"MODIFY","lineNumber":170,"content":"        }","oldContent":"}"},{"type":"MODIFY","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count","oldContent":"                    val"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop = ","oldContent":"                    val hdop = gps."},{"type":"INSERT","lineNumber":178,"content":"                        if "},{"type":"INSERT","lineNumber":180,"content":"        }"}]},{"timestamp":1756874411419,"changes":[{"type":"DELETE","lineNumber":38,"oldContent":"        }"},{"type":"DELETE","lineNumber":39,"oldContent":"                }"},{"type":"INSERT","lineNumber":38,"content":"    private val fcuComponentId : UByte = 1u,"},{"type":"INSERT","lineNumber":39,"content":"    private val gcsSystemId : UByte = 200u,"},{"type":"MODIFY","lineNumber":63,"content":"        //Keep connected flag in sync","oldContent":"                }"},{"type":"MODIFY","lineNumber":100,"content":"                        param2 = intervalUsec,","oldContent":"}"},{"type":"MODIFY","lineNumber":102,"content":"                        param4 = 0f,","oldContent":"        }"},{"type":"MODIFY","lineNumber":121,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)","oldContent":"        }"},{"type":"MODIFY","lineNumber":144,"content":"                }","oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"MODIFY","lineNumber":149,"content":"            frames.filterIsInstance<BatteryStatus>()","oldContent":"    }"},{"type":"MODIFY","lineNumber":154,"content":"                        it.copy(currentA = currentA)","oldContent":"}"},{"type":"MODIFY","lineNumber":162,"content":"                .collect { s -> ","oldContent":"}"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt())","oldContent":"                        if "},{"type":"MODIFY","lineNumber":181,"content":"    }","oldContent":"    }"}]},{"timestamp":1756874414701,"changes":[{"type":"MODIFY","lineNumber":35,"content":"    private val host : String = \"127.0.0.1\",","oldContent":"    }"},{"type":"MODIFY","lineNumber":58,"content":"                _state.update { it.copy(connected = false) }","oldContent":"}"},{"type":"MODIFY","lineNumber":99,"content":"                        param1 = messageId.toFloat(),","oldContent":"}"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt() == )","oldContent":"                        if (gps.eph.toUInt())"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"DELETE","lineNumber":181,"oldContent":"    }"}]},{"timestamp":1756874421550,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":10,"oldContent":"                    val pct = "},{"type":"INSERT","lineNumber":9,"content":"import com.divpundir.mavlink.definitions.common.CommandLong"},{"type":"INSERT","lineNumber":10,"content":"import com.divpundir.mavlink.definitions.common.CommonDialect"},{"type":"DELETE","lineNumber":31,"oldContent":"    }"},{"type":"DELETE","lineNumber":32,"oldContent":"        }"},{"type":"INSERT","lineNumber":31,"content":"import kotlinx.coroutines.isActive"},{"type":"INSERT","lineNumber":32,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":51,"oldContent":"                .collect{ gp->"},{"type":"DELETE","lineNumber":52,"oldContent":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":51,"content":"    private val connection = TcpClientMavConnection(host,port, CommonDialect).asCoroutine()"},{"type":"INSERT","lineNumber":52,"content":""},{"type":"MODIFY","lineNumber":73,"content":"","oldContent":"}"},{"type":"MODIFY","lineNumber":77,"content":"            val heartbeat = Heartbeat(","oldContent":"                    "},{"type":"DELETE","lineNumber":85,"oldContent":"                    }"},{"type":"DELETE","lineNumber":86,"oldContent":"                        it.copy(currentA = currentA)"},{"type":"INSERT","lineNumber":85,"content":"                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,heartbeat)"},{"type":"INSERT","lineNumber":86,"content":"                delay(1000)"},{"type":"MODIFY","lineNumber":94,"content":"                    val cmd = CommandLong(","oldContent":"        }"},{"type":"MODIFY","lineNumber":96,"content":"                        targetComponent = fcuComponentId,","oldContent":"                    "},{"type":"MODIFY","lineNumber":107,"content":"                    connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,cmd)","oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"MODIFY","lineNumber":111,"content":"            setMessageRate(24u,1f) // GPS_RAW_INT","oldContent":"                            altitudeMsl = hud.alt,"},{"type":"MODIFY","lineNumber":113,"content":"            setMessageRate(74u,5f) // VFR_HUD","oldContent":"}"},{"type":"MODIFY","lineNumber":122,"content":"","oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":127,"oldContent":"    }"},{"type":"DELETE","lineNumber":128,"oldContent":"        }"},{"type":"DELETE","lineNumber":129,"oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":130,"oldContent":"                    val vBatt = "},{"type":"INSERT","lineNumber":127,"content":"                    _state.update{"},{"type":"INSERT","lineNumber":128,"content":"                        it.copy("},{"type":"INSERT","lineNumber":129,"content":"                            altitudeMsl = hud.alt,"},{"type":"INSERT","lineNumber":130,"content":"                            airspeed = hud.airspeed.takeIf { v->v>0f },"},{"type":"DELETE","lineNumber":139,"oldContent":"                }"},{"type":"DELETE","lineNumber":140,"oldContent":"                    "},{"type":"DELETE","lineNumber":141,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":142,"oldContent":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":139,"content":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":140,"content":"                .collect{ gp->"},{"type":"INSERT","lineNumber":141,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":142,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"MODIFY","lineNumber":146,"content":"        ","oldContent":"            "},{"type":"MODIFY","lineNumber":153,"content":"                    _state.update{","oldContent":"        "},{"type":"DELETE","lineNumber":157,"oldContent":"    }"},{"type":"INSERT","lineNumber":158,"content":"        "},{"type":"MODIFY","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()","oldContent":"        }"},{"type":"MODIFY","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u","oldContent":"    }"},{"type":"INSERT","lineNumber":165,"content":"                    val pct = "},{"type":"INSERT","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":166,"oldContent":"}"},{"type":"DELETE","lineNumber":167,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":168,"oldContent":"                    "},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"DELETE","lineNumber":171,"oldContent":"                        if "},{"type":"DELETE","lineNumber":172,"oldContent":"        }"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":"}"}]},{"timestamp":1756874431089,"changes":[{"type":"MODIFY","lineNumber":20,"content":"import kotlinx.coroutines.CoroutineScope","oldContent":"                    val currentA ="},{"type":"DELETE","lineNumber":55,"oldContent":"                    _state.update{it.copy(volatage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":56,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"DELETE","lineNumber":57,"oldContent":"                    val pct = "},{"type":"INSERT","lineNumber":55,"content":"        //Initial Launch Scope"},{"type":"INSERT","lineNumber":56,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":57,"content":"            while(isActive && !connection.tryConnect(this)){"},{"type":"MODIFY","lineNumber":68,"content":"                    is StreamState.Active -> _state.update { it.copy(connected = true) }","oldContent":"                }"},{"type":"DELETE","lineNumber":81,"oldContent":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000f"},{"type":"DELETE","lineNumber":82,"oldContent":"                    val vBatt = "},{"type":"DELETE","lineNumber":83,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":84,"oldContent":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":81,"content":"                customMode = 0u,"},{"type":"INSERT","lineNumber":82,"content":"                mavlinkVersion = 3u"},{"type":"INSERT","lineNumber":83,"content":"            )"},{"type":"INSERT","lineNumber":84,"content":"            while(isActive){"},{"type":"MODIFY","lineNumber":101,"content":"                        param3 = 0f,","oldContent":"                    _state.update{it.copy(volatage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":105,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":106,"oldContent":"                    }"},{"type":"INSERT","lineNumber":105,"content":"                        param7 = 0f"},{"type":"INSERT","lineNumber":106,"content":"                    )"},{"type":"MODIFY","lineNumber":112,"content":"            setMessageRate(33u,5f) // GLOBAL_POSITION_INT","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":114,"content":"            setMessageRate(147u,1f) // BATTERY_STATUS","oldContent":"                        it.copy(currentA = currentA)"},{"type":"DELETE","lineNumber":136,"oldContent":"        // BATTERY_STATUS for battery info"},{"type":"DELETE","lineNumber":137,"oldContent":"}"},{"type":"DELETE","lineNumber":138,"oldContent":"                .collect {  }"},{"type":"INSERT","lineNumber":136,"content":""},{"type":"INSERT","lineNumber":137,"content":"        // GLOBAL_POSITION_INT for relative alt"},{"type":"INSERT","lineNumber":138,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":145,"oldContent":"                }"},{"type":"DELETE","lineNumber":146,"oldContent":"        "},{"type":"DELETE","lineNumber":148,"oldContent":"                    val sats "},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"INSERT","lineNumber":147,"content":"        // BATTERY_STATUS for battery info"},{"type":"INSERT","lineNumber":148,"content":"        scope.launch{"},{"type":"MODIFY","lineNumber":156,"content":"                }","oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"INSERT","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent"},{"type":"DELETE","lineNumber":159,"oldContent":"        }"},{"type":"DELETE","lineNumber":160,"oldContent":"                        if "},{"type":"DELETE","lineNumber":162,"oldContent":"}"},{"type":"DELETE","lineNumber":163,"oldContent":"    }"},{"type":"INSERT","lineNumber":162,"content":"                .collect { s -> "},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt = "},{"type":"DELETE","lineNumber":166,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"INSERT","lineNumber":168,"content":"                    "},{"type":"DELETE","lineNumber":170,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":179,"content":"                }"},{"type":"INSERT","lineNumber":180,"content":"        }"},{"type":"INSERT","lineNumber":181,"content":"    }"},{"type":"INSERT","lineNumber":182,"content":"}"}]},{"timestamp":1756874436525,"changes":[{"type":"MODIFY","lineNumber":2,"content":"import com.divpundir.mavlink.adapters.coroutines.asCoroutine","oldContent":"class MavlinkTelemetry"},{"type":"MODIFY","lineNumber":27,"content":"import kotlinx.coroutines.flow.filterIsInstance","oldContent":""},{"type":"MODIFY","lineNumber":30,"content":"import kotlinx.coroutines.flow.update","oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":33,"oldContent":"}"},{"type":"DELETE","lineNumber":34,"oldContent":"    }"},{"type":"INSERT","lineNumber":33,"content":""},{"type":"INSERT","lineNumber":34,"content":"class MavlinkTelemetryRepository("},{"type":"DELETE","lineNumber":36,"oldContent":"                }"},{"type":"DELETE","lineNumber":37,"oldContent":"                    "},{"type":"INSERT","lineNumber":36,"content":"    private val port : Int = 5760,"},{"type":"INSERT","lineNumber":37,"content":"    private val fcuSystemId : UByte = 1u,"},{"type":"DELETE","lineNumber":47,"oldContent":"                }"},{"type":"DELETE","lineNumber":48,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"INSERT","lineNumber":47,"content":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"DELETE","lineNumber":59,"oldContent":"                }"},{"type":"DELETE","lineNumber":60,"oldContent":"                    "},{"type":"DELETE","lineNumber":61,"oldContent":"                    _state.update{it.copy(volatage = vBatt, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":62,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":59,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":60,"content":"            }"},{"type":"INSERT","lineNumber":61,"content":"        }"},{"type":"INSERT","lineNumber":62,"content":""},{"type":"DELETE","lineNumber":79,"oldContent":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"DELETE","lineNumber":80,"oldContent":""},{"type":"INSERT","lineNumber":79,"content":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":80,"content":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"DELETE","lineNumber":92,"oldContent":""},{"type":"DELETE","lineNumber":93,"oldContent":"}"},{"type":"INSERT","lineNumber":92,"content":"            suspend fun setMessageRate(messageId: UInt,hz: Float){"},{"type":"INSERT","lineNumber":93,"content":"                val intervalUsec = if(hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"MODIFY","lineNumber":95,"content":"                        targetSystem = fcuSystemId,","oldContent":"        }"},{"type":"DELETE","lineNumber":97,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":98,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":97,"content":"                        command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"INSERT","lineNumber":98,"content":"                        confirmation = 0u,"},{"type":"MODIFY","lineNumber":103,"content":"                        param5 = 0f,","oldContent":"}"},{"type":"MODIFY","lineNumber":110,"content":"            setMessageRate(1u,1f) // SYS_STATUS","oldContent":"                .collect { hud->"},{"type":"DELETE","lineNumber":115,"oldContent":"                }"},{"type":"MODIFY","lineNumber":116,"content":"        // Collecting the messages from the FCU","oldContent":"    }"},{"type":"INSERT","lineNumber":117,"content":""},{"type":"DELETE","lineNumber":123,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":124,"oldContent":"                    val currentA ="},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"                    "},{"type":"INSERT","lineNumber":123,"content":"        //VFR_HUD for alt and speed"},{"type":"INSERT","lineNumber":124,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":125,"content":"            frames.filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":126,"content":"                .collect { hud->"},{"type":"INSERT","lineNumber":131,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v> 0f }"},{"type":"INSERT","lineNumber":132,"content":"                        )"},{"type":"INSERT","lineNumber":133,"content":"                    }"},{"type":"INSERT","lineNumber":134,"content":"                }"},{"type":"DELETE","lineNumber":132,"oldContent":"                        if "},{"type":"DELETE","lineNumber":133,"oldContent":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":134,"oldContent":"        }"},{"type":"DELETE","lineNumber":135,"oldContent":"}"},{"type":"MODIFY","lineNumber":143,"content":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":144,"content":"                }"},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":147,"oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":149,"oldContent":"                    val pct = "},{"type":"DELETE","lineNumber":150,"oldContent":"        "},{"type":"DELETE","lineNumber":151,"oldContent":"}"},{"type":"DELETE","lineNumber":152,"oldContent":"    }"},{"type":"INSERT","lineNumber":149,"content":"            frames.filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":150,"content":"                .collect { b -> "},{"type":"INSERT","lineNumber":151,"content":"                    val currentA ="},{"type":"INSERT","lineNumber":152,"content":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"INSERT","lineNumber":153,"content":"                    _state.update{"},{"type":"INSERT","lineNumber":154,"content":"                        it.copy(currentA = currentA)"},{"type":"INSERT","lineNumber":155,"content":"                    }"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"INSERT","lineNumber":158,"content":"        "},{"type":"INSERT","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent"},{"type":"INSERT","lineNumber":160,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":162,"content":"                .collect { s -> "},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt = "},{"type":"INSERT","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u"},{"type":"INSERT","lineNumber":165,"content":"                    val pct = "},{"type":"INSERT","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":168,"content":"                    "},{"type":"DELETE","lineNumber":155,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":156,"oldContent":"                }"},{"type":"DELETE","lineNumber":158,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":160,"oldContent":"        // SYS_STATUS for voltage and battery percent"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":162,"oldContent":"                .collect { s -> "},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874446633,"changes":[{"type":"MODIFY","lineNumber":15,"content":"import com.divpundir.mavlink.definitions.common.VfrHud","oldContent":"            frames.filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":24,"oldContent":"                        it.copy("},{"type":"DELETE","lineNumber":25,"oldContent":"                    )"},{"type":"INSERT","lineNumber":24,"content":"import kotlinx.coroutines.flow.StateFlow"},{"type":"INSERT","lineNumber":25,"content":"import kotlinx.coroutines.flow.asStateFlow"},{"type":"DELETE","lineNumber":43,"oldContent":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"DELETE","lineNumber":44,"oldContent":"                autopilot = MavAutopilot.INVALID.wrap(),"},{"type":"INSERT","lineNumber":43,"content":"    val state : StateFlow<TelemetryState> = _state.asStateFlow()"},{"type":"INSERT","lineNumber":44,"content":""},{"type":"MODIFY","lineNumber":46,"content":"    val lastFailure : StateFlow<Throwable> get() = _lastFailure.asStateFlow() as StateFlow<Throwable>","oldContent":"}"},{"type":"MODIFY","lineNumber":53,"content":"    fun start(scope: CoroutineScope){","oldContent":"                .collect{ gp->"},{"type":"MODIFY","lineNumber":72,"content":"        }","oldContent":"    }"},{"type":"MODIFY","lineNumber":87,"content":"            }","oldContent":"                }"},{"type":"MODIFY","lineNumber":89,"content":"","oldContent":"            frames.filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":90,"content":"        //Message Rates"},{"type":"DELETE","lineNumber":91,"oldContent":"                }"},{"type":"INSERT","lineNumber":115,"content":"        }"},{"type":"DELETE","lineNumber":117,"oldContent":"                }"},{"type":"DELETE","lineNumber":118,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"DELETE","lineNumber":119,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":120,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":121,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":118,"content":"        val frames = connection.mavFrame"},{"type":"INSERT","lineNumber":119,"content":"            .filter { it.systemId == fcuSystemId && it.componentId == fcuComponentId }"},{"type":"INSERT","lineNumber":120,"content":"            .map { it.message }"},{"type":"INSERT","lineNumber":121,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)"},{"type":"DELETE","lineNumber":132,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"INSERT","lineNumber":135,"content":"        }"},{"type":"DELETE","lineNumber":139,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":140,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":141,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":142,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":139,"content":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":140,"content":"                .collect{ gp->"},{"type":"INSERT","lineNumber":141,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":142,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":145,"oldContent":"        scope.launch{"},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"DELETE","lineNumber":154,"oldContent":"                }"},{"type":"DELETE","lineNumber":156,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":159,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"DELETE","lineNumber":162,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":165,"oldContent":"                    "},{"type":"DELETE","lineNumber":168,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":168,"content":"                    "},{"type":"INSERT","lineNumber":169,"content":"                }"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats)}"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874455188,"changes":[{"type":"DELETE","lineNumber":21,"oldContent":"}"},{"type":"DELETE","lineNumber":22,"oldContent":"    }"},{"type":"DELETE","lineNumber":23,"oldContent":"        }"},{"type":"INSERT","lineNumber":21,"content":"import kotlinx.coroutines.delay"},{"type":"INSERT","lineNumber":22,"content":"import kotlinx.coroutines.flow.MutableStateFlow"},{"type":"INSERT","lineNumber":23,"content":"import kotlinx.coroutines.flow.SharingStarted"},{"type":"MODIFY","lineNumber":26,"content":"import kotlinx.coroutines.flow.filter","oldContent":"                        it.copy(currentA = currentA)"},{"type":"DELETE","lineNumber":28,"oldContent":"                .collect{ gp->"},{"type":"DELETE","lineNumber":29,"oldContent":"            frames.filterIsInstance<GlobalPositionInt>()"},{"type":"INSERT","lineNumber":28,"content":"import kotlinx.coroutines.flow.map"},{"type":"INSERT","lineNumber":29,"content":"import kotlinx.coroutines.flow.shareIn"},{"type":"MODIFY","lineNumber":45,"content":"    //Diagnostic info","oldContent":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":67,"content":"                when(st){","oldContent":"                }"},{"type":"INSERT","lineNumber":69,"content":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":71,"content":"            }","oldContent":"    }"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"MODIFY","lineNumber":78,"content":"                type = MavType.GCS.wrap(),","oldContent":"                }"},{"type":"MODIFY","lineNumber":91,"content":"        scope.launch {","oldContent":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":99,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":100,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":99,"content":"                        param1 = messageId.toFloat(),"},{"type":"INSERT","lineNumber":100,"content":"                        param2 = intervalUsec,"},{"type":"MODIFY","lineNumber":102,"content":"                        param4 = 0f,","oldContent":"        }"},{"type":"MODIFY","lineNumber":104,"content":"                        param6 = 0f,","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"DELETE","lineNumber":108,"oldContent":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"DELETE","lineNumber":109,"oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":108,"content":"            }"},{"type":"INSERT","lineNumber":109,"content":"            //Set rates here"},{"type":"MODIFY","lineNumber":122,"content":"","oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":127,"oldContent":"                    val vBatt = "},{"type":"DELETE","lineNumber":128,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":129,"oldContent":"        // SYS_STATUS for voltage and battery percent"},{"type":"DELETE","lineNumber":130,"oldContent":"        }"},{"type":"INSERT","lineNumber":127,"content":"                    _state.update{"},{"type":"INSERT","lineNumber":128,"content":"                        it.copy("},{"type":"INSERT","lineNumber":129,"content":"                            altitudeMsl = hud.alt,"},{"type":"INSERT","lineNumber":130,"content":"                            airspeed = hud.airspeed.takeIf { v->v>0f },"},{"type":"MODIFY","lineNumber":135,"content":"        }","oldContent":"        }"},{"type":"DELETE","lineNumber":137,"oldContent":"}"},{"type":"DELETE","lineNumber":138,"oldContent":"    }"},{"type":"INSERT","lineNumber":137,"content":"        // GLOBAL_POSITION_INT for relative alt"},{"type":"INSERT","lineNumber":138,"content":"        scope.launch {"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":147,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":148,"oldContent":"                    "},{"type":"INSERT","lineNumber":146,"content":"        "},{"type":"INSERT","lineNumber":147,"content":"        // BATTERY_STATUS for battery info"},{"type":"INSERT","lineNumber":148,"content":"        scope.launch{"},{"type":"DELETE","lineNumber":155,"oldContent":"        }"},{"type":"DELETE","lineNumber":158,"oldContent":"        "},{"type":"DELETE","lineNumber":159,"oldContent":"}"},{"type":"DELETE","lineNumber":161,"oldContent":"                }"},{"type":"INSERT","lineNumber":158,"content":"        "},{"type":"INSERT","lineNumber":159,"content":"        // SYS_STATUS for voltage and battery percent"},{"type":"INSERT","lineNumber":160,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":162,"content":"                .collect { s -> "},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt = "},{"type":"INSERT","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u"},{"type":"INSERT","lineNumber":165,"content":"                    val pct = "},{"type":"DELETE","lineNumber":163,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":165,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":168,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":170,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":173,"content":"        scope.launch{","oldContent":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874483810,"changes":[{"type":"MODIFY","lineNumber":6,"content":"import com.divpundir.mavlink.connection.StreamState","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":13,"content":"import com.divpundir.mavlink.definitions.common.MavCmd","oldContent":""},{"type":"DELETE","lineNumber":17,"oldContent":"}"},{"type":"DELETE","lineNumber":18,"oldContent":"    }"},{"type":"DELETE","lineNumber":19,"oldContent":"        "},{"type":"INSERT","lineNumber":17,"content":"import com.divpundir.mavlink.definitions.minimal.MavAutopilot"},{"type":"INSERT","lineNumber":18,"content":"import com.divpundir.mavlink.definitions.minimal.MavModeFlag"},{"type":"INSERT","lineNumber":19,"content":"import com.divpundir.mavlink.definitions.minimal.MavType"},{"type":"MODIFY","lineNumber":40,"content":"    private val gcsComponentId : UByte = 1u","oldContent":"                        )"},{"type":"DELETE","lineNumber":49,"oldContent":"                }"},{"type":"DELETE","lineNumber":50,"oldContent":"                .collect { hud->"},{"type":"INSERT","lineNumber":49,"content":"    //connection"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"MODIFY","lineNumber":54,"content":"","oldContent":"                }"},{"type":"MODIFY","lineNumber":66,"content":"                st->","oldContent":"                }"},{"type":"DELETE","lineNumber":70,"oldContent":"    }"},{"type":"DELETE","lineNumber":71,"oldContent":"                    "},{"type":"INSERT","lineNumber":70,"content":"                }"},{"type":"INSERT","lineNumber":72,"content":"        }"},{"type":"MODIFY","lineNumber":75,"content":"","oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":88,"content":"        }","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":107,"content":"                    connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,cmd)","oldContent":"    }"},{"type":"MODIFY","lineNumber":111,"content":"            setMessageRate(24u,1f) // GPS_RAW_INT","oldContent":"                    val hdop = "},{"type":"MODIFY","lineNumber":113,"content":"            setMessageRate(74u,5f) // VFR_HUD","oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":134,"content":"                }"},{"type":"DELETE","lineNumber":135,"oldContent":"        }"},{"type":"MODIFY","lineNumber":136,"content":"","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"MODIFY","lineNumber":146,"content":"        ","oldContent":"        "},{"type":"MODIFY","lineNumber":153,"content":"                    _state.update{","oldContent":"}"},{"type":"INSERT","lineNumber":154,"content":"                        it.copy(currentA = currentA)"},{"type":"INSERT","lineNumber":155,"content":"                    }"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"DELETE","lineNumber":155,"oldContent":"                    _state.update{it.copy(sats)}"},{"type":"DELETE","lineNumber":156,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"DELETE","lineNumber":160,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":163,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"MODIFY","lineNumber":166,"content":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"INSERT","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":169,"content":"                }","oldContent":"}"},{"type":"DELETE","lineNumber":171,"oldContent":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":172,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":171,"content":"        "},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }","oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":177,"content":"                    val hdop = "},{"type":"INSERT","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756874578297,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import com.divpundir.mavlink.definitions.minimal.Heartbeat","oldContent":"        //Message Rates"},{"type":"MODIFY","lineNumber":65,"content":"            connection.streamState.collect {","oldContent":"            //Set rates here"},{"type":"MODIFY","lineNumber":72,"content":"        }","oldContent":"        }"},{"type":"MODIFY","lineNumber":74,"content":"        //Auto reconnect on failure","oldContent":"                    val hdop = "},{"type":"MODIFY","lineNumber":76,"content":"        scope.launch{","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":94,"content":"                    val cmd = CommandLong(","oldContent":"}"},{"type":"MODIFY","lineNumber":96,"content":"                        targetComponent = fcuComponentId,","oldContent":"        }"},{"type":"DELETE","lineNumber":145,"oldContent":"        "},{"type":"DELETE","lineNumber":146,"oldContent":"        "},{"type":"INSERT","lineNumber":145,"content":"        }"},{"type":"INSERT","lineNumber":146,"content":""},{"type":"DELETE","lineNumber":149,"oldContent":"        }"},{"type":"DELETE","lineNumber":150,"oldContent":"                }"},{"type":"DELETE","lineNumber":151,"oldContent":"                    _state.update{it.copy(sats)}"},{"type":"DELETE","lineNumber":152,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":149,"content":"            frames.filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":150,"content":"                .collect { b ->"},{"type":"INSERT","lineNumber":151,"content":"                    val currentA ="},{"type":"INSERT","lineNumber":152,"content":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":155,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":158,"oldContent":"        "},{"type":"INSERT","lineNumber":157,"content":"        }"},{"type":"INSERT","lineNumber":158,"content":""},{"type":"DELETE","lineNumber":162,"oldContent":"                .collect { s -> "},{"type":"DELETE","lineNumber":163,"oldContent":"                    val vBatt = "},{"type":"INSERT","lineNumber":162,"content":"                .collect { s ->"},{"type":"INSERT","lineNumber":163,"content":"                    val vBatt ="},{"type":"INSERT","lineNumber":165,"content":"                    val pct ="},{"type":"DELETE","lineNumber":167,"oldContent":"                    val pct = "},{"type":"MODIFY","lineNumber":168,"content":"","oldContent":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":170,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":171,"oldContent":"        "},{"type":"DELETE","lineNumber":172,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":173,"oldContent":"    }"},{"type":"DELETE","lineNumber":175,"oldContent":"                }"},{"type":"INSERT","lineNumber":171,"content":""},{"type":"INSERT","lineNumber":172,"content":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":173,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":174,"content":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":175,"content":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop =","oldContent":"                    val hdop = "},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875126167,"changes":[{"type":"MODIFY","lineNumber":36,"content":"    private val port : Int = 5762,","oldContent":"    private val port : Int = 5760,"},{"type":"DELETE","lineNumber":41,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":42,"oldContent":"                    val currentA ="},{"type":"INSERT","lineNumber":41,"content":"){"},{"type":"INSERT","lineNumber":42,"content":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"MODIFY","lineNumber":58,"content":"                _state.update { it.copy(connected = false) }","oldContent":"                }"},{"type":"DELETE","lineNumber":63,"oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"DELETE","lineNumber":64,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":63,"content":"        //Keep connected flag in sync"},{"type":"INSERT","lineNumber":64,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":71,"content":"            }"},{"type":"DELETE","lineNumber":72,"oldContent":"        }"},{"type":"DELETE","lineNumber":85,"oldContent":"                }"},{"type":"DELETE","lineNumber":86,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":85,"content":"                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,heartbeat)"},{"type":"INSERT","lineNumber":86,"content":"                delay(1000)"},{"type":"DELETE","lineNumber":105,"oldContent":"}"},{"type":"DELETE","lineNumber":106,"oldContent":"    }"},{"type":"INSERT","lineNumber":105,"content":"                        param7 = 0f"},{"type":"INSERT","lineNumber":106,"content":"                    )"},{"type":"MODIFY","lineNumber":112,"content":"            setMessageRate(33u,5f) // GLOBAL_POSITION_INT","oldContent":"            frames.filterIsInstance<GpsRawInt>()"},{"type":"MODIFY","lineNumber":114,"content":"            setMessageRate(147u,1f) // BATTERY_STATUS","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":143,"oldContent":"                    val hdop = "},{"type":"DELETE","lineNumber":144,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":143,"content":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"INSERT","lineNumber":144,"content":"                }"},{"type":"MODIFY","lineNumber":157,"content":"        }","oldContent":"        }"},{"type":"INSERT","lineNumber":170,"content":"        }"},{"type":"DELETE","lineNumber":174,"oldContent":"                    val hdop = "},{"type":"MODIFY","lineNumber":176,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }","oldContent":"    }"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f","oldContent":"                }"},{"type":"INSERT","lineNumber":180,"content":"                }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875257704,"changes":[{"type":"DELETE","lineNumber":3,"oldContent":"}"},{"type":"DELETE","lineNumber":4,"oldContent":"                .collect {  }"},{"type":"DELETE","lineNumber":5,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"INSERT","lineNumber":3,"content":"import com.divpundir.mavlink.adapters.coroutines.tryConnect"},{"type":"INSERT","lineNumber":4,"content":"import com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2"},{"type":"INSERT","lineNumber":5,"content":"import com.divpundir.mavlink.api.wrap"},{"type":"MODIFY","lineNumber":14,"content":"import com.divpundir.mavlink.definitions.common.SysStatus","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":35,"content":"    private val host : String = \"10.0.0.1\",","oldContent":"    private val host : String = \"127.0.0.1\","},{"type":"MODIFY","lineNumber":73,"content":"","oldContent":"                }"},{"type":"MODIFY","lineNumber":77,"content":"            val heartbeat = Heartbeat(","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":101,"content":"                        param3 = 0f,","oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":131,"oldContent":"        }"},{"type":"DELETE","lineNumber":132,"oldContent":"                    _state.update{it.copy(sats)}"},{"type":"DELETE","lineNumber":133,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\\"},{"type":"INSERT","lineNumber":131,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v> 0f }"},{"type":"INSERT","lineNumber":132,"content":"                        )"},{"type":"INSERT","lineNumber":133,"content":"                    }"},{"type":"INSERT","lineNumber":156,"content":"                }"},{"type":"DELETE","lineNumber":157,"oldContent":"        }"},{"type":"MODIFY","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u","oldContent":"                }"},{"type":"MODIFY","lineNumber":177,"content":"                    val hdop =","oldContent":"    }"},{"type":"INSERT","lineNumber":179,"content":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":181,"content":"        }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875271127,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import com.divpundir.mavlink.definitions.common.GpsRawInt","oldContent":"        }"},{"type":"MODIFY","lineNumber":35,"content":"    private val host : String = \"10.0.2.2\",","oldContent":"    private val host : String = \"10.0.0.1\","},{"type":"DELETE","lineNumber":38,"oldContent":"                }"},{"type":"DELETE","lineNumber":39,"oldContent":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph / 100f"},{"type":"INSERT","lineNumber":38,"content":"    private val fcuComponentId : UByte = 1u,"},{"type":"INSERT","lineNumber":39,"content":"    private val gcsSystemId : UByte = 200u,"},{"type":"DELETE","lineNumber":124,"oldContent":"}"},{"type":"DELETE","lineNumber":125,"oldContent":"    }"},{"type":"DELETE","lineNumber":126,"oldContent":"        }"},{"type":"INSERT","lineNumber":124,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":125,"content":"            frames.filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":126,"content":"                .collect { hud->"},{"type":"DELETE","lineNumber":160,"oldContent":"}"},{"type":"DELETE","lineNumber":161,"oldContent":"        }"},{"type":"INSERT","lineNumber":160,"content":"        scope.launch{"},{"type":"INSERT","lineNumber":161,"content":"            frames.filterIsInstance<SysStatus>()"},{"type":"MODIFY","lineNumber":169,"content":"                }","oldContent":"    }"},{"type":"MODIFY","lineNumber":175,"content":"                .collect { gps ->","oldContent":"    }"},{"type":"MODIFY","lineNumber":178,"content":"                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f","oldContent":"}"},{"type":"MODIFY","lineNumber":180,"content":"                }","oldContent":"    }"},{"type":"INSERT","lineNumber":182,"content":"    }"},{"type":"INSERT","lineNumber":183,"content":"}"}]},{"timestamp":1756875470283,"changes":[{"type":"MODIFY","lineNumber":84,"content":"            while(isActive){","oldContent":"}"},{"type":"MODIFY","lineNumber":167,"content":"                    _state.update{it.copy(volatage = vBatt , batteryPercent = pct) }","oldContent":"                    _state.update{it.copy(volatage = vBatt as Float?, batteryPercent = pct) }"}]},{"timestamp":1756875647211,"changes":[{"type":"MODIFY","lineNumber":83,"content":"            )","oldContent":"}"},{"type":"MODIFY","lineNumber":123,"content":"        //VFR_HUD for alt and speed","oldContent":"}"},{"type":"MODIFY","lineNumber":164,"content":"                        if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f","oldContent":"                        if (s.voltageBattery.toUInt()==0xFFFFu) null else s.voltageBattery / 1000u"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryViewModel.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\nclass TelemetryViewModel {\n    \n}","baseTimestamp":1756874618561,"deltas":[{"timestamp":1756874624499,"changes":[{"type":"MODIFY","lineNumber":2,"content":"class TelemetryViewModel() {","oldContent":"class TelemetryViewModel {"}]},{"timestamp":1756874627157,"changes":[{"type":"MODIFY","lineNumber":2,"content":"class TelemetryViewModel(","oldContent":"class TelemetryViewModel() {"},{"type":"INSERT","lineNumber":4,"content":") {"},{"type":"INSERT","lineNumber":5,"content":"    "}]},{"timestamp":1756874636295,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    private val repo: MavlinkTelemetryRepository ","oldContent":"    "},{"type":"MODIFY","lineNumber":6,"content":"}","oldContent":"}"}]},{"timestamp":1756874640532,"changes":[{"type":"MODIFY","lineNumber":3,"content":"    private val repo: MavlinkTelemetryRepository = MavlinkTelemetryRepository()","oldContent":"    private val repo: MavlinkTelemetryRepository "},{"type":"INSERT","lineNumber":4,"content":"    "},{"type":"INSERT","lineNumber":6,"content":"    "},{"type":"DELETE","lineNumber":6,"oldContent":"}"}]},{"timestamp":1756874647329,"changes":[{"type":"DELETE","lineNumber":4,"oldContent":"    "},{"type":"MODIFY","lineNumber":6,"content":"}","oldContent":"}"}]},{"timestamp":1756874656558,"changes":[{"type":"INSERT","lineNumber":2,"content":"import androidx.lifecycle.ViewModel"},{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":") {"},{"type":"DELETE","lineNumber":5,"oldContent":"}"},{"type":"INSERT","lineNumber":6,"content":") : ViewModel{"},{"type":"INSERT","lineNumber":8,"content":"}"}]},{"timestamp":1756874658894,"changes":[{"type":"MODIFY","lineNumber":4,"content":"class TelemetryViewModel(","oldContent":"class TelemetryViewModel("},{"type":"MODIFY","lineNumber":6,"content":") : ViewModel(){","oldContent":") : ViewModel{"}]},{"timestamp":1756874682248,"changes":[{"type":"INSERT","lineNumber":3,"content":""},{"type":"DELETE","lineNumber":4,"oldContent":"class TelemetryViewModel("},{"type":"MODIFY","lineNumber":7,"content":"    val telemetry : StateFlow<TelemetryState> get() = repo.state","oldContent":"    "},{"type":"INSERT","lineNumber":8,"content":"    init {"},{"type":"INSERT","lineNumber":9,"content":"        repo.start(viewModelScope)"},{"type":"INSERT","lineNumber":10,"content":"    }"}]},{"timestamp":1756874687539,"changes":[{"type":"INSERT","lineNumber":3,"content":"import kotlinx.coroutines.flow.StateFlow"},{"type":"DELETE","lineNumber":9,"oldContent":"}"},{"type":"INSERT","lineNumber":12,"content":"}"}]},{"timestamp":1756874692487,"changes":[{"type":"INSERT","lineNumber":3,"content":"import androidx.lifecycle.viewModelScope"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Design/TelemetryOverLayUI.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/java/com/example/kotlingcspractice/Design/TelemetryOverLayUI.kt","baseContent":"package com.example.kotlingcspractice.Design\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport your.package.telemetry.TelemetryState\nimport kotlin.math.round\n\n@Composable\nfun TelemetryOverlay(\n    state: TelemetryState,\n    modifier: Modifier = Modifier\n) {\n    Surface(modifier = modifier, color = MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)) {\n        Column(\n            modifier = Modifier.padding(12.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\"Telemetry\", style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)\n                val connText = if (state.connected) \"Connected\" else \"Disconnected\"\n                val connColor = if (state.connected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error\n                Text(connText, color = connColor)\n            }\n\n            TelemetryRow(\"Altitude (MSL)\", state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"—\")\n            TelemetryRow(\"Altitude (Rel)\", state.altitudeRelative?.let { \"${fmt(it)} m\" } ?: \"—\")\n            TelemetryRow(\"Airspeed\", state.airspeed?.let { \"${fmt(it)} m/s\" } ?: \"—\")\n            TelemetryRow(\"Groundspeed\", state.groundspeed?.let { \"${fmt(it)} m/s\" } ?: \"—\")\n            TelemetryRow(\"Voltage\", state.voltage?.let { \"${fmt(it)} V\" } ?: \"—\")\n            TelemetryRow(\"Battery\", state.batteryPct?.let { \"$it%\" } ?: \"—\")\n            TelemetryRow(\"Current\", state.currentA?.let { \"${fmt(it)} A\" } ?: \"—\")\n            TelemetryRow(\"Satellites\", state.sats?.toString() ?: \"—\")\n            TelemetryRow(\"HDOP\", state.hdop?.let { fmt(it) } ?: \"—\")\n        }\n    }\n}\n\n@Composable\nprivate fun TelemetryRow(label: String, value: String) {\n    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {\n        Text(label, style = MaterialTheme.typography.bodyMedium)\n        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)\n    }\n}\n\nprivate fun fmt(v: Float, places: Int = 2): String {\n    val factor = 10f.pow(places)\n    return (kotlin.math.round(v * factor) / factor).toString()\n}\n\nprivate fun Float.pow(p: Int): Float = Math.pow(this.toDouble(), p.toDouble()).toFloat()","baseTimestamp":1756874756402,"deltas":[{"timestamp":1756874767725,"changes":[{"type":"INSERT","lineNumber":9,"content":"import com.example.kotlingcspractice.Telemetry.TelemetryState"}]},{"timestamp":1756874784780,"changes":[{"type":"MODIFY","lineNumber":10,"content":"","oldContent":"import your.package.telemetry.TelemetryState"}]},{"timestamp":1756874794921,"changes":[{"type":"MODIFY","lineNumber":38,"content":"            TelemetryRow(\"Voltage\", state.volatage?.let { \"${fmt(it)} V\" } ?: \"—\")","oldContent":"            TelemetryRow(\"Voltage\", state.voltage?.let { \"${fmt(it)} V\" } ?: \"—\")"}]},{"timestamp":1756874801022,"changes":[{"type":"MODIFY","lineNumber":39,"content":"            TelemetryRow(\"Battery\", state.batteryPercent?.let { \"$it%\" } ?: \"—\")","oldContent":"            TelemetryRow(\"Battery\", state.batteryPct?.let { \"$it%\" } ?: \"—\")"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/AndroidManifest.xml":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/KotlinGCSPractice/app/src/main/AndroidManifest.xml","baseContent":"<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<manifest xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:tools=\"http://schemas.android.com/tools\">\n\n    <application\n        android:allowBackup=\"true\"\n        android:dataExtractionRules=\"@xml/data_extraction_rules\"\n        android:fullBackupContent=\"@xml/backup_rules\"\n        android:icon=\"@mipmap/ic_launcher\"\n        android:label=\"@string/app_name\"\n        android:roundIcon=\"@mipmap/ic_launcher_round\"\n        android:supportsRtl=\"true\"\n        android:theme=\"@style/Theme.KotlinGCSPractice\"\n        tools:targetApi=\"31\">\n        <activity\n            android:name=\".MainActivity\"\n            android:exported=\"true\"\n            android:label=\"@string/app_name\"\n            android:theme=\"@style/Theme.KotlinGCSPractice\">\n            <intent-filter>\n                <action android:name=\"android.intent.action.MAIN\" />\n\n                <category android:name=\"android.intent.category.LAUNCHER\" />\n            </intent-filter>\n        </activity>\n    </application>\n    <uses-permission android:name=\"android.permission.INTERNET\" />\n\n</manifest>","baseTimestamp":1756875375296},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryRepository.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryRepository.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\nimport com.divpundir.mavlink.adapters.coroutines.asCoroutine\nimport com.divpundir.mavlink.adapters.coroutines.tryConnect\nimport com.divpundir.mavlink.adapters.coroutines.trySendUnsignedV2\nimport com.divpundir.mavlink.api.wrap\nimport com.divpundir.mavlink.connection.StreamState\nimport com.divpundir.mavlink.connection.tcp.TcpClientMavConnection\nimport com.divpundir.mavlink.definitions.common.BatteryStatus\nimport com.divpundir.mavlink.definitions.common.CommandLong\nimport com.divpundir.mavlink.definitions.common.CommonDialect\nimport com.divpundir.mavlink.definitions.common.GlobalPositionInt\nimport com.divpundir.mavlink.definitions.common.GpsRawInt\nimport com.divpundir.mavlink.definitions.common.MavCmd\nimport com.divpundir.mavlink.definitions.common.SysStatus\nimport com.divpundir.mavlink.definitions.common.VfrHud\nimport com.divpundir.mavlink.definitions.minimal.Heartbeat\nimport com.divpundir.mavlink.definitions.minimal.MavAutopilot\nimport com.divpundir.mavlink.definitions.minimal.MavModeFlag\nimport com.divpundir.mavlink.definitions.minimal.MavType\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.delay\nimport kotlinx.coroutines.flow.MutableStateFlow\nimport kotlinx.coroutines.flow.SharingStarted\nimport kotlinx.coroutines.flow.StateFlow\nimport kotlinx.coroutines.flow.asStateFlow\nimport kotlinx.coroutines.flow.filter\nimport kotlinx.coroutines.flow.filterIsInstance\nimport kotlinx.coroutines.flow.map\nimport kotlinx.coroutines.flow.shareIn\nimport kotlinx.coroutines.flow.update\nimport kotlinx.coroutines.isActive\nimport kotlinx.coroutines.launch\n\nclass MavlinkTelemetryRepository(\n    private val host : String = \"10.0.2.2\",\n    private val port : Int = 5762,\n    private val gcsSystemId : UByte = 200u,\n    private val gcsComponentId : UByte = 1u\n){\n    private val _state = MutableStateFlow(TelemetryState())\n    val state : StateFlow<TelemetryState> = _state.asStateFlow()\n\n    private var fcuSystemId: UByte = 0u\n    private var fcuComponentId: UByte = 0u\n\n    //Diagnostic info\n    val lastFailure : StateFlow<Throwable> get() = _lastFailure.asStateFlow() as StateFlow<Throwable>\n    private val _lastFailure = MutableStateFlow<Throwable?>(null)\n\n    //connection\n\n    private val connection = TcpClientMavConnection(host,port, CommonDialect).asCoroutine()\n\n    fun start(scope: CoroutineScope){\n\n        //Initial Launch Scope\n        scope.launch {\n            while(isActive && !connection.tryConnect(this)){\n                _state.update { it.copy(connected = false) }\n                delay(1000)\n            }\n        }\n\n        //Keep connected flag in sync\n        scope.launch{\n            connection.streamState.collect {\n                st->\n                when(st){\n                    is StreamState.Active -> _state.update { it.copy(connected = true) }\n                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }\n                }\n            }\n        }\n\n        //Auto reconnect on failure\n\n        scope.launch{\n            val heartbeat = Heartbeat(\n                type = MavType.GCS.wrap(),\n                autopilot = MavAutopilot.INVALID.wrap(),\n                baseMode = emptyList<MavModeFlag>().wrap(),\n                customMode = 0u,\n                mavlinkVersion = 3u\n            )\n            while(isActive){\n                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,heartbeat)\n                delay(1000)\n            }\n        }\n\n        //Message Rates\n        // Collecting the messages from the FCU\n\n        val frames = connection.mavFrame\n            .map { it.message }\n            .shareIn(scope, SharingStarted.Eagerly, replay = 0)\n\n        scope.launch {\n            frames\n                .filterIsInstance<Heartbeat>()\n                .filter { it.type != MavType.GCS }\n                .collect{\n                    if(!state.value.fcuDetected){\n                        fcuSystemId = it.systemId\n                        fcuComponentId = it.componentId\n                        _state.update { it.copy(fcuDetected = true) }\n\n                        launch {\n                            suspend fun setMessageRate(messageId: UInt,hz: Float){\n                                val intervalUsec = if(hz <= 0f) 0f else (1_000_000f / hz)\n                                val cmd = CommandLong(\n                                    targetSystem = fcuSystemId,\n                                    targetComponent = fcuComponentId,\n                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),\n                                    confirmation = 0u,\n                                    param1 = messageId.toFloat(),\n                                    param2 = intervalUsec,\n                                    param3 = 0f,\n                                    param4 = 0f,\n                                    param5 = 0f,\n                                    param6 = 0f,\n                                    param7 = 0f\n                                )\n                                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,cmd)\n                            }\n                            //Set rates here\n                            setMessageRate(1u,1f) // SYS_STATUS\n                            setMessageRate(24u,1f) // GPS_RAW_INT\n                            setMessageRate(33u,5f) // GLOBAL_POSITION_INT\n                            setMessageRate(74u,5f) // VFR_HUD\n                            setMessageRate(147u,1f) // BATTERY_STATUS\n                        }\n                    }\n                }\n        }\n        //VFR_HUD for alt and speed\n        scope.launch {\n            frames\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }\n                .filterIsInstance<VfrHud>()\n                .collect { hud->\n                    _state.update{\n                        it.copy(\n                            altitudeMsl = hud.alt,\n                            airspeed = hud.airspeed.takeIf { v->v>0f },\n                            groundspeed = hud.groundspeed.takeIf { v -> v> 0f }\n                        )\n                    }\n                }\n        }\n\n        // GLOBAL_POSITION_INT for relative alt\n        scope.launch {\n            frames\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }\n                .filterIsInstance<GlobalPositionInt>()\n                .collect{ gp->\n                    val altAMSLm = gp.alt / 1000f\n                    val relAltM = gp.relativeAlt / 1000f\n                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }\n                }\n        }\n\n        // BATTERY_STATUS for battery info\n        scope.launch{\n            frames\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }\n                .filterIsInstance<BatteryStatus>()\n                .collect { b ->\n                    val currentA =\n                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f\n                    _state.update{\n                        it.copy(currentA = currentA)\n                    }\n                }\n        }\n\n        // SYS_STATUS for voltage and battery percent\n        scope.launch{\n            frames\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }\n                .filterIsInstance<SysStatus>()\n                .collect { s ->\n                    val vBatt =\n                        if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f\n                    val pct =\n                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()\n                    _state.update{it.copy(volatage = vBatt , batteryPercent = pct) }\n\n                }\n        }\n\n        // GPS_RAW_INT for HDOP and Sat count\n        scope.launch{\n            frames\n                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }\n                .filterIsInstance<GpsRawInt>()\n                .collect { gps ->\n                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }\n                    val hdop =\n                        if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f\n                    _state.update{it.copy(sats = sats, hdop = hdop) }\n                }\n        }\n    }\n}","baseTimestamp":1756878776458,"deltas":[{"timestamp":1757493561024,"changes":[{"type":"DELETE","lineNumber":214,"oldContent":"                    val armed = (hb.baseMode.toInt() and MavModeFlag.SAFETY_ARMED.value.toInt()) != 0"},{"type":"MODIFY","lineNumber":214,"content":"                    val armed = hb.baseMode.contains(MavModeFlag.SAFETY_ARMED)","oldContent":"                    val armed = (hb.baseMode.and(MavModeFlag.SAFETY_ARMED.value)).compareTo(BigInteger.ZERO) != 0"},{"type":"INSERT","lineNumber":215,"content":"                    // ArduPilot custom modes"},{"type":"MODIFY","lineNumber":245,"content":"                }","oldContent":"                }"},{"type":"DELETE","lineNumber":257,"oldContent":"                    val SENSOR_3D_GYRO = BigInteger.ONE // Usually bit 0, adjust if needed"},{"type":"DELETE","lineNumber":258,"oldContent":"                    val present = s.onboardControlSensorsPresent.and(SENSOR_3D_GYRO).compareTo(BigInteger.ZERO) != 0"},{"type":"DELETE","lineNumber":259,"oldContent":"                    val enabled = s.onboardControlSensorsEnabled.and(SENSOR_3D_GYRO).compareTo(BigInteger.ZERO) != 0"},{"type":"DELETE","lineNumber":260,"oldContent":"                    val healthy = s.onboardControlSensorsHealth.and(SENSOR_3D_GYRO).compareTo(BigInteger.ZERO) != 0"},{"type":"INSERT","lineNumber":257,"content":"                    val SENSOR_3D_GYRO = 1"},{"type":"INSERT","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":259,"content":"                    val enabled = (s.onboardControlSensorsEnabled and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":260,"content":"                    val healthy = (s.onboardControlSensorsHealth and SENSOR_3D_GYRO) != 0"},{"type":"MODIFY","lineNumber":284,"content":"            command = command.wrap(),","oldContent":"            command = command.wrap(),"}]},{"timestamp":1757493595465,"changes":[{"type":"MODIFY","lineNumber":215,"content":"                    // ArduPilot custom modes","oldContent":"                    val armed = (hb.baseMode.and(MavModeFlag.SAFETY_ARMED.value)).compareTo(BigInteger.ZERO) != 0"},{"type":"INSERT","lineNumber":244,"content":"                    _state.update { it.copy(armed = armed, mode = mode) }"},{"type":"DELETE","lineNumber":245,"oldContent":"                }"},{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent  SENSOR_3D_GYRO) != 0","oldContent":"                    val present = (s.onboardControlSensorsPresent and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":283,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":284,"oldContent":"            command = command.wrap(),"}]},{"timestamp":1757493603744,"changes":[{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent and SENSOR_3D_GYRO) != 0","oldContent":"                    val present = (s.onboardControlSensorsPresent  SENSOR_3D_GYRO) != 0"}]},{"timestamp":1757493610123,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.util.Log"},{"type":"DELETE","lineNumber":8,"oldContent":"import com.divpundir.mavlink.definitions.common.BatteryStatus"},{"type":"DELETE","lineNumber":9,"oldContent":"import com.divpundir.mavlink.definitions.common.CommandLong"},{"type":"MODIFY","lineNumber":9,"content":"import com.divpundir.mavlink.definitions.common.*","oldContent":"import com.divpundir.mavlink.definitions.common.CommonDialect"},{"type":"INSERT","lineNumber":10,"content":"import com.divpundir.mavlink.definitions.minimal.*"},{"type":"MODIFY","lineNumber":14,"content":"import kotlinx.coroutines.flow.*","oldContent":"import com.divpundir.mavlink.definitions.common.GpsRawInt"},{"type":"MODIFY","lineNumber":24,"content":"    val state: StateFlow<TelemetryState> = _state.asStateFlow()","oldContent":"import com.divpundir.mavlink.definitions.minimal.MavType"},{"type":"DELETE","lineNumber":36,"oldContent":"import kotlinx.coroutines.flow.map"},{"type":"DELETE","lineNumber":37,"oldContent":"import kotlinx.coroutines.flow.shareIn"},{"type":"INSERT","lineNumber":36,"content":"    fun start() {"},{"type":"INSERT","lineNumber":37,"content":"        val scope = AppScope"},{"type":"MODIFY","lineNumber":74,"content":"","oldContent":"        scope.launch{"},{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent  SENSOR_3D_GYRO) != 0","oldContent":"                    val present = (s.onboardControlSensorsPresent and SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":325,"oldContent":""},{"type":"MODIFY","lineNumber":326,"content":"","oldContent":""}]},{"timestamp":1757493617272,"changes":[{"type":"MODIFY","lineNumber":10,"content":"import com.divpundir.mavlink.definitions.minimal.*","oldContent":"import com.divpundir.mavlink.definitions.common.CommonDialect"},{"type":"MODIFY","lineNumber":13,"content":"import kotlinx.coroutines.delay","oldContent":"import com.divpundir.mavlink.definitions.common.GpsRawInt"},{"type":"DELETE","lineNumber":15,"oldContent":"import com.divpundir.mavlink.definitions.common.VfrHud"},{"type":"MODIFY","lineNumber":15,"content":"import kotlinx.coroutines.isActive","oldContent":"import com.divpundir.mavlink.definitions.minimal.MavAutopilot"},{"type":"INSERT","lineNumber":16,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":38,"oldContent":"    private val gcsSystemId : UByte = 200u,"},{"type":"DELETE","lineNumber":39,"oldContent":"){"},{"type":"INSERT","lineNumber":38,"content":""},{"type":"INSERT","lineNumber":39,"content":"        suspend fun reconnect(scope: kotlinx.coroutines.CoroutineScope) {"},{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent !=0 and  SENSOR_3D_GYRO) != 0","oldContent":"                    val present = (s.onboardControlSensorsPresent  SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":325,"content":"}"}]},{"timestamp":1757493622779,"changes":[{"type":"MODIFY","lineNumber":16,"content":"import kotlinx.coroutines.launch","oldContent":"import com.divpundir.mavlink.definitions.common.VfrHud"},{"type":"DELETE","lineNumber":22,"oldContent":"import kotlinx.coroutines.CoroutineScope"},{"type":"DELETE","lineNumber":23,"oldContent":"import kotlinx.coroutines.flow.SharingStarted"},{"type":"INSERT","lineNumber":22,"content":"    private val gcsComponentId: UByte = 1u"},{"type":"INSERT","lineNumber":23,"content":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"DELETE","lineNumber":25,"oldContent":"import kotlinx.coroutines.flow.filter"},{"type":"DELETE","lineNumber":26,"oldContent":"import kotlinx.coroutines.flow.map"},{"type":"DELETE","lineNumber":27,"oldContent":"import kotlinx.coroutines.flow.shareIn"},{"type":"DELETE","lineNumber":28,"oldContent":"import kotlinx.coroutines.flow.update"},{"type":"DELETE","lineNumber":29,"oldContent":"    // Diagnostic info"},{"type":"INSERT","lineNumber":26,"content":"    private var fcuSystemId: UByte = 0u"},{"type":"INSERT","lineNumber":27,"content":"    private var fcuComponentId: UByte = 0u"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"    // Diagnostic info"},{"type":"INSERT","lineNumber":30,"content":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"MODIFY","lineNumber":46,"content":"                    Log.e(\"MavlinkRepo\", \"Connection attempt failed\", e)","oldContent":""},{"type":"MODIFY","lineNumber":119,"content":"                        // Set message intervals","oldContent":"                                    param3 = 0f,"},{"type":"DELETE","lineNumber":121,"oldContent":"                                    param4 = 0f,"},{"type":"DELETE","lineNumber":122,"oldContent":"                                    param6 = 0f,"},{"type":"INSERT","lineNumber":121,"content":"                            suspend fun setMessageRate(messageId: UInt, hz: Float) {"},{"type":"INSERT","lineNumber":122,"content":"                                val intervalUsec = if (hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"MODIFY","lineNumber":162,"content":"                .collect { hud ->","oldContent":"                    _state.update{ it.copy(altitudeMsl = altAMSLm , altitudeRelative = relAltM) }"},{"type":"DELETE","lineNumber":165,"oldContent":""},{"type":"DELETE","lineNumber":166,"oldContent":"        // BATTERY_STATUS for battery info"},{"type":"DELETE","lineNumber":167,"oldContent":"            frames"},{"type":"INSERT","lineNumber":165,"content":"                            altitudeMsl = hud.alt,"},{"type":"INSERT","lineNumber":166,"content":"                            airspeed = hud.airspeed.takeIf { v -> v > 0f },"},{"type":"INSERT","lineNumber":167,"content":"                            groundspeed = hud.groundspeed.takeIf { v -> v > 0f }"},{"type":"DELETE","lineNumber":186,"oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"DELETE","lineNumber":187,"oldContent":"                .collect { s ->"},{"type":"DELETE","lineNumber":188,"oldContent":"                        if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":189,"oldContent":"                        if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":186,"content":"                            altitudeMsl = altAMSLm,"},{"type":"INSERT","lineNumber":187,"content":"                            altitudeRelative = relAltM,"},{"type":"INSERT","lineNumber":188,"content":"                            latitude = lat,"},{"type":"INSERT","lineNumber":189,"content":"                            longitude = lon"},{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent !=0 and  SENSOR_3D_GYRO !=0) != 0","oldContent":"                    val present = (s.onboardControlSensorsPresent !=0 and  SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":316,"oldContent":"}"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":326,"content":""}]},{"timestamp":1757493626134,"changes":[{"type":"DELETE","lineNumber":18,"oldContent":"import com.divpundir.mavlink.definitions.minimal.Heartbeat"},{"type":"DELETE","lineNumber":19,"oldContent":"import com.divpundir.mavlink.definitions.minimal.MavAutopilot"},{"type":"DELETE","lineNumber":20,"oldContent":"import com.divpundir.mavlink.definitions.minimal.MavType"},{"type":"DELETE","lineNumber":21,"oldContent":"import kotlinx.coroutines.CoroutineScope"},{"type":"INSERT","lineNumber":18,"content":"object MavlinkTelemetryRepository {"},{"type":"INSERT","lineNumber":19,"content":"    private const val host: String = \"10.0.2.2\""},{"type":"INSERT","lineNumber":20,"content":"    private const val port: Int = 5762"},{"type":"INSERT","lineNumber":21,"content":"    private val gcsSystemId: UByte = 200u"},{"type":"INSERT","lineNumber":25,"content":""},{"type":"DELETE","lineNumber":30,"oldContent":"import kotlinx.coroutines.isActive"},{"type":"MODIFY","lineNumber":32,"content":"","oldContent":"import kotlinx.coroutines.launch"},{"type":"MODIFY","lineNumber":45,"content":"                } catch (e: Exception) {","oldContent":"    private var fcuSystemId: UByte = 0u"},{"type":"DELETE","lineNumber":55,"oldContent":"    private val connection = TcpClientMavConnection(host,port, CommonDialect).asCoroutine()"},{"type":"DELETE","lineNumber":56,"oldContent":""},{"type":"DELETE","lineNumber":57,"oldContent":""},{"type":"INSERT","lineNumber":55,"content":"            reconnect(this) // Initial connection attempt"},{"type":"INSERT","lineNumber":56,"content":"            connection.streamState.collect { st ->"},{"type":"INSERT","lineNumber":57,"content":"                when (st) {"},{"type":"MODIFY","lineNumber":60,"content":"                            Log.i(\"MavlinkRepo\", \"Connection Active\")","oldContent":"            while(isActive && !connection.tryConnect(this)){"},{"type":"MODIFY","lineNumber":66,"content":"                            Log.i(\"MavlinkRepo\", \"Connection Inactive, reconnecting...\")","oldContent":"        //Keep connected flag in sync"},{"type":"MODIFY","lineNumber":84,"content":"            while (isActive) {","oldContent":"                customMode = 0u,"},{"type":"MODIFY","lineNumber":89,"content":"                        Log.e(\"MavlinkRepo\", \"Failed to send heartbeat\", e)","oldContent":"                delay(1000)"},{"type":"MODIFY","lineNumber":120,"content":"                        launch {","oldContent":"                                    param4 = 0f,"},{"type":"DELETE","lineNumber":147,"oldContent":"                            altitudeMsl = hud.alt,"},{"type":"DELETE","lineNumber":148,"oldContent":"                            airspeed = hud.airspeed.takeIf { v->v>0f },"},{"type":"INSERT","lineNumber":147,"content":"                            setMessageRate(74u, 5f)  // VFR_HUD"},{"type":"INSERT","lineNumber":148,"content":"                            setMessageRate(147u, 1f) // BATTERY_STATUS"},{"type":"INSERT","lineNumber":154,"content":"        // Collectors"},{"type":"DELETE","lineNumber":155,"oldContent":"        // GLOBAL_POSITION_INT for relative alt"},{"type":"MODIFY","lineNumber":156,"content":"        // VFR_HUD","oldContent":"            frames"},{"type":"DELETE","lineNumber":179,"oldContent":"        // SYS_STATUS for voltage and battery percent"},{"type":"DELETE","lineNumber":180,"oldContent":"            frames"},{"type":"DELETE","lineNumber":181,"oldContent":"                .filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":179,"content":"                .collect { gp ->"},{"type":"INSERT","lineNumber":180,"content":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":181,"content":"                    val relAltM = gp.relativeAlt / 1000f"},{"type":"MODIFY","lineNumber":208,"content":"        scope.launch {","oldContent":"}"},{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent !=0 and  SENSOR_3D_GYRO !=0) ","oldContent":"                    val present = (s.onboardControlSensorsPresent !=0 and  SENSOR_3D_GYRO !=0) != 0"},{"type":"MODIFY","lineNumber":314,"content":"    suspend fun changeMode(mode: MavMode) {","oldContent":"}"},{"type":"INSERT","lineNumber":315,"content":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"DELETE","lineNumber":317,"oldContent":"    suspend fun land() {"},{"type":"MODIFY","lineNumber":321,"content":"","oldContent":"}"}]},{"timestamp":1757493637580,"changes":[{"type":"MODIFY","lineNumber":17,"content":"","oldContent":"import com.divpundir.mavlink.definitions.minimal.Heartbeat"},{"type":"MODIFY","lineNumber":34,"content":"    private val connection = TcpClientMavConnection(host, port, CommonDialect).asCoroutine()","oldContent":"import kotlinx.coroutines.launch"},{"type":"MODIFY","lineNumber":52,"content":"","oldContent":"    //connection"},{"type":"DELETE","lineNumber":75,"oldContent":"        }"},{"type":"DELETE","lineNumber":76,"oldContent":""},{"type":"INSERT","lineNumber":75,"content":"        // Send GCS heartbeat"},{"type":"INSERT","lineNumber":76,"content":"        scope.launch {"},{"type":"MODIFY","lineNumber":97,"content":"        // Shared message stream","oldContent":"            .map { it.message }"},{"type":"MODIFY","lineNumber":101,"content":"        // Log raw messages","oldContent":"            frames"},{"type":"MODIFY","lineNumber":104,"content":"                Log.d(\"MavlinkRepo\", \"Frame: ${it.message.javaClass.simpleName} (sysId=${it.systemId}, compId=${it.componentId})\")","oldContent":"                .collect{"},{"type":"MODIFY","lineNumber":108,"content":"        // Detect FCU","oldContent":"                        _state.update { it.copy(fcuDetected = true) }"},{"type":"MODIFY","lineNumber":115,"content":"                        fcuComponentId = it.componentId","oldContent":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"MODIFY","lineNumber":142,"content":"                            }","oldContent":"                .collect { hud->"},{"type":"INSERT","lineNumber":149,"content":"                        }"},{"type":"INSERT","lineNumber":150,"content":"                    }"},{"type":"DELETE","lineNumber":152,"oldContent":"        }"},{"type":"DELETE","lineNumber":153,"oldContent":""},{"type":"MODIFY","lineNumber":155,"content":"","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":157,"content":"        scope.launch {","oldContent":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"MODIFY","lineNumber":170,"content":"                }","oldContent":"                .filterIsInstance<BatteryStatus>()"},{"type":"DELETE","lineNumber":172,"oldContent":"                    val currentA ="},{"type":"DELETE","lineNumber":173,"oldContent":"                        if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"INSERT","lineNumber":172,"content":""},{"type":"INSERT","lineNumber":173,"content":"        // GLOBAL_POSITION_INT"},{"type":"DELETE","lineNumber":177,"oldContent":"                }"},{"type":"DELETE","lineNumber":178,"oldContent":"        }"},{"type":"INSERT","lineNumber":177,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":178,"content":"                .filterIsInstance<GlobalPositionInt>()"},{"type":"DELETE","lineNumber":195,"oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"DELETE","lineNumber":196,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":197,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }"},{"type":"INSERT","lineNumber":195,"content":"        // BATTERY_STATUS"},{"type":"INSERT","lineNumber":196,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":197,"content":"            mavFrameStream"},{"type":"MODIFY","lineNumber":199,"content":"                .map { it.message }","oldContent":"                .collect { gps ->"},{"type":"MODIFY","lineNumber":207,"content":"        // HEARTBEAT","oldContent":"}"},{"type":"MODIFY","lineNumber":209,"content":"            mavFrameStream","oldContent":"}"},{"type":"DELETE","lineNumber":216,"oldContent":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"DELETE","lineNumber":217,"oldContent":""},{"type":"DELETE","lineNumber":218,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"DELETE","lineNumber":219,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":220,"oldContent":"    }"},{"type":"DELETE","lineNumber":221,"oldContent":"        }"},{"type":"DELETE","lineNumber":222,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":223,"oldContent":"        if (state.value.armable) {"},{"type":"DELETE","lineNumber":224,"oldContent":""},{"type":"DELETE","lineNumber":225,"oldContent":"        }"},{"type":"DELETE","lineNumber":226,"oldContent":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"DELETE","lineNumber":227,"oldContent":"        } catch (e: Exception) {"},{"type":"DELETE","lineNumber":228,"oldContent":"        try {"},{"type":"DELETE","lineNumber":229,"oldContent":"        )"},{"type":"DELETE","lineNumber":230,"oldContent":"            param6 = param6,"},{"type":"DELETE","lineNumber":231,"oldContent":"            param5 = param5,"},{"type":"DELETE","lineNumber":232,"oldContent":"            param4 = param4,"},{"type":"DELETE","lineNumber":233,"oldContent":"            param3 = param3,"},{"type":"DELETE","lineNumber":234,"oldContent":"            param1 = param1,"},{"type":"DELETE","lineNumber":235,"oldContent":"            command = command.wrap(),"},{"type":"DELETE","lineNumber":236,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":237,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":238,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":239,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":240,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":241,"oldContent":""},{"type":"INSERT","lineNumber":216,"content":"                    val mode = when (hb.customMode) {"},{"type":"INSERT","lineNumber":217,"content":"                        0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":218,"content":"                        1u -> \"Acro\""},{"type":"INSERT","lineNumber":219,"content":"                        2u -> \"Alt Hold\""},{"type":"INSERT","lineNumber":220,"content":"                        3u -> \"Auto\""},{"type":"INSERT","lineNumber":221,"content":"                        4u -> \"Guided\""},{"type":"INSERT","lineNumber":222,"content":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":223,"content":"                        6u -> \"RTL\""},{"type":"INSERT","lineNumber":224,"content":"                        7u -> \"Circle\""},{"type":"INSERT","lineNumber":225,"content":"                        9u -> \"Land\""},{"type":"INSERT","lineNumber":226,"content":"                        11u -> \"Drift\""},{"type":"INSERT","lineNumber":227,"content":"                        13u -> \"Sport\""},{"type":"INSERT","lineNumber":228,"content":"                        14u -> \"Flip\""},{"type":"INSERT","lineNumber":229,"content":"                        15u -> \"AutoTune\""},{"type":"INSERT","lineNumber":230,"content":"                        16u -> \"Pos Hold\""},{"type":"INSERT","lineNumber":231,"content":"                        17u -> \"Brake\""},{"type":"INSERT","lineNumber":232,"content":"                        18u -> \"Throw\""},{"type":"INSERT","lineNumber":233,"content":"                        19u -> \"Avoid_ADSB\""},{"type":"INSERT","lineNumber":234,"content":"                        20u -> \"Guided_NoGPS\""},{"type":"INSERT","lineNumber":235,"content":"                        21u -> \"Smart_RTL\""},{"type":"INSERT","lineNumber":236,"content":"                        22u -> \"FlowHold\""},{"type":"INSERT","lineNumber":237,"content":"                        23u -> \"Follow\""},{"type":"INSERT","lineNumber":238,"content":"                        24u -> \"ZigZag\""},{"type":"INSERT","lineNumber":239,"content":"                        25u -> \"SystemID\""},{"type":"INSERT","lineNumber":240,"content":"                        26u -> \"AutoRotate\""},{"type":"INSERT","lineNumber":241,"content":"                        27u -> \"Auto_RTL\""},{"type":"DELETE","lineNumber":249,"oldContent":"                    _state.update { state -> state.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":250,"oldContent":"                .collect { gps ->"},{"type":"INSERT","lineNumber":249,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":250,"content":"            mavFrameStream"},{"type":"MODIFY","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent and SENSOR_3D_GYRO) != 0","oldContent":"                    val present = (s.onboardControlSensorsPresent !=0 and  SENSOR_3D_GYRO !=0) "},{"type":"DELETE","lineNumber":266,"oldContent":"            param5 = param5,"},{"type":"DELETE","lineNumber":267,"oldContent":"            param4 = param4,"},{"type":"DELETE","lineNumber":268,"oldContent":"            param2 = param2,"},{"type":"DELETE","lineNumber":269,"oldContent":"            confirmation = 0u,"},{"type":"DELETE","lineNumber":270,"oldContent":"            command = command.wrap(),"},{"type":"INSERT","lineNumber":266,"content":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":267,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":268,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":269,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":270,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":280,"oldContent":""},{"type":"DELETE","lineNumber":281,"oldContent":""},{"type":"INSERT","lineNumber":280,"content":"    private suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":281,"content":"        val commandLong = CommandLong("},{"type":"DELETE","lineNumber":285,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":286,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":287,"oldContent":"                }"},{"type":"DELETE","lineNumber":288,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":289,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":290,"oldContent":"}"},{"type":"DELETE","lineNumber":291,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":292,"oldContent":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"DELETE","lineNumber":293,"oldContent":"}"},{"type":"DELETE","lineNumber":294,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":295,"oldContent":"}"},{"type":"DELETE","lineNumber":296,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":297,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":298,"oldContent":"}"},{"type":"DELETE","lineNumber":299,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":300,"oldContent":"}"},{"type":"DELETE","lineNumber":301,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":285,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":286,"content":"            param1 = param1,"},{"type":"INSERT","lineNumber":287,"content":"            param2 = param2,"},{"type":"INSERT","lineNumber":288,"content":"            param3 = param3,"},{"type":"INSERT","lineNumber":289,"content":"            param4 = param4,"},{"type":"INSERT","lineNumber":290,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":291,"content":"            param6 = param6,"},{"type":"INSERT","lineNumber":292,"content":"            param7 = param7"},{"type":"INSERT","lineNumber":293,"content":"        )"},{"type":"INSERT","lineNumber":294,"content":"        try {"},{"type":"INSERT","lineNumber":295,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":296,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":297,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"INSERT","lineNumber":298,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":299,"content":"        }"},{"type":"INSERT","lineNumber":300,"content":"    }"},{"type":"DELETE","lineNumber":303,"oldContent":"}"},{"type":"INSERT","lineNumber":302,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":303,"content":"        if (state.value.armable) {"},{"type":"INSERT","lineNumber":304,"content":"            sendCommand(MavCmd.COMPONENT_ARM_DISARM, 1f)"},{"type":"INSERT","lineNumber":305,"content":"        } else {"},{"type":"INSERT","lineNumber":306,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":307,"content":"        }"},{"type":"INSERT","lineNumber":308,"content":"    }"},{"type":"INSERT","lineNumber":310,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":311,"content":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"INSERT","lineNumber":312,"content":"    }"},{"type":"INSERT","lineNumber":314,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":319,"content":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":320,"content":"    }"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":323,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":325,"content":"}"},{"type":"INSERT","lineNumber":326,"content":""}]},{"timestamp":1757493644913,"changes":[{"type":"MODIFY","lineNumber":33,"content":"    // Connection","oldContent":"import kotlinx.coroutines.launch"},{"type":"MODIFY","lineNumber":35,"content":"","oldContent":"class MavlinkTelemetryRepository("},{"type":"MODIFY","lineNumber":44,"content":"                    }","oldContent":"    private var fcuSystemId: UByte = 0u"},{"type":"MODIFY","lineNumber":59,"content":"                        if (!state.value.connected) {","oldContent":"            while(isActive && !connection.tryConnect(this)){"},{"type":"MODIFY","lineNumber":65,"content":"                        if (state.value.connected) {","oldContent":"        //Keep connected flag in sync"},{"type":"MODIFY","lineNumber":83,"content":"            )","oldContent":"                customMode = 0u,"},{"type":"MODIFY","lineNumber":88,"content":"                    } catch (e: Exception) {","oldContent":"                delay(1000)"},{"type":"DELETE","lineNumber":112,"oldContent":"                                val intervalUsec = if(hz <= 0f) 0f else (1_000_000f / hz)"},{"type":"DELETE","lineNumber":113,"oldContent":"                                val cmd = CommandLong("},{"type":"INSERT","lineNumber":112,"content":"                .collect {"},{"type":"INSERT","lineNumber":113,"content":"                    if (!state.value.fcuDetected) {"},{"type":"DELETE","lineNumber":134,"oldContent":"                        }"},{"type":"DELETE","lineNumber":135,"oldContent":"                    }"},{"type":"INSERT","lineNumber":134,"content":"                                    param7 = 0f"},{"type":"INSERT","lineNumber":135,"content":"                                )"},{"type":"DELETE","lineNumber":145,"oldContent":"                        it.copy("},{"type":"DELETE","lineNumber":146,"oldContent":"                            altitudeMsl = hud.alt,"},{"type":"INSERT","lineNumber":145,"content":"                            setMessageRate(24u, 1f)  // GPS_RAW_INT"},{"type":"INSERT","lineNumber":146,"content":"                            setMessageRate(33u, 5f)  // GLOBAL_POSITION_INT"},{"type":"DELETE","lineNumber":151,"oldContent":"                    }"},{"type":"INSERT","lineNumber":153,"content":""},{"type":"MODIFY","lineNumber":171,"content":"        }","oldContent":"                    val currentA ="},{"type":"MODIFY","lineNumber":176,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }","oldContent":"                }"},{"type":"MODIFY","lineNumber":194,"content":"","oldContent":"        // GPS_RAW_INT for HDOP and Sat count"},{"type":"MODIFY","lineNumber":214,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0","oldContent":"                    val armed = hb.baseMode.contains(MavModeFlag.SAFETY_ARMED)"},{"type":"DELETE","lineNumber":246,"oldContent":"            command = command.wrap(),"},{"type":"DELETE","lineNumber":247,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":246,"content":"        }"},{"type":"INSERT","lineNumber":248,"content":"        // SYS_STATUS"},{"type":"MODIFY","lineNumber":255,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f","oldContent":""},{"type":"DELETE","lineNumber":258,"oldContent":"                    val present = (s.onboardControlSensorsPresent and SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":259,"oldContent":"                    val enabled = (s.onboardControlSensorsEnabled and SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":260,"oldContent":"                    val healthy = (s.onboardControlSensorsHealth and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":259,"content":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":260,"content":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":278,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":279,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"INSERT","lineNumber":278,"content":"    }"},{"type":"INSERT","lineNumber":279,"content":""},{"type":"MODIFY","lineNumber":284,"content":"            command = command.wrap(),","oldContent":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":301,"content":""},{"type":"DELETE","lineNumber":302,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":305,"oldContent":""},{"type":"DELETE","lineNumber":307,"oldContent":"    }"},{"type":"DELETE","lineNumber":309,"oldContent":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"DELETE","lineNumber":311,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"DELETE","lineNumber":314,"oldContent":"    }"},{"type":"DELETE","lineNumber":316,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":313,"content":""},{"type":"INSERT","lineNumber":314,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":315,"content":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":318,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":319,"content":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":320,"content":"    }"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":323,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":325,"content":"}"},{"type":"INSERT","lineNumber":326,"content":""}]},{"timestamp":1757493684578,"changes":[{"type":"MODIFY","lineNumber":51,"content":"        }","oldContent":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"MODIFY","lineNumber":54,"content":"        scope.launch {","oldContent":""},{"type":"MODIFY","lineNumber":103,"content":"            mavFrameStream.collect {","oldContent":"                .filterIsInstance<Heartbeat>()"},{"type":"MODIFY","lineNumber":107,"content":"","oldContent":"                        fcuSystemId = it.systemId"},{"type":"MODIFY","lineNumber":111,"content":"                .filter { it.message is Heartbeat && (it.message as Heartbeat).type != MavType.GCS.wrap() }","oldContent":"                        launch {"},{"type":"MODIFY","lineNumber":133,"content":"                                    param6 = 0f,","oldContent":"                            setMessageRate(74u,5f) // VFR_HUD"},{"type":"MODIFY","lineNumber":144,"content":"                            setMessageRate(1u, 1f)   // SYS_STATUS","oldContent":"                .collect { hud->"},{"type":"DELETE","lineNumber":150,"oldContent":"                        )"},{"type":"MODIFY","lineNumber":152,"content":"        }","oldContent":""},{"type":"INSERT","lineNumber":153,"content":""},{"type":"MODIFY","lineNumber":161,"content":"                .filterIsInstance<VfrHud>()","oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"MODIFY","lineNumber":169,"content":"                    }","oldContent":"            frames"},{"type":"MODIFY","lineNumber":183,"content":"                    val lon = gp.lon.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }","oldContent":"            frames"},{"type":"MODIFY","lineNumber":191,"content":"                    }","oldContent":"                    _state.update{it.copy(volatage = vBatt , batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":214,"content":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0u","oldContent":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0"},{"type":"INSERT","lineNumber":247,"content":""},{"type":"DELETE","lineNumber":248,"oldContent":"            targetSystem = fcuSystemId,"},{"type":"DELETE","lineNumber":257,"oldContent":"                    val SENSOR_3D_GYRO = 1"},{"type":"DELETE","lineNumber":258,"oldContent":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":259,"oldContent":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0"},{"type":"DELETE","lineNumber":260,"oldContent":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0"},{"type":"INSERT","lineNumber":257,"content":"                    val SENSOR_3D_GYRO = 1u"},{"type":"INSERT","lineNumber":258,"content":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":259,"content":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"INSERT","lineNumber":260,"content":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":271,"oldContent":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"DELETE","lineNumber":272,"oldContent":"                }"},{"type":"DELETE","lineNumber":273,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":271,"content":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":272,"content":"                .collect { gps ->"},{"type":"INSERT","lineNumber":273,"content":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"MODIFY","lineNumber":282,"content":"            targetSystem = fcuSystemId,","oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"MODIFY","lineNumber":308,"content":"    }","oldContent":"}"},{"type":"INSERT","lineNumber":310,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":311,"content":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"INSERT","lineNumber":313,"content":""},{"type":"DELETE","lineNumber":313,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":316,"oldContent":"    }"},{"type":"INSERT","lineNumber":320,"content":"    }"},{"type":"INSERT","lineNumber":321,"content":""},{"type":"INSERT","lineNumber":322,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":323,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":325,"content":"}"},{"type":"INSERT","lineNumber":326,"content":""}]},{"timestamp":1757494420519,"changes":[{"type":"DELETE","lineNumber":40,"oldContent":"    private val gcsComponentId : UByte = 1u"},{"type":"DELETE","lineNumber":41,"oldContent":"){"},{"type":"DELETE","lineNumber":42,"oldContent":"    private val _state = MutableStateFlow(TelemetryState())"},{"type":"DELETE","lineNumber":43,"oldContent":"    val state : StateFlow<TelemetryState> = _state.asStateFlow()"},{"type":"INSERT","lineNumber":40,"content":"            while (scope.isActive) {"},{"type":"INSERT","lineNumber":41,"content":"                try {"},{"type":"INSERT","lineNumber":42,"content":"                    if (connection.tryConnect(scope)) {"},{"type":"INSERT","lineNumber":43,"content":"                        return // Exit on successful connection"},{"type":"MODIFY","lineNumber":47,"content":"                    _lastFailure.value = e","oldContent":""},{"type":"MODIFY","lineNumber":58,"content":"                    is StreamState.Active -> {","oldContent":"        //Initial Launch Scope"},{"type":"MODIFY","lineNumber":61,"content":"                            _state.update { it.copy(connected = true) }","oldContent":"                _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":102,"content":"        scope.launch {","oldContent":"                .filterIsInstance<Heartbeat>()"},{"type":"INSERT","lineNumber":123,"content":"                                val cmd = CommandLong("},{"type":"INSERT","lineNumber":124,"content":"                                    targetSystem = fcuSystemId,"},{"type":"INSERT","lineNumber":125,"content":"                                    targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":126,"content":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"INSERT","lineNumber":127,"content":"                                    confirmation = 0u,"},{"type":"INSERT","lineNumber":128,"content":"                                    param1 = messageId.toFloat(),"},{"type":"INSERT","lineNumber":129,"content":"                                    param2 = intervalUsec,"},{"type":"INSERT","lineNumber":130,"content":"                                    param3 = 0f,"},{"type":"INSERT","lineNumber":131,"content":"                                    param4 = 0f,"},{"type":"INSERT","lineNumber":132,"content":"                                    param5 = 0f,"},{"type":"DELETE","lineNumber":126,"oldContent":"                                connection.trySendUnsignedV2(gcsSystemId,gcsComponentId,cmd)"},{"type":"DELETE","lineNumber":127,"oldContent":"                            }"},{"type":"DELETE","lineNumber":128,"oldContent":"                            //Set rates here"},{"type":"DELETE","lineNumber":129,"oldContent":"                            setMessageRate(1u,1f) // SYS_STATUS"},{"type":"DELETE","lineNumber":130,"oldContent":"                            setMessageRate(24u,1f) // GPS_RAW_INT"},{"type":"DELETE","lineNumber":131,"oldContent":"                            setMessageRate(33u,5f) // GLOBAL_POSITION_INT"},{"type":"DELETE","lineNumber":132,"oldContent":"                            setMessageRate(74u,5f) // VFR_HUD"},{"type":"DELETE","lineNumber":133,"oldContent":"                                    param6 = 0f,"},{"type":"DELETE","lineNumber":134,"oldContent":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":135,"oldContent":"                                )"},{"type":"INSERT","lineNumber":151,"content":"                }"},{"type":"DELETE","lineNumber":153,"oldContent":"                }"},{"type":"MODIFY","lineNumber":168,"content":"                        )","oldContent":"            frames"},{"type":"MODIFY","lineNumber":174,"content":"        scope.launch {","oldContent":"                    _state.update{"},{"type":"MODIFY","lineNumber":182,"content":"                    val lat = gp.lat.takeIf { it != Int.MIN_VALUE }?.let { it / 10_000_000.0 }","oldContent":"            frames"},{"type":"DELETE","lineNumber":200,"oldContent":"                .collect { gps ->"},{"type":"DELETE","lineNumber":201,"oldContent":"                    val sats = gps.satellitesVisible.toInt().takeIf { it >= 0 }"},{"type":"DELETE","lineNumber":202,"oldContent":"                    val hdop ="},{"type":"INSERT","lineNumber":200,"content":"                .filterIsInstance<BatteryStatus>()"},{"type":"INSERT","lineNumber":201,"content":"                .collect { b ->"},{"type":"INSERT","lineNumber":202,"content":"                    val currentA = if (b.currentBattery.toInt() == -1) null else b.currentBattery / 100f"},{"type":"DELETE","lineNumber":205,"oldContent":"                }"},{"type":"INSERT","lineNumber":206,"content":""},{"type":"INSERT","lineNumber":210,"content":"<<<<<<< HEAD"},{"type":"INSERT","lineNumber":216,"content":"======="},{"type":"INSERT","lineNumber":217,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":218,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":219,"content":"                .filterIsInstance<Heartbeat>()"},{"type":"INSERT","lineNumber":220,"content":"                .collect { hb ->"},{"type":"INSERT","lineNumber":221,"content":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED.wrap() }"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"INSERT","lineNumber":223,"content":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"DELETE","lineNumber":242,"oldContent":"                    _state.update { telemetryState -> telemetryState.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"INSERT","lineNumber":251,"content":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":251,"oldContent":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":252,"oldContent":"                .map { frame -> frame.message }"},{"type":"INSERT","lineNumber":260,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":261,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":266,"content":"<<<<<<< HEAD"},{"type":"INSERT","lineNumber":272,"content":"======="},{"type":"INSERT","lineNumber":273,"content":""},{"type":"INSERT","lineNumber":274,"content":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"INSERT","lineNumber":275,"content":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"INSERT","lineNumber":276,"content":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"INSERT","lineNumber":277,"content":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"DELETE","lineNumber":274,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":275,"oldContent":"}"},{"type":"DELETE","lineNumber":276,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":277,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":290,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":291,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":292,"content":"                }"},{"type":"INSERT","lineNumber":293,"content":"        }"},{"type":"DELETE","lineNumber":283,"oldContent":""},{"type":"INSERT","lineNumber":299,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":305,"oldContent":"}"},{"type":"DELETE","lineNumber":306,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":307,"oldContent":""},{"type":"INSERT","lineNumber":321,"content":"        } else {"},{"type":"INSERT","lineNumber":322,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":323,"content":"        }"},{"type":"DELETE","lineNumber":311,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":328,"content":"    }"},{"type":"INSERT","lineNumber":329,"content":""},{"type":"INSERT","lineNumber":332,"content":"    }"},{"type":"INSERT","lineNumber":334,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":335,"content":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":336,"content":"    }"},{"type":"DELETE","lineNumber":317,"oldContent":"}"},{"type":"DELETE","lineNumber":318,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":320,"oldContent":""},{"type":"INSERT","lineNumber":339,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":341,"content":"}"},{"type":"INSERT","lineNumber":342,"content":""}]},{"timestamp":1757494471372,"changes":[{"type":"MODIFY","lineNumber":48,"content":"                }","oldContent":"    //Diagnostic info"},{"type":"MODIFY","lineNumber":50,"content":"            }","oldContent":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"MODIFY","lineNumber":53,"content":"        // Manage connection state + reconnects","oldContent":""},{"type":"MODIFY","lineNumber":63,"content":"                    }","oldContent":"            }"},{"type":"DELETE","lineNumber":78,"oldContent":""},{"type":"DELETE","lineNumber":79,"oldContent":"        scope.launch{"},{"type":"DELETE","lineNumber":80,"oldContent":"            val heartbeat = Heartbeat("},{"type":"DELETE","lineNumber":83,"oldContent":"            )"},{"type":"DELETE","lineNumber":84,"oldContent":"            while (isActive) {"},{"type":"INSERT","lineNumber":80,"content":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"INSERT","lineNumber":81,"content":"                customMode = 0u,"},{"type":"DELETE","lineNumber":87,"oldContent":"            while(isActive){"},{"type":"INSERT","lineNumber":84,"content":"            while (isActive) {"},{"type":"INSERT","lineNumber":85,"content":"                if (state.value.connected) {"},{"type":"INSERT","lineNumber":86,"content":"                    try {"},{"type":"INSERT","lineNumber":87,"content":"                        connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, heartbeat)"},{"type":"MODIFY","lineNumber":90,"content":"                        _lastFailure.value = e","oldContent":"            }"},{"type":"INSERT","lineNumber":95,"content":"        }"},{"type":"DELETE","lineNumber":96,"oldContent":"        val frames = connection.mavFrame"},{"type":"INSERT","lineNumber":99,"content":"            .shareIn(scope, SharingStarted.Eagerly, replay = 0)"},{"type":"DELETE","lineNumber":100,"oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":106,"content":"        }","oldContent":"                        fcuSystemId = it.systemId"},{"type":"MODIFY","lineNumber":110,"content":"            mavFrameStream","oldContent":"                        launch {"},{"type":"MODIFY","lineNumber":116,"content":"                        Log.i(\"MavlinkRepo\", \"FCU detected sysId=$fcuSystemId compId=$fcuComponentId\")","oldContent":"                                    command = MavCmd.SET_MESSAGE_INTERVAL.wrap(),"},{"type":"DELETE","lineNumber":124,"oldContent":"                                    param6 = 0f,"},{"type":"DELETE","lineNumber":126,"oldContent":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":128,"oldContent":"                                )"},{"type":"INSERT","lineNumber":133,"content":"                                    param6 = 0f,"},{"type":"INSERT","lineNumber":134,"content":"                                    param7 = 0f"},{"type":"INSERT","lineNumber":135,"content":"                                )"},{"type":"MODIFY","lineNumber":139,"content":"                                    Log.e(\"MavlinkRepo\", \"Failed to send SET_MESSAGE_INTERVAL\", e)","oldContent":"        //VFR_HUD for alt and speed"},{"type":"MODIFY","lineNumber":143,"content":"","oldContent":"                .collect { hud->"},{"type":"MODIFY","lineNumber":160,"content":"                .map { it.message }","oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"MODIFY","lineNumber":190,"content":"                        )","oldContent":"                    _state.update{it.copy(volatage = vBatt , batteryPercent = pct) }"},{"type":"MODIFY","lineNumber":206,"content":"","oldContent":""},{"type":"DELETE","lineNumber":210,"oldContent":"<<<<<<< HEAD"},{"type":"DELETE","lineNumber":217,"oldContent":"======="},{"type":"DELETE","lineNumber":219,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":221,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":223,"oldContent":"                .filterIsInstance<Heartbeat>()"},{"type":"DELETE","lineNumber":225,"oldContent":"                .collect { hb ->"},{"type":"DELETE","lineNumber":227,"oldContent":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED.wrap() }"},{"type":"DELETE","lineNumber":229,"oldContent":""},{"type":"DELETE","lineNumber":231,"oldContent":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"INSERT","lineNumber":242,"content":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":259,"oldContent":"                        else -> \"Unknown\""},{"type":"INSERT","lineNumber":251,"content":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":252,"content":"                .map { frame -> frame.message }"},{"type":"DELETE","lineNumber":267,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":269,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":271,"oldContent":"}"},{"type":"DELETE","lineNumber":272,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":273,"oldContent":"}"},{"type":"INSERT","lineNumber":262,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"INSERT","lineNumber":263,"content":"                }"},{"type":"INSERT","lineNumber":264,"content":"        }"},{"type":"DELETE","lineNumber":275,"oldContent":"<<<<<<< HEAD"},{"type":"DELETE","lineNumber":282,"oldContent":"======="},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"DELETE","lineNumber":287,"oldContent":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"DELETE","lineNumber":288,"oldContent":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"DELETE","lineNumber":289,"oldContent":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"INSERT","lineNumber":274,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":275,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":276,"content":"                }"},{"type":"INSERT","lineNumber":277,"content":"        }"},{"type":"INSERT","lineNumber":283,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":301,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":303,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":305,"oldContent":"                }"},{"type":"DELETE","lineNumber":307,"oldContent":"        }"},{"type":"DELETE","lineNumber":314,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":300,"content":"    }"},{"type":"DELETE","lineNumber":317,"oldContent":""},{"type":"DELETE","lineNumber":318,"oldContent":"}"},{"type":"DELETE","lineNumber":319,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":320,"oldContent":"    suspend fun land() {"},{"type":"INSERT","lineNumber":302,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":303,"content":"        if (state.value.armable) {"},{"type":"INSERT","lineNumber":304,"content":"            sendCommand(MavCmd.COMPONENT_ARM_DISARM, 1f)"},{"type":"INSERT","lineNumber":305,"content":"        } else {"},{"type":"INSERT","lineNumber":306,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":307,"content":"        }"},{"type":"DELETE","lineNumber":325,"oldContent":"}"},{"type":"DELETE","lineNumber":328,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":329,"oldContent":"}"},{"type":"DELETE","lineNumber":330,"oldContent":"        } else {"},{"type":"INSERT","lineNumber":314,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":315,"content":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"DELETE","lineNumber":332,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":333,"oldContent":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"DELETE","lineNumber":334,"oldContent":"        }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"INSERT","lineNumber":319,"content":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":322,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":323,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":325,"content":"}"},{"type":"INSERT","lineNumber":326,"content":""}]},{"timestamp":1757494507833,"changes":[{"type":"MODIFY","lineNumber":11,"content":"import com.example.kotlingcspractice.Telemetry.AppScope","oldContent":"import com.divpundir.mavlink.definitions.common.GlobalPositionInt"},{"type":"MODIFY","lineNumber":31,"content":"    val lastFailure: StateFlow<Throwable?> = _lastFailure.asStateFlow()","oldContent":"import kotlinx.coroutines.flow.update"},{"type":"MODIFY","lineNumber":49,"content":"                delay(1000)","oldContent":"    private val _lastFailure = MutableStateFlow<Throwable?>(null)"},{"type":"MODIFY","lineNumber":62,"content":"                        }","oldContent":"            }"},{"type":"MODIFY","lineNumber":64,"content":"                    is StreamState.Inactive -> {","oldContent":""},{"type":"MODIFY","lineNumber":67,"content":"                            _state.update { it.copy(connected = false, fcuDetected = false) }","oldContent":"            connection.streamState.collect {"},{"type":"DELETE","lineNumber":78,"oldContent":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"DELETE","lineNumber":79,"oldContent":"                customMode = 0u,"},{"type":"INSERT","lineNumber":78,"content":"                type = MavType.GCS.wrap(),"},{"type":"INSERT","lineNumber":81,"content":"                customMode = 0u,"},{"type":"INSERT","lineNumber":82,"content":"                mavlinkVersion = 3u"},{"type":"INSERT","lineNumber":83,"content":"            )"},{"type":"DELETE","lineNumber":84,"oldContent":"            )"},{"type":"DELETE","lineNumber":86,"oldContent":"            while(isActive){"},{"type":"DELETE","lineNumber":96,"oldContent":"        val frames = connection.mavFrame"},{"type":"MODIFY","lineNumber":97,"content":"        // Shared message stream","oldContent":"        // Shared message stream"},{"type":"INSERT","lineNumber":98,"content":"        val mavFrameStream = connection.mavFrame"},{"type":"MODIFY","lineNumber":100,"content":"","oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":130,"oldContent":"                                    param6 = 0f,"},{"type":"DELETE","lineNumber":132,"oldContent":"                                    param7 = 0f"},{"type":"DELETE","lineNumber":134,"oldContent":"                                )"},{"type":"DELETE","lineNumber":136,"oldContent":"        }"},{"type":"DELETE","lineNumber":137,"oldContent":"        //VFR_HUD for alt and speed"},{"type":"INSERT","lineNumber":133,"content":"                                    param6 = 0f,"},{"type":"INSERT","lineNumber":134,"content":"                                    param7 = 0f"},{"type":"INSERT","lineNumber":135,"content":"                                )"},{"type":"INSERT","lineNumber":136,"content":"                                try {"},{"type":"INSERT","lineNumber":137,"content":"                                    connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, cmd)"},{"type":"MODIFY","lineNumber":141,"content":"                                }","oldContent":"                .filterIsInstance<VfrHud>()"},{"type":"INSERT","lineNumber":150,"content":"                    }"},{"type":"DELETE","lineNumber":151,"oldContent":"                }"},{"type":"MODIFY","lineNumber":158,"content":"            mavFrameStream","oldContent":"                .collect{ gp->"},{"type":"DELETE","lineNumber":163,"oldContent":"        }"},{"type":"DELETE","lineNumber":164,"oldContent":""},{"type":"INSERT","lineNumber":163,"content":"                    _state.update {"},{"type":"INSERT","lineNumber":164,"content":"                        it.copy("},{"type":"MODIFY","lineNumber":175,"content":"            mavFrameStream","oldContent":"                    }"},{"type":"DELETE","lineNumber":184,"oldContent":"                .collect { s ->"},{"type":"DELETE","lineNumber":185,"oldContent":"                    val vBatt ="},{"type":"INSERT","lineNumber":184,"content":"                    _state.update {"},{"type":"INSERT","lineNumber":185,"content":"                        it.copy("},{"type":"INSERT","lineNumber":192,"content":"                }"},{"type":"DELETE","lineNumber":194,"oldContent":""},{"type":"MODIFY","lineNumber":198,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }","oldContent":"                .filterIsInstance<GpsRawInt>()"},{"type":"INSERT","lineNumber":205,"content":"        }"},{"type":"DELETE","lineNumber":206,"oldContent":""},{"type":"INSERT","lineNumber":210,"content":"<<<<<<< HEAD"},{"type":"INSERT","lineNumber":216,"content":"======="},{"type":"INSERT","lineNumber":217,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":218,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":219,"content":"                .filterIsInstance<Heartbeat>()"},{"type":"INSERT","lineNumber":220,"content":"                .collect { hb ->"},{"type":"INSERT","lineNumber":221,"content":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED.wrap() }"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"INSERT","lineNumber":223,"content":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"DELETE","lineNumber":233,"oldContent":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":243,"oldContent":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":251,"content":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":245,"oldContent":"                .map { frame -> frame.message }"},{"type":"INSERT","lineNumber":260,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":261,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":255,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":257,"oldContent":"                }"},{"type":"DELETE","lineNumber":259,"oldContent":"        }"},{"type":"INSERT","lineNumber":266,"content":"<<<<<<< HEAD"},{"type":"DELETE","lineNumber":265,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":272,"content":"======="},{"type":"DELETE","lineNumber":267,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":274,"content":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"INSERT","lineNumber":275,"content":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"INSERT","lineNumber":276,"content":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"INSERT","lineNumber":277,"content":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"INSERT","lineNumber":278,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":269,"oldContent":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":276,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"INSERT","lineNumber":290,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":291,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":292,"content":"                }"},{"type":"INSERT","lineNumber":293,"content":"        }"},{"type":"INSERT","lineNumber":299,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":289,"oldContent":"    }"},{"type":"DELETE","lineNumber":291,"oldContent":"    suspend fun arm() {"},{"type":"DELETE","lineNumber":293,"oldContent":"        if (state.value.armable) {"},{"type":"DELETE","lineNumber":294,"oldContent":"            sendCommand(MavCmd.COMPONENT_ARM_DISARM, 1f)"},{"type":"DELETE","lineNumber":296,"oldContent":"        } else {"},{"type":"DELETE","lineNumber":297,"oldContent":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"DELETE","lineNumber":299,"oldContent":"        }"},{"type":"DELETE","lineNumber":305,"oldContent":""},{"type":"DELETE","lineNumber":306,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":307,"oldContent":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"DELETE","lineNumber":308,"oldContent":"}"},{"type":"INSERT","lineNumber":314,"content":"            _lastFailure.value = e"},{"type":"INSERT","lineNumber":315,"content":"        }"},{"type":"DELETE","lineNumber":311,"oldContent":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":318,"content":"    suspend fun arm() {"},{"type":"INSERT","lineNumber":319,"content":"        if (state.value.armable) {"},{"type":"INSERT","lineNumber":320,"content":"            sendCommand(MavCmd.COMPONENT_ARM_DISARM, 1f)"},{"type":"INSERT","lineNumber":321,"content":"        } else {"},{"type":"INSERT","lineNumber":322,"content":"            Log.w(\"MavlinkRepo\", \"Arm command rejected, vehicle not armable\")"},{"type":"INSERT","lineNumber":323,"content":"        }"},{"type":"DELETE","lineNumber":313,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":314,"oldContent":"}"},{"type":"DELETE","lineNumber":315,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"DELETE","lineNumber":318,"oldContent":"}"},{"type":"INSERT","lineNumber":328,"content":"    }"},{"type":"DELETE","lineNumber":320,"oldContent":"    suspend fun land() {"},{"type":"INSERT","lineNumber":330,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":331,"content":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"INSERT","lineNumber":332,"content":"    }"},{"type":"INSERT","lineNumber":334,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":338,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":339,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":341,"content":"}"},{"type":"INSERT","lineNumber":342,"content":""}]},{"timestamp":1757494536454,"changes":[{"type":"MODIFY","lineNumber":77,"content":"            val heartbeat = Heartbeat(","oldContent":""},{"type":"MODIFY","lineNumber":81,"content":"                customMode = 0u,","oldContent":"                customMode = 0u,"},{"type":"MODIFY","lineNumber":84,"content":"            while (isActive) {","oldContent":"            while (isActive) {"},{"type":"DELETE","lineNumber":91,"oldContent":""},{"type":"DELETE","lineNumber":92,"oldContent":"        //Message Rates"},{"type":"DELETE","lineNumber":93,"oldContent":"        // Collecting the messages from the FCU"},{"type":"DELETE","lineNumber":94,"oldContent":""},{"type":"INSERT","lineNumber":91,"content":"                    }"},{"type":"INSERT","lineNumber":92,"content":"                }"},{"type":"INSERT","lineNumber":93,"content":"                delay(1000)"},{"type":"INSERT","lineNumber":94,"content":"            }"},{"type":"INSERT","lineNumber":96,"content":""},{"type":"DELETE","lineNumber":98,"oldContent":""},{"type":"MODIFY","lineNumber":109,"content":"        scope.launch {","oldContent":"                        launch {"},{"type":"MODIFY","lineNumber":118,"content":"","oldContent":"                                    param1 = messageId.toFloat(),"},{"type":"MODIFY","lineNumber":132,"content":"                                    param5 = 0f,","oldContent":"                                    param6 = 0f,"},{"type":"INSERT","lineNumber":133,"content":"                                    param6 = 0f,"},{"type":"DELETE","lineNumber":135,"oldContent":"                                    param5 = 0f,"},{"type":"MODIFY","lineNumber":204,"content":"                }","oldContent":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":211,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":212,"oldContent":"                }"},{"type":"INSERT","lineNumber":211,"content":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":212,"content":"                .map { frame -> frame.message }"},{"type":"DELETE","lineNumber":216,"oldContent":"                    // ArduPilot custom modes"},{"type":"DELETE","lineNumber":218,"oldContent":"                    val mode = when (hb.customMode) {"},{"type":"DELETE","lineNumber":220,"oldContent":"                        0u -> \"Stabilize\""},{"type":"DELETE","lineNumber":222,"oldContent":"                        1u -> \"Acro\""},{"type":"DELETE","lineNumber":224,"oldContent":"                        2u -> \"Alt Hold\""},{"type":"DELETE","lineNumber":226,"oldContent":"                        3u -> \"Auto\""},{"type":"DELETE","lineNumber":228,"oldContent":"                        4u -> \"Guided\""},{"type":"DELETE","lineNumber":230,"oldContent":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":224,"content":"                    // ArduPilot custom modes"},{"type":"INSERT","lineNumber":225,"content":"                    val mode = when (hb.customMode) {"},{"type":"INSERT","lineNumber":226,"content":"                        0u -> \"Stabilize\""},{"type":"INSERT","lineNumber":227,"content":"                        1u -> \"Acro\""},{"type":"INSERT","lineNumber":228,"content":"                        2u -> \"Alt Hold\""},{"type":"INSERT","lineNumber":229,"content":"                        3u -> \"Auto\""},{"type":"INSERT","lineNumber":230,"content":"                        4u -> \"Guided\""},{"type":"INSERT","lineNumber":231,"content":"                        5u -> \"Loiter\""},{"type":"INSERT","lineNumber":251,"content":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":257,"oldContent":"                        else -> \"Unknown\""},{"type":"DELETE","lineNumber":260,"oldContent":"                    val present = (s.onboardControlSensorsPresent.toUInt() and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":261,"oldContent":"                    val SENSOR_3D_GYRO = 1u // Usually bit 0, adjust if needed"},{"type":"INSERT","lineNumber":260,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":261,"content":"                .map { it.message }"},{"type":"INSERT","lineNumber":262,"content":"                .filterIsInstance<SysStatus>()"},{"type":"INSERT","lineNumber":263,"content":"                .collect { s ->"},{"type":"DELETE","lineNumber":264,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"DELETE","lineNumber":266,"oldContent":"                .map { it.message }"},{"type":"DELETE","lineNumber":270,"oldContent":"}"},{"type":"MODIFY","lineNumber":271,"content":"                    val armable = present && enabled && healthy","oldContent":"<<<<<<< HEAD"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"INSERT","lineNumber":274,"content":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"INSERT","lineNumber":275,"content":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"INSERT","lineNumber":276,"content":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"INSERT","lineNumber":277,"content":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"INSERT","lineNumber":278,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":276,"oldContent":"======="},{"type":"DELETE","lineNumber":279,"oldContent":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"DELETE","lineNumber":281,"oldContent":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"DELETE","lineNumber":283,"oldContent":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"DELETE","lineNumber":284,"oldContent":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"DELETE","lineNumber":286,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"INSERT","lineNumber":290,"content":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"INSERT","lineNumber":291,"content":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"INSERT","lineNumber":292,"content":"                }"},{"type":"INSERT","lineNumber":293,"content":"        }"},{"type":"DELETE","lineNumber":290,"oldContent":""},{"type":"DELETE","lineNumber":292,"oldContent":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":299,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":300,"oldContent":"                    val hdop = if (gps.eph.toUInt() == 0xFFFFu) null else gps.eph.toFloat() / 100f"},{"type":"DELETE","lineNumber":302,"oldContent":"                    _state.update { it.copy(sats = sats, hdop = hdop) }"},{"type":"DELETE","lineNumber":303,"oldContent":"                }"},{"type":"DELETE","lineNumber":305,"oldContent":"        }"},{"type":"DELETE","lineNumber":308,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":310,"oldContent":""},{"type":"DELETE","lineNumber":311,"oldContent":"}"},{"type":"DELETE","lineNumber":312,"oldContent":"    }"},{"type":"DELETE","lineNumber":313,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":314,"oldContent":"    }"},{"type":"DELETE","lineNumber":315,"oldContent":""},{"type":"DELETE","lineNumber":316,"oldContent":"    }"},{"type":"INSERT","lineNumber":310,"content":"        try {"},{"type":"INSERT","lineNumber":311,"content":"            connection.trySendUnsignedV2(gcsSystemId, gcsComponentId, commandLong)"},{"type":"INSERT","lineNumber":312,"content":"        } catch (e: Exception) {"},{"type":"INSERT","lineNumber":313,"content":"            Log.e(\"MavlinkRepo\", \"Failed to send command\", e)"},{"type":"DELETE","lineNumber":319,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":320,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"DELETE","lineNumber":323,"oldContent":""},{"type":"DELETE","lineNumber":326,"oldContent":""},{"type":"DELETE","lineNumber":328,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":326,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":327,"content":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"INSERT","lineNumber":330,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":331,"content":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"INSERT","lineNumber":332,"content":"    }"},{"type":"DELETE","lineNumber":334,"oldContent":"}"},{"type":"DELETE","lineNumber":335,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":334,"content":"    suspend fun takeoff(altitude: Float) {"},{"type":"INSERT","lineNumber":335,"content":"        sendCommand(MavCmd.NAV_TAKEOFF, -1f, 0f, 0f, 0f, 0f, 0f, altitude)"},{"type":"INSERT","lineNumber":337,"content":""},{"type":"DELETE","lineNumber":338,"oldContent":"    suspend fun takeoff(altitude: Float) {"},{"type":"MODIFY","lineNumber":339,"content":"        sendCommand(MavCmd.NAV_LAND)","oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"MODIFY","lineNumber":341,"content":"}","oldContent":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"INSERT","lineNumber":342,"content":""}]},{"timestamp":1757494538973,"changes":[{"type":"DELETE","lineNumber":69,"oldContent":"                when(st){"},{"type":"DELETE","lineNumber":70,"oldContent":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"INSERT","lineNumber":69,"content":"                        }"},{"type":"INSERT","lineNumber":70,"content":"                    }"},{"type":"INSERT","lineNumber":80,"content":"                baseMode = emptyList<MavModeFlag>().wrap(),"},{"type":"DELETE","lineNumber":81,"oldContent":"                customMode = 0u,"},{"type":"INSERT","lineNumber":83,"content":"            )"},{"type":"DELETE","lineNumber":84,"oldContent":"            while (isActive) {"},{"type":"MODIFY","lineNumber":105,"content":"            }","oldContent":"                        fcuSystemId = it.systemId"},{"type":"MODIFY","lineNumber":114,"content":"                        fcuSystemId = it.systemId","oldContent":"                                    targetComponent = fcuComponentId,"},{"type":"MODIFY","lineNumber":131,"content":"                                    param4 = 0f,","oldContent":"                                    param6 = 0f,"},{"type":"MODIFY","lineNumber":138,"content":"                                } catch (e: Exception) {","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":140,"content":"                                    _lastFailure.value = e","oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId && it.componentId == fcuComponentId }"},{"type":"MODIFY","lineNumber":159,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }","oldContent":"                    val altAMSLm = gp.alt / 1000f"},{"type":"INSERT","lineNumber":220,"content":"                .collect { hb ->"},{"type":"INSERT","lineNumber":221,"content":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED.wrap() }"},{"type":"INSERT","lineNumber":222,"content":""},{"type":"INSERT","lineNumber":223,"content":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"DELETE","lineNumber":222,"oldContent":"                .collect { hb ->"},{"type":"DELETE","lineNumber":225,"oldContent":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED.wrap() }"},{"type":"DELETE","lineNumber":228,"oldContent":""},{"type":"DELETE","lineNumber":231,"oldContent":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"MODIFY","lineNumber":252,"content":"                    }","oldContent":"                    val present = s.onboardControlSensorsPresent.and(SENSOR_3D_GYRO).compareTo(BigInteger.ZERO) != 0"},{"type":"MODIFY","lineNumber":254,"content":"                }","oldContent":"                    val SENSOR_3D_GYRO = BigInteger.ONE // Usually bit 0, adjust if needed"},{"type":"DELETE","lineNumber":263,"oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"DELETE","lineNumber":265,"oldContent":"}"},{"type":"DELETE","lineNumber":266,"oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"INSERT","lineNumber":264,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"INSERT","lineNumber":265,"content":"                    val pct = if (s.batteryRemaining.toInt() == -1) null else s.batteryRemaining.toInt()"},{"type":"INSERT","lineNumber":267,"content":"                    val SENSOR_3D_GYRO = 1u"},{"type":"DELETE","lineNumber":272,"oldContent":"    }"},{"type":"DELETE","lineNumber":274,"oldContent":"                }"},{"type":"INSERT","lineNumber":273,"content":""},{"type":"DELETE","lineNumber":276,"oldContent":"        }"},{"type":"DELETE","lineNumber":278,"oldContent":"        scope.launch {"},{"type":"DELETE","lineNumber":280,"oldContent":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"DELETE","lineNumber":281,"oldContent":"            mavFrameStream"},{"type":"INSERT","lineNumber":277,"content":""},{"type":"DELETE","lineNumber":283,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":284,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":279,"content":"                }"},{"type":"INSERT","lineNumber":280,"content":"        }"},{"type":"INSERT","lineNumber":283,"content":"        scope.launch {"},{"type":"INSERT","lineNumber":284,"content":"            mavFrameStream"},{"type":"INSERT","lineNumber":285,"content":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":286,"content":"                .map { it.message }"},{"type":"DELETE","lineNumber":290,"oldContent":"    }"},{"type":"DELETE","lineNumber":291,"oldContent":""},{"type":"MODIFY","lineNumber":294,"content":"    }","oldContent":"    private suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":295,"content":""},{"type":"INSERT","lineNumber":296,"content":"    private suspend fun sendCommand(command: MavCmd, param1: Float = 0f, param2: Float = 0f, param3: Float = 0f, param4: Float = 0f, param5: Float = 0f, param6: Float = 0f, param7: Float = 0f) {"},{"type":"INSERT","lineNumber":299,"content":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":303,"oldContent":"            targetComponent = fcuComponentId,"},{"type":"DELETE","lineNumber":305,"oldContent":""},{"type":"DELETE","lineNumber":306,"oldContent":"}"},{"type":"DELETE","lineNumber":307,"oldContent":"    }"},{"type":"DELETE","lineNumber":308,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":309,"oldContent":"    suspend fun land() {"},{"type":"INSERT","lineNumber":305,"content":"            param4 = param4,"},{"type":"INSERT","lineNumber":306,"content":"            param5 = param5,"},{"type":"INSERT","lineNumber":307,"content":"            param6 = param6,"},{"type":"INSERT","lineNumber":308,"content":"            param7 = param7"},{"type":"INSERT","lineNumber":309,"content":"        )"},{"type":"DELETE","lineNumber":314,"oldContent":"    }"},{"type":"DELETE","lineNumber":315,"oldContent":""},{"type":"INSERT","lineNumber":316,"content":"    }"},{"type":"INSERT","lineNumber":317,"content":""},{"type":"DELETE","lineNumber":320,"oldContent":"    }"},{"type":"DELETE","lineNumber":323,"oldContent":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":324,"oldContent":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"DELETE","lineNumber":327,"oldContent":"    suspend fun changeMode(mode: MavMode) {"},{"type":"INSERT","lineNumber":324,"content":"    }"},{"type":"INSERT","lineNumber":326,"content":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":327,"content":"        sendCommand(MavCmd.COMPONENT_ARM_DISARM, 0f)"},{"type":"INSERT","lineNumber":328,"content":"    }"},{"type":"INSERT","lineNumber":329,"content":""},{"type":"INSERT","lineNumber":330,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":330,"oldContent":"}"},{"type":"DELETE","lineNumber":333,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"MODIFY","lineNumber":338,"content":"    suspend fun land() {","oldContent":"    }"},{"type":"INSERT","lineNumber":340,"content":"    }"},{"type":"INSERT","lineNumber":341,"content":"}"}]},{"timestamp":1757494544419,"changes":[{"type":"MODIFY","lineNumber":68,"content":"                            reconnect(this)","oldContent":"                st->"},{"type":"DELETE","lineNumber":72,"oldContent":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":72,"content":"            }","oldContent":"                }"},{"type":"INSERT","lineNumber":73,"content":"        }"},{"type":"MODIFY","lineNumber":117,"content":"                        _state.update { it.copy(fcuDetected = true) }","oldContent":"                                    param1 = messageId.toFloat(),"},{"type":"MODIFY","lineNumber":203,"content":"                    _state.update { it.copy(currentA = currentA) }","oldContent":"                    _state.update{it.copy(sats = sats, hdop = hdop) }"},{"type":"MODIFY","lineNumber":214,"content":"                .collect { hb ->","oldContent":"                    _state.update { telemetryState -> telemetryState.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":221,"oldContent":"                    // ArduPilot custom modes"},{"type":"DELETE","lineNumber":223,"oldContent":"                    val mode = when (hb.customMode) {"},{"type":"DELETE","lineNumber":225,"oldContent":">>>>>>> 1ac01649252f612863c7fff00af911bc4f759393"},{"type":"INSERT","lineNumber":223,"content":""},{"type":"INSERT","lineNumber":224,"content":"                    // ArduPilot custom modes"},{"type":"INSERT","lineNumber":225,"content":"                    val mode = when (hb.customMode) {"},{"type":"MODIFY","lineNumber":253,"content":"                    _state.update { it.copy(armed = armed, mode = mode) }","oldContent":"}"},{"type":"MODIFY","lineNumber":264,"content":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f","oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"MODIFY","lineNumber":267,"content":"                    val SENSOR_3D_GYRO = 1u","oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"DELETE","lineNumber":275,"oldContent":""},{"type":"DELETE","lineNumber":277,"oldContent":"                }"},{"type":"DELETE","lineNumber":279,"oldContent":"        }"},{"type":"INSERT","lineNumber":277,"content":""},{"type":"INSERT","lineNumber":279,"content":"                }"},{"type":"INSERT","lineNumber":280,"content":"        }"},{"type":"INSERT","lineNumber":281,"content":""},{"type":"INSERT","lineNumber":282,"content":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":284,"oldContent":""},{"type":"DELETE","lineNumber":286,"oldContent":"        // GPS_RAW_INT"},{"type":"INSERT","lineNumber":292,"content":"                }"},{"type":"INSERT","lineNumber":293,"content":"        }"},{"type":"DELETE","lineNumber":294,"oldContent":"                }"},{"type":"DELETE","lineNumber":296,"oldContent":"        }"},{"type":"DELETE","lineNumber":301,"oldContent":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"DELETE","lineNumber":302,"oldContent":"    suspend fun land() {"},{"type":"DELETE","lineNumber":303,"oldContent":""},{"type":"DELETE","lineNumber":304,"oldContent":"    }"},{"type":"INSERT","lineNumber":301,"content":"            confirmation = 0u,"},{"type":"INSERT","lineNumber":302,"content":"            param1 = param1,"},{"type":"INSERT","lineNumber":303,"content":"            param2 = param2,"},{"type":"INSERT","lineNumber":304,"content":"            param3 = param3,"},{"type":"DELETE","lineNumber":314,"oldContent":"    }"},{"type":"MODIFY","lineNumber":316,"content":"    }","oldContent":""},{"type":"INSERT","lineNumber":317,"content":""},{"type":"DELETE","lineNumber":322,"oldContent":"    }"},{"type":"MODIFY","lineNumber":324,"content":"    }","oldContent":"    suspend fun disarm() {"},{"type":"INSERT","lineNumber":325,"content":""},{"type":"INSERT","lineNumber":326,"content":"    suspend fun disarm() {"},{"type":"DELETE","lineNumber":328,"oldContent":"}"},{"type":"MODIFY","lineNumber":331,"content":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)","oldContent":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"},{"type":"INSERT","lineNumber":342,"content":""}]},{"timestamp":1757494548426,"changes":[{"type":"MODIFY","lineNumber":71,"content":"                }","oldContent":"                    is StreamState.Inactive -> _state.update { it.copy(connected = false) }"},{"type":"MODIFY","lineNumber":73,"content":"        }","oldContent":"            }"},{"type":"MODIFY","lineNumber":213,"content":"                .filterIsInstance<Heartbeat>()","oldContent":"}"},{"type":"MODIFY","lineNumber":224,"content":"                    // ArduPilot custom modes","oldContent":"                    // ArduPilot custom modes"},{"type":"INSERT","lineNumber":263,"content":"                .collect { s ->"},{"type":"DELETE","lineNumber":264,"oldContent":"                    val vBatt = if (s.voltageBattery.toUInt() == 0xFFFFu) null else s.voltageBattery.toFloat() / 1000f"},{"type":"INSERT","lineNumber":266,"content":""},{"type":"DELETE","lineNumber":267,"oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"MODIFY","lineNumber":277,"content":"","oldContent":""},{"type":"INSERT","lineNumber":278,"content":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":280,"oldContent":"                    _state.update { it.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"MODIFY","lineNumber":283,"content":"        scope.launch {","oldContent":"        scope.launch {"},{"type":"MODIFY","lineNumber":294,"content":"    }","oldContent":"    }"},{"type":"MODIFY","lineNumber":297,"content":"        val commandLong = CommandLong(","oldContent":"}"},{"type":"INSERT","lineNumber":315,"content":"        }"},{"type":"DELETE","lineNumber":317,"oldContent":"        }"},{"type":"INSERT","lineNumber":323,"content":"        }"},{"type":"DELETE","lineNumber":325,"oldContent":"        }"},{"type":"INSERT","lineNumber":330,"content":"    suspend fun changeMode(mode: MavMode) {"},{"type":"DELETE","lineNumber":331,"oldContent":"        sendCommand(MavCmd.DO_SET_MODE, mode.value.toFloat(), 0f)"}]},{"timestamp":1757494550995,"changes":[{"type":"MODIFY","lineNumber":216,"content":"","oldContent":"======="},{"type":"INSERT","lineNumber":223,"content":""},{"type":"DELETE","lineNumber":224,"oldContent":"                    // ArduPilot custom modes"},{"type":"INSERT","lineNumber":276,"content":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"DELETE","lineNumber":277,"oldContent":""},{"type":"INSERT","lineNumber":282,"content":"        // GPS_RAW_INT"},{"type":"DELETE","lineNumber":283,"oldContent":"        scope.launch {"},{"type":"INSERT","lineNumber":293,"content":"        }"},{"type":"DELETE","lineNumber":294,"oldContent":"    }"},{"type":"INSERT","lineNumber":336,"content":"    }"},{"type":"DELETE","lineNumber":337,"oldContent":""},{"type":"INSERT","lineNumber":339,"content":"        sendCommand(MavCmd.NAV_LAND)"},{"type":"INSERT","lineNumber":341,"content":"}"}]},{"timestamp":1757494553491,"changes":[{"type":"MODIFY","lineNumber":210,"content":"","oldContent":"<<<<<<< HEAD"},{"type":"MODIFY","lineNumber":300,"content":"            command = command.wrap(),","oldContent":""},{"type":"DELETE","lineNumber":337,"oldContent":"}"},{"type":"INSERT","lineNumber":338,"content":"    suspend fun land() {"},{"type":"INSERT","lineNumber":340,"content":"    }"},{"type":"INSERT","lineNumber":342,"content":""}]},{"timestamp":1757494573844,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import java.math.BigInteger"},{"type":"MODIFY","lineNumber":214,"content":"                    val armed = hb.baseMode.any { flag -> flag == MavModeFlag.SAFETY_ARMED }","oldContent":"                    val armed = (hb.baseMode.value and MavModeFlag.SAFETY_ARMED.value) != 0u"},{"type":"MODIFY","lineNumber":220,"content":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED }","oldContent":"                    val armed = hb.baseMode.any { it == MavModeFlag.SAFETY_ARMED.wrap() }"},{"type":"INSERT","lineNumber":252,"content":""},{"type":"INSERT","lineNumber":253,"content":"                    _state.update { telemetryState -> telemetryState.copy(armed = armed, mode = mode) }"},{"type":"INSERT","lineNumber":254,"content":""},{"type":"INSERT","lineNumber":256,"content":""},{"type":"INSERT","lineNumber":260,"content":""},{"type":"DELETE","lineNumber":260,"oldContent":"                .filter { state.value.fcuDetected && it.systemId == fcuSystemId }"},{"type":"DELETE","lineNumber":261,"oldContent":"                .map { it.message }"},{"type":"INSERT","lineNumber":264,"content":"                .filter { frame -> state.value.fcuDetected && frame.systemId == fcuSystemId }"},{"type":"INSERT","lineNumber":265,"content":"                .map { frame -> frame.message }"},{"type":"DELETE","lineNumber":267,"oldContent":"                    val SENSOR_3D_GYRO = 1u"},{"type":"DELETE","lineNumber":268,"oldContent":"                    val present = (s.onboardControlSensorsPresent.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":269,"oldContent":"                    val enabled = (s.onboardControlSensorsEnabled.value and SENSOR_3D_GYRO) != 0u"},{"type":"DELETE","lineNumber":270,"oldContent":"                    val healthy = (s.onboardControlSensorsHealth.value and SENSOR_3D_GYRO) != 0u"},{"type":"MODIFY","lineNumber":271,"content":"                    val armable = s.onboardControlSensorsPresent.any { sensor -> sensor == MavSysStatus.SENSOR_3D_GYRO } &&","oldContent":"                    val armable = present && enabled && healthy"},{"type":"INSERT","lineNumber":272,"content":"                            s.onboardControlSensorsEnabled.any { sensor -> sensor == MavSysStatus.SENSOR_3D_GYRO } &&"},{"type":"INSERT","lineNumber":273,"content":"                            s.onboardControlSensorsHealth.any { sensor -> sensor == MavSysStatus.SENSOR_3D_GYRO }"},{"type":"INSERT","lineNumber":274,"content":"                    _state.update { telemetryState -> telemetryState.copy(voltage = vBatt, batteryPercent = pct, armable = armable) }"},{"type":"DELETE","lineNumber":273,"oldContent":""},{"type":"DELETE","lineNumber":274,"oldContent":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"DELETE","lineNumber":275,"oldContent":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() } &&"},{"type":"DELETE","lineNumber":276,"oldContent":"                            s.onboardControlSensorsHealth.any { it == MavSysStatusSensor.SENSOR_3D_GYRO.wrap() }"},{"type":"DELETE","lineNumber":277,"oldContent":""},{"type":"INSERT","lineNumber":276,"content":"                    val armable = s.onboardControlSensorsPresent.any { it == MavSysStatus.SENSOR_3D_GYRO } &&"},{"type":"INSERT","lineNumber":277,"content":"                            s.onboardControlSensorsEnabled.any { it == MavSysStatus.SENSOR_3D_GYRO } &&"},{"type":"INSERT","lineNumber":278,"content":"                            s.onboardControlSensorsHealth.any { it == MavSysStatus.SENSOR_3D_GYRO }"},{"type":"INSERT","lineNumber":280,"content":""},{"type":"DELETE","lineNumber":337,"oldContent":"    suspend fun land() {"},{"type":"INSERT","lineNumber":340,"content":"    suspend fun land() {"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryViewModel.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/TelemetryViewModel.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\nimport androidx.lifecycle.ViewModel\nimport androidx.lifecycle.viewModelScope\nimport kotlinx.coroutines.flow.StateFlow\n\nclass TelemetryViewModel(\n    private val repo: MavlinkTelemetryRepository = MavlinkTelemetryRepository()\n) : ViewModel(){\n    val telemetry : StateFlow<TelemetryState> get() = repo.state\n    init {\n        repo.start(viewModelScope)\n    }\n}                  ","baseTimestamp":1756882167369,"deltas":[{"timestamp":1756891020300,"changes":[{"type":"MODIFY","lineNumber":13,"content":"}","oldContent":"}                  "}]},{"timestamp":1757055160373,"changes":[{"type":"MODIFY","lineNumber":0,"content":"package com.example.kotlingcspractice.telemetry","oldContent":"package com.example.kotlingcspractice.Telemetry"},{"type":"INSERT","lineNumber":5,"content":"import kotlinx.coroutines.flow.SharingStarted"},{"type":"INSERT","lineNumber":6,"content":"import kotlinx.coroutines.flow.stateIn"},{"type":"DELETE","lineNumber":8,"oldContent":") : ViewModel(){"},{"type":"DELETE","lineNumber":9,"oldContent":"    val telemetry : StateFlow<TelemetryState> get() = repo.state"},{"type":"INSERT","lineNumber":10,"content":") : ViewModel() {"},{"type":"INSERT","lineNumber":11,"content":""},{"type":"INSERT","lineNumber":12,"content":"    // Expose as a StateFlow for Compose to observe"},{"type":"INSERT","lineNumber":13,"content":"    val telemetry: StateFlow<TelemetryState> = repo.state"},{"type":"INSERT","lineNumber":14,"content":"        .stateIn("},{"type":"INSERT","lineNumber":15,"content":"            scope = viewModelScope,"},{"type":"INSERT","lineNumber":16,"content":"            started = SharingStarted.WhileSubscribed(5000),"},{"type":"INSERT","lineNumber":17,"content":"            initialValue = TelemetryState()"},{"type":"INSERT","lineNumber":18,"content":"        )"},{"type":"INSERT","lineNumber":19,"content":""},{"type":"INSERT","lineNumber":21,"content":"        // Start the MAVLink telemetry collection"},{"type":"INSERT","lineNumber":25,"content":""}]},{"timestamp":1757055165772,"changes":[{"type":"INSERT","lineNumber":4,"content":"import com.example.kotlingcspractice.Telemetry.MavlinkTelemetryRepository"},{"type":"DELETE","lineNumber":6,"oldContent":""},{"type":"INSERT","lineNumber":8,"content":""},{"type":"DELETE","lineNumber":11,"oldContent":"    init {"},{"type":"DELETE","lineNumber":13,"oldContent":"        repo.start(viewModelScope)"},{"type":"DELETE","lineNumber":15,"oldContent":"    }"},{"type":"DELETE","lineNumber":17,"oldContent":"}"},{"type":"DELETE","lineNumber":19,"oldContent":""},{"type":"DELETE","lineNumber":21,"oldContent":"        // Start the MAVLink telemetry collection"},{"type":"DELETE","lineNumber":23,"oldContent":""},{"type":"INSERT","lineNumber":20,"content":""},{"type":"INSERT","lineNumber":21,"content":"    init {"},{"type":"INSERT","lineNumber":22,"content":"        // Start the MAVLink telemetry collection"},{"type":"INSERT","lineNumber":23,"content":"        repo.start(viewModelScope)"},{"type":"INSERT","lineNumber":24,"content":"    }"},{"type":"INSERT","lineNumber":25,"content":"}"},{"type":"INSERT","lineNumber":26,"content":""}]},{"timestamp":1757055169163,"changes":[{"type":"INSERT","lineNumber":5,"content":"import com.example.kotlingcspractice.Telemetry.TelemetryState"},{"type":"DELETE","lineNumber":16,"oldContent":""},{"type":"INSERT","lineNumber":18,"content":"            started = SharingStarted.WhileSubscribed(5000),"},{"type":"INSERT","lineNumber":19,"content":"            initialValue = TelemetryState()"},{"type":"INSERT","lineNumber":20,"content":"        )"},{"type":"INSERT","lineNumber":21,"content":""},{"type":"DELETE","lineNumber":20,"oldContent":"            started = SharingStarted.WhileSubscribed(5000),"},{"type":"DELETE","lineNumber":23,"oldContent":"            initialValue = TelemetryState()"},{"type":"DELETE","lineNumber":25,"oldContent":"        )"}]},{"timestamp":1757055171638,"changes":[{"type":"DELETE","lineNumber":19,"oldContent":"    init {"},{"type":"DELETE","lineNumber":21,"oldContent":"        // Start the MAVLink telemetry collection"},{"type":"INSERT","lineNumber":22,"content":"    init {"},{"type":"INSERT","lineNumber":23,"content":"        // Start the MAVLink telemetry collection"}]},{"timestamp":1757055241029,"changes":[{"type":"DELETE","lineNumber":20,"oldContent":"    init {"},{"type":"DELETE","lineNumber":22,"oldContent":"        // Start the MAVLink telemetry collection"},{"type":"DELETE","lineNumber":24,"oldContent":"        repo.start(viewModelScope)"},{"type":"INSERT","lineNumber":22,"content":"    init {"},{"type":"INSERT","lineNumber":23,"content":"        // Start the MAVLink telemetry collection"},{"type":"INSERT","lineNumber":24,"content":"        repo.start()"}]},{"timestamp":1757055418761,"changes":[{"type":"DELETE","lineNumber":16,"oldContent":"        .stateIn("},{"type":"DELETE","lineNumber":17,"oldContent":"            scope = viewModelScope,"},{"type":"DELETE","lineNumber":18,"oldContent":"            started = SharingStarted.WhileSubscribed(5000),"},{"type":"DELETE","lineNumber":19,"oldContent":"            initialValue = TelemetryState()"},{"type":"DELETE","lineNumber":20,"oldContent":"        )"},{"type":"INSERT","lineNumber":16,"content":"        "},{"type":"INSERT","lineNumber":17,"content":""},{"type":"DELETE","lineNumber":23,"oldContent":""}]},{"timestamp":1757055425107,"changes":[{"type":"MODIFY","lineNumber":17,"content":"","oldContent":"        "}]},{"timestamp":1757056698819,"changes":[{"type":"DELETE","lineNumber":10,"oldContent":"class TelemetryViewModel("},{"type":"DELETE","lineNumber":11,"oldContent":"    private val repo: MavlinkTelemetryRepository = MavlinkTelemetryRepository()"},{"type":"DELETE","lineNumber":12,"oldContent":") : ViewModel() {"},{"type":"INSERT","lineNumber":10,"content":"class TelemetryViewModel : ViewModel() {"},{"type":"INSERT","lineNumber":12,"content":"    private val repo = MavlinkTelemetryRepository"},{"type":"INSERT","lineNumber":13,"content":""},{"type":"MODIFY","lineNumber":17,"content":"","oldContent":"        "}]},{"timestamp":1757487082557,"changes":[{"type":"INSERT","lineNumber":11,"content":""},{"type":"DELETE","lineNumber":13,"oldContent":""},{"type":"MODIFY","lineNumber":17,"content":"","oldContent":"        "},{"type":"INSERT","lineNumber":22,"content":""},{"type":"INSERT","lineNumber":23,"content":"    fun arm() {"},{"type":"INSERT","lineNumber":24,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":25,"content":"            repo.arm()"},{"type":"INSERT","lineNumber":26,"content":"        }"},{"type":"INSERT","lineNumber":27,"content":"    }"},{"type":"INSERT","lineNumber":28,"content":""},{"type":"INSERT","lineNumber":29,"content":"    fun disarm() {"},{"type":"INSERT","lineNumber":30,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":31,"content":"            repo.disarm()"},{"type":"INSERT","lineNumber":32,"content":"        }"},{"type":"INSERT","lineNumber":33,"content":"    }"},{"type":"INSERT","lineNumber":34,"content":""},{"type":"INSERT","lineNumber":35,"content":"    fun changeMode() {"},{"type":"INSERT","lineNumber":36,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":37,"content":"            repo.changeMode(com.divpundir.mavlink.definitions.common.MavMode.ARDUPILOT_AUTO)"},{"type":"INSERT","lineNumber":38,"content":"        }"},{"type":"INSERT","lineNumber":39,"content":"    }"},{"type":"INSERT","lineNumber":40,"content":""},{"type":"INSERT","lineNumber":41,"content":"    fun takeoff() {"},{"type":"INSERT","lineNumber":42,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":43,"content":"            repo.takeoff(10f)"},{"type":"INSERT","lineNumber":44,"content":"        }"},{"type":"INSERT","lineNumber":45,"content":"    }"},{"type":"INSERT","lineNumber":46,"content":""},{"type":"INSERT","lineNumber":47,"content":"    fun land() {"},{"type":"INSERT","lineNumber":48,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":49,"content":"            repo.land()"},{"type":"INSERT","lineNumber":50,"content":"        }"},{"type":"INSERT","lineNumber":51,"content":"    }"}]},{"timestamp":1757493776463,"changes":[{"type":"INSERT","lineNumber":9,"content":"import kotlinx.coroutines.launch"},{"type":"DELETE","lineNumber":16,"oldContent":"        "},{"type":"INSERT","lineNumber":18,"content":""},{"type":"DELETE","lineNumber":23,"oldContent":"}"},{"type":"DELETE","lineNumber":25,"oldContent":""},{"type":"DELETE","lineNumber":27,"oldContent":"    }"},{"type":"DELETE","lineNumber":30,"oldContent":"        }"},{"type":"DELETE","lineNumber":31,"oldContent":"            repo.land()"},{"type":"DELETE","lineNumber":33,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":35,"oldContent":"    fun land() {"},{"type":"DELETE","lineNumber":37,"oldContent":""},{"type":"DELETE","lineNumber":39,"oldContent":"    }"},{"type":"DELETE","lineNumber":42,"oldContent":"        }"},{"type":"DELETE","lineNumber":43,"oldContent":"            repo.takeoff(10f)"},{"type":"DELETE","lineNumber":45,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":47,"oldContent":"    fun takeoff() {"},{"type":"INSERT","lineNumber":37,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":38,"content":"            repo.changeMode(com.divpundir.mavlink.definitions.common.MavMode.ARDUPILOT_AUTO)"},{"type":"INSERT","lineNumber":39,"content":"        }"},{"type":"INSERT","lineNumber":40,"content":"    }"},{"type":"INSERT","lineNumber":42,"content":"    fun takeoff() {"},{"type":"INSERT","lineNumber":44,"content":"            repo.takeoff(10f)"},{"type":"INSERT","lineNumber":45,"content":"        }"},{"type":"DELETE","lineNumber":52,"oldContent":"            repo.changeMode(com.divpundir.mavlink.definitions.common.MavMode.ARDUPILOT_AUTO)"},{"type":"INSERT","lineNumber":47,"content":""},{"type":"INSERT","lineNumber":48,"content":"    fun land() {"},{"type":"INSERT","lineNumber":49,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":50,"content":"            repo.land()"},{"type":"INSERT","lineNumber":52,"content":"    }"},{"type":"INSERT","lineNumber":53,"content":"}"},{"type":"INSERT","lineNumber":54,"content":""}]},{"timestamp":1757493795491,"changes":[{"type":"DELETE","lineNumber":32,"oldContent":"            repo.changeMode(com.divpundir.mavlink.definitions.common.MavMode.ARDUPILOT_AUTO)"},{"type":"DELETE","lineNumber":33,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":32,"content":"            repo.disarm()"},{"type":"DELETE","lineNumber":36,"oldContent":"            repo.disarm()"},{"type":"INSERT","lineNumber":35,"content":""},{"type":"INSERT","lineNumber":36,"content":"    fun changeMode() {"},{"type":"INSERT","lineNumber":37,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":38,"content":"            repo.changeMode(ARDUPILOT)"},{"type":"INSERT","lineNumber":40,"content":"    }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":43,"content":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":40,"oldContent":"    }"},{"type":"INSERT","lineNumber":46,"content":"    }"},{"type":"DELETE","lineNumber":43,"oldContent":""},{"type":"DELETE","lineNumber":45,"oldContent":"    fun changeMode() {"},{"type":"DELETE","lineNumber":47,"oldContent":""},{"type":"DELETE","lineNumber":49,"oldContent":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"DELETE","lineNumber":51,"oldContent":"    }"},{"type":"DELETE","lineNumber":53,"oldContent":"        }"}]},{"timestamp":1757493799820,"changes":[{"type":"MODIFY","lineNumber":35,"content":"","oldContent":""},{"type":"MODIFY","lineNumber":39,"content":"        }","oldContent":"        }"},{"type":"INSERT","lineNumber":40,"content":"    }"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"INSERT","lineNumber":43,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":45,"content":"        }"},{"type":"DELETE","lineNumber":44,"oldContent":"        }"},{"type":"DELETE","lineNumber":45,"oldContent":""},{"type":"DELETE","lineNumber":46,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":48,"oldContent":"    }"},{"type":"MODIFY","lineNumber":52,"content":"    }","oldContent":"    }"}]},{"timestamp":1757493802675,"changes":[{"type":"INSERT","lineNumber":34,"content":"    }"},{"type":"DELETE","lineNumber":35,"oldContent":""},{"type":"INSERT","lineNumber":38,"content":"            repo.changeMode(ARDUPILOT_MODE.AUTO)"},{"type":"DELETE","lineNumber":39,"oldContent":"        }"},{"type":"MODIFY","lineNumber":42,"content":"    fun takeoff() {","oldContent":"    fun takeoff() {"},{"type":"INSERT","lineNumber":43,"content":"        viewModelScope.launch {"},{"type":"INSERT","lineNumber":45,"content":"        }"},{"type":"DELETE","lineNumber":45,"oldContent":"        viewModelScope.launch {"},{"type":"DELETE","lineNumber":47,"oldContent":"        }"},{"type":"INSERT","lineNumber":51,"content":"        }"},{"type":"DELETE","lineNumber":52,"oldContent":"    }"}]},{"timestamp":1757493809338,"changes":[{"type":"MODIFY","lineNumber":38,"content":"            repo.changeMode(MODE.AUTO)","oldContent":"            repo.changeMode(ARDUPILOT_MODE.AUTO)"},{"type":"INSERT","lineNumber":41,"content":""},{"type":"DELETE","lineNumber":42,"oldContent":"    fun takeoff() {"},{"type":"MODIFY","lineNumber":46,"content":"    }","oldContent":"    }"}]},{"timestamp":1757493816718,"changes":[{"type":"MODIFY","lineNumber":38,"content":"            repo.changeMode(mode.AUTO)","oldContent":"            repo.changeMode(MODE.AUTO)"},{"type":"INSERT","lineNumber":45,"content":"        }"},{"type":"DELETE","lineNumber":46,"oldContent":"    }"}]},{"timestamp":1757493829979,"changes":[{"type":"MODIFY","lineNumber":38,"content":"            repo.changeMode(MODE.AUTO)","oldContent":"            repo.changeMode(mode.AUTO)"}]},{"timestamp":1757493859600,"changes":[{"type":"MODIFY","lineNumber":38,"content":"            repo.changeMode()","oldContent":"            repo.changeMode(MODE.AUTO)"}]},{"timestamp":1757494016064,"changes":[{"type":"INSERT","lineNumber":6,"content":"import com.example.kotlingcspractice.Telemetry.MavMode"},{"type":"DELETE","lineNumber":38,"oldContent":"            repo.changeMode()"},{"type":"INSERT","lineNumber":39,"content":"            repo.changeMode(MavMode(3u)) // 3u corresponds to \"Auto\" mode"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/data.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/data.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\ndata class TelemetryState(\n\n    val connected : Boolean = false,\n    val fcuDetected : Boolean = false,\n    //Altitude\n    val altitudeMsl: Float? = null,\n    val altitudeRelative: Float? = null,\n    //Speeds\n    val airspeed: Float? = null,\n    val groundspeed: Float? = null,\n    //Battery\n    val voltage: Float? = null,\n    val batteryPercent: Int? = null,\n    val currentA : Float? = null,\n    //Sat count and HDOP\n    val sats : Int? = null,\n    val hdop : Float? = null,\n)","baseTimestamp":1756959944329,"deltas":[{"timestamp":1757052123316,"changes":[{"type":"INSERT","lineNumber":19,"content":"    //Latitude and Longitude"},{"type":"INSERT","lineNumber":20,"content":"    "}]},{"timestamp":1757052128128,"changes":[{"type":"INSERT","lineNumber":20,"content":"    val latitude : Double? = null,"},{"type":"INSERT","lineNumber":21,"content":"    val longitude : Double? = null"},{"type":"DELETE","lineNumber":21,"oldContent":"    "}]},{"timestamp":1757052136007,"changes":[{"type":"DELETE","lineNumber":20,"oldContent":"    val latitude : Double? = null,"},{"type":"DELETE","lineNumber":21,"oldContent":")"},{"type":"INSERT","lineNumber":20,"content":"    val latitude : lat? = null,"},{"type":"INSERT","lineNumber":22,"content":")"}]},{"timestamp":1757052144148,"changes":[{"type":"DELETE","lineNumber":20,"oldContent":"    val latitude : lat? = null,"},{"type":"DELETE","lineNumber":21,"oldContent":")"},{"type":"INSERT","lineNumber":20,"content":"    val latitude : Double? = null,"},{"type":"INSERT","lineNumber":22,"content":")"}]},{"timestamp":1757487082524,"changes":[{"type":"INSERT","lineNumber":21,"content":"    val longitude : Double? = null,"},{"type":"INSERT","lineNumber":22,"content":"    val mode: String? = null,"},{"type":"INSERT","lineNumber":23,"content":"    val armed: Boolean = false,"},{"type":"INSERT","lineNumber":24,"content":"    val armable: Boolean = false,"},{"type":"DELETE","lineNumber":22,"oldContent":"    val longitude : Double? = null"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Design/TelemetryOverLayUI.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Design/TelemetryOverLayUI.kt","baseContent":"package com.example.kotlingcspractice.Design\n\nimport androidx.compose.foundation.layout.*\nimport androidx.compose.material3.*\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Alignment\nimport androidx.compose.ui.Modifier\nimport androidx.compose.ui.text.font.FontWeight\nimport androidx.compose.ui.unit.dp\nimport com.example.kotlingcspractice.Telemetry.TelemetryState\n\nimport kotlin.math.round\n\n@Composable\nfun TelemetryOverlay(\n    state: TelemetryState,\n    modifier: Modifier = Modifier\n) {\n    Surface(modifier = modifier, color = MaterialTheme.colorScheme.surface.copy(alpha = 0.7f)) {\n        Column(\n            modifier = Modifier.padding(12.dp),\n            verticalArrangement = Arrangement.spacedBy(8.dp)\n        ) {\n            Row(\n                modifier = Modifier.fillMaxWidth(),\n                horizontalArrangement = Arrangement.SpaceBetween,\n                verticalAlignment = Alignment.CenterVertically\n            ) {\n                Text(\"Telemetry\", style = MaterialTheme.typography.titleMedium, fontWeight = FontWeight.Bold)\n                val connText = if (state.connected) \"Connected\" else \"Disconnected\"\n                val connColor = if (state.connected) MaterialTheme.colorScheme.primary else MaterialTheme.colorScheme.error\n                Text(connText, color = connColor)\n            }\n\n            TelemetryRow(\"Altitude (MSL)\", state.altitudeMsl?.let { \"${fmt(it)} m\" } ?: \"—\")\n            TelemetryRow(\"Altitude (Rel)\", state.altitudeRelative?.let { \"${fmt(it)} m\" } ?: \"—\")\n            TelemetryRow(\"Airspeed\", state.airspeed?.let { \"${fmt(it)} m/s\" } ?: \"—\")\n            TelemetryRow(\"Groundspeed\", state.groundspeed?.let { \"${fmt(it)} m/s\" } ?: \"—\")\n            TelemetryRow(\"Voltage\", state.voltage?.let { \"${fmt(it)} V\" } ?: \"—\")\n            TelemetryRow(\"Battery\", state.batteryPercent?.let { \"$it%\" } ?: \"—\")\n            TelemetryRow(\"Current\", state.currentA?.let { \"${fmt(it)} A\" } ?: \"—\")\n            TelemetryRow(\"Satellites\", state.sats?.toString() ?: \"—\")\n            TelemetryRow(\"HDOP\", state.hdop?.let { fmt(it) } ?: \"—\")\n        }\n    }\n}\n\n@Composable\nprivate fun TelemetryRow(label: String, value: String) {\n    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {\n        Text(label, style = MaterialTheme.typography.bodyMedium)\n        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)\n    }\n}\n\nprivate fun fmt(v: Float, places: Int = 2): String {\n    val factor = 10f.pow(places)\n    return (kotlin.math.round(v * factor) / factor).toString()\n}\n\nprivate fun Float.pow(p: Int): Float = Math.pow(this.toDouble(), p.toDouble()).toFloat()","baseTimestamp":1756960614507,"deltas":[{"timestamp":1757484653504,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            butto","oldContent":"            "}]},{"timestamp":1757484658129,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            button(","oldContent":"            butto"},{"type":"INSERT","lineNumber":47,"content":"                onClick = { /* TODO: Implement action */ },"},{"type":"INSERT","lineNumber":48,"content":"                modifier = Modifier.fillMaxWidth()"},{"type":"INSERT","lineNumber":49,"content":"            ) {"},{"type":"INSERT","lineNumber":50,"content":"                Text(\"Action Button\")"},{"type":"INSERT","lineNumber":51,"content":"            }"}]},{"timestamp":1757484663513,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.R.attr.button"},{"type":"DELETE","lineNumber":48,"oldContent":"        }"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":52,"oldContent":"}"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"INSERT","lineNumber":53,"content":"        }"},{"type":"INSERT","lineNumber":54,"content":"    }"},{"type":"INSERT","lineNumber":55,"content":"}"},{"type":"INSERT","lineNumber":56,"content":""}]},{"timestamp":1757484674858,"changes":[{"type":"MODIFY","lineNumber":47,"content":"            Button { }(","oldContent":"            button("},{"type":"MODIFY","lineNumber":52,"content":"            }","oldContent":"        }"},{"type":"INSERT","lineNumber":53,"content":"        }"},{"type":"DELETE","lineNumber":55,"oldContent":"            }"}]},{"timestamp":1757484684919,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.R.attr.button"},{"type":"DELETE","lineNumber":47,"oldContent":"            Button { }("},{"type":"DELETE","lineNumber":48,"oldContent":"                onClick = { /* TODO: Implement action */ },"},{"type":"DELETE","lineNumber":49,"oldContent":"                modifier = Modifier.fillMaxWidth()"},{"type":"DELETE","lineNumber":50,"oldContent":"            ) {"},{"type":"INSERT","lineNumber":46,"content":"            "},{"type":"DELETE","lineNumber":52,"oldContent":"            }"},{"type":"DELETE","lineNumber":53,"oldContent":"        }"}]},{"timestamp":1757484693696,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            Button() { }","oldContent":"            "}]},{"timestamp":1757484701495,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            Button() { on}","oldContent":"            Button() { }"}]},{"timestamp":1757484704564,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            Button() { onClick = { /* TODO: Add action */ }","oldContent":"            Button() { on}"}]},{"timestamp":1757484708360,"changes":[{"type":"INSERT","lineNumber":2,"content":"import android.R.attr.onClick"}]},{"timestamp":1757484715642,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"import android.R.attr.onClick"},{"type":"INSERT","lineNumber":51,"content":"@Composable"}]},{"timestamp":1757484739767,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            Button() { }","oldContent":"            Button() { onClick = { /* TODO: Add action */ }"},{"type":"MODIFY","lineNumber":51,"content":"@Composable","oldContent":"@Composable"},{"type":"INSERT","lineNumber":52,"content":"private fun TelemetryRow(label: String, value: String) {"}]},{"timestamp":1757484743765,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            ","oldContent":"            Button() { }"},{"type":"INSERT","lineNumber":50,"content":""},{"type":"DELETE","lineNumber":51,"oldContent":"@Composable"}]},{"timestamp":1757484872624,"changes":[{"type":"INSERT","lineNumber":45,"content":""},{"type":"DELETE","lineNumber":46,"oldContent":"            "}]},{"timestamp":1757484886319,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            Button","oldContent":"            "}]},{"timestamp":1757484891134,"changes":[{"type":"MODIFY","lineNumber":43,"content":"            TelemetryRow(\"Latitude\", state.latitude?.let { fmt(it.toFloat(), 6) } ?: \"—\")","oldContent":"}"},{"type":"MODIFY","lineNumber":46,"content":"            Button() { }","oldContent":"            Button"},{"type":"INSERT","lineNumber":53,"content":"    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {"},{"type":"INSERT","lineNumber":54,"content":"        Text(label, style = MaterialTheme.typography.bodyMedium)"},{"type":"INSERT","lineNumber":55,"content":"        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)"}]},{"timestamp":1757484901896,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            Button(modifier=modifier) { }","oldContent":"            Button() { }"},{"type":"DELETE","lineNumber":54,"oldContent":"        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)"},{"type":"MODIFY","lineNumber":56,"content":"    }","oldContent":"    }"}]},{"timestamp":1757484910820,"changes":[{"type":"MODIFY","lineNumber":44,"content":"            TelemetryRow(\"Longitude\", state.longitude?.let { fmt(it.toFloat(), 6) } ?: \"—\" )","oldContent":"}"},{"type":"MODIFY","lineNumber":46,"content":"            Button() { }","oldContent":"            Button(modifier=modifier) { }"},{"type":"MODIFY","lineNumber":56,"content":"    }","oldContent":"    }"}]},{"timestamp":1757484921107,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            ","oldContent":"            Button() { }"},{"type":"INSERT","lineNumber":55,"content":"        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)"},{"type":"DELETE","lineNumber":56,"oldContent":"    }"}]},{"timestamp":1757485083136,"changes":[{"type":"MODIFY","lineNumber":46,"content":"            // Control Buttons","oldContent":"            "},{"type":"INSERT","lineNumber":47,"content":"            Spacer(modifier = Modifier.height(12.dp))"},{"type":"INSERT","lineNumber":48,"content":""},{"type":"INSERT","lineNumber":49,"content":"            Text("},{"type":"INSERT","lineNumber":50,"content":"                \"Controls\","},{"type":"INSERT","lineNumber":51,"content":"                style = MaterialTheme.typography.titleSmall,"},{"type":"INSERT","lineNumber":52,"content":"                fontWeight = FontWeight.Bold,"},{"type":"INSERT","lineNumber":53,"content":"                modifier = Modifier.padding(bottom = 8.dp)"},{"type":"INSERT","lineNumber":54,"content":"            )"},{"type":"INSERT","lineNumber":55,"content":""},{"type":"INSERT","lineNumber":56,"content":"            // First row of buttons"},{"type":"INSERT","lineNumber":57,"content":"            Row("},{"type":"INSERT","lineNumber":58,"content":"                modifier = Modifier.fillMaxWidth(),"},{"type":"INSERT","lineNumber":59,"content":"                horizontalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"INSERT","lineNumber":60,"content":"            ) {"},{"type":"INSERT","lineNumber":61,"content":"                Button("},{"type":"INSERT","lineNumber":62,"content":"                    onClick = { onChangeModeClick() },"},{"type":"INSERT","lineNumber":63,"content":"                    modifier = Modifier.weight(1f)"},{"type":"INSERT","lineNumber":64,"content":"                ) {"},{"type":"INSERT","lineNumber":65,"content":"                    Text(\"Change Mode\")"},{"type":"INSERT","lineNumber":66,"content":"                }"},{"type":"INSERT","lineNumber":67,"content":""},{"type":"INSERT","lineNumber":68,"content":"                Button("},{"type":"INSERT","lineNumber":69,"content":"                    onClick = { onArmClick() },"},{"type":"INSERT","lineNumber":70,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":71,"content":"                    colors = ButtonDefaults.buttonColors("},{"type":"INSERT","lineNumber":72,"content":"                        containerColor = MaterialTheme.colorScheme.secondary"},{"type":"INSERT","lineNumber":73,"content":"                    )"},{"type":"INSERT","lineNumber":74,"content":"                ) {"},{"type":"INSERT","lineNumber":75,"content":"                    Text(\"Arm\")"},{"type":"INSERT","lineNumber":76,"content":"                }"},{"type":"INSERT","lineNumber":77,"content":"            }"},{"type":"INSERT","lineNumber":78,"content":""},{"type":"INSERT","lineNumber":79,"content":"            // Second row of buttons"},{"type":"INSERT","lineNumber":80,"content":"            Row("},{"type":"INSERT","lineNumber":81,"content":"                modifier = Modifier.fillMaxWidth(),"},{"type":"INSERT","lineNumber":82,"content":"                horizontalArrangement = Arrangement.spacedBy(8.dp)"},{"type":"INSERT","lineNumber":83,"content":"            ) {"},{"type":"INSERT","lineNumber":84,"content":"                Button("},{"type":"INSERT","lineNumber":85,"content":"                    onClick = { onDisarmClick() },"},{"type":"INSERT","lineNumber":86,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":87,"content":"                    colors = ButtonDefaults.buttonColors("},{"type":"INSERT","lineNumber":88,"content":"                        containerColor = MaterialTheme.colorScheme.error"},{"type":"INSERT","lineNumber":89,"content":"                    )"},{"type":"INSERT","lineNumber":90,"content":"                ) {"},{"type":"INSERT","lineNumber":91,"content":"                    Text(\"Disarm\")"},{"type":"INSERT","lineNumber":92,"content":"                }"},{"type":"INSERT","lineNumber":93,"content":""},{"type":"INSERT","lineNumber":94,"content":"                Button("},{"type":"INSERT","lineNumber":95,"content":"                    onClick = { onTakeoffClick() },"},{"type":"INSERT","lineNumber":96,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":97,"content":"                    colors = ButtonDefaults.buttonColors("},{"type":"INSERT","lineNumber":98,"content":"                        containerColor = MaterialTheme.colorScheme.tertiary"},{"type":"INSERT","lineNumber":99,"content":"                    )"},{"type":"INSERT","lineNumber":100,"content":"                ) {"},{"type":"INSERT","lineNumber":101,"content":"                    Text(\"Takeoff\")"},{"type":"INSERT","lineNumber":102,"content":"                }"},{"type":"INSERT","lineNumber":103,"content":"            }"},{"type":"DELETE","lineNumber":57,"oldContent":"    }"},{"type":"INSERT","lineNumber":116,"content":"// Placeholder functions for button actions"},{"type":"INSERT","lineNumber":117,"content":"private fun onChangeModeClick() {"},{"type":"INSERT","lineNumber":118,"content":"    // TODO: Implement mode change logic"},{"type":"INSERT","lineNumber":119,"content":"    println(\"Change Mode button clicked\")"},{"type":"INSERT","lineNumber":120,"content":"}"},{"type":"INSERT","lineNumber":121,"content":""},{"type":"INSERT","lineNumber":122,"content":"private fun onArmClick() {"},{"type":"INSERT","lineNumber":123,"content":"    // TODO: Implement arm logic"},{"type":"INSERT","lineNumber":124,"content":"    println(\"Arm button clicked\")"},{"type":"INSERT","lineNumber":125,"content":"}"},{"type":"INSERT","lineNumber":126,"content":""},{"type":"INSERT","lineNumber":127,"content":"private fun onDisarmClick() {"},{"type":"INSERT","lineNumber":128,"content":"    // TODO: Implement disarm logic"},{"type":"INSERT","lineNumber":129,"content":"    println(\"Disarm button clicked\")"},{"type":"INSERT","lineNumber":130,"content":"}"},{"type":"INSERT","lineNumber":131,"content":""},{"type":"INSERT","lineNumber":132,"content":"private fun onTakeoffClick() {"},{"type":"INSERT","lineNumber":133,"content":"    // TODO: Implement takeoff logic"},{"type":"INSERT","lineNumber":134,"content":"    println(\"Takeoff button clicked\")"},{"type":"INSERT","lineNumber":135,"content":"}"},{"type":"INSERT","lineNumber":136,"content":""}]},{"timestamp":1757487082481,"changes":[{"type":"MODIFY","lineNumber":16,"content":"    modifier: Modifier = Modifier,","oldContent":"    modifier: Modifier = Modifier"},{"type":"INSERT","lineNumber":17,"content":"    onArmClick: () -> Unit,"},{"type":"INSERT","lineNumber":18,"content":"    onDisarmClick: () -> Unit,"},{"type":"INSERT","lineNumber":19,"content":"    onChangeModeClick: () -> Unit,"},{"type":"INSERT","lineNumber":20,"content":"    onTakeoffClick: () -> Unit"},{"type":"INSERT","lineNumber":38,"content":"            TelemetryRow(\"Mode\", state.mode ?: \"—\")"},{"type":"INSERT","lineNumber":39,"content":"            TelemetryRow(\"Armed\", if (state.armed) \"Yes\" else \"No\")"},{"type":"INSERT","lineNumber":40,"content":"            TelemetryRow(\"Armable\", if (state.armable) \"Yes\" else \"No\")"},{"type":"DELETE","lineNumber":44,"oldContent":"            TelemetryRow(\"Longitude\", state.longitude?.let { fmt(it.toFloat(), 6) } ?: \"—\" )"},{"type":"INSERT","lineNumber":51,"content":"            TelemetryRow(\"Longitude\", state.longitude?.let { fmt(it.toFloat(), 6) } ?: \"—\")"},{"type":"DELETE","lineNumber":48,"oldContent":"        }"},{"type":"DELETE","lineNumber":50,"oldContent":"    }"},{"type":"DELETE","lineNumber":52,"oldContent":"}"},{"type":"DELETE","lineNumber":54,"oldContent":""},{"type":"DELETE","lineNumber":56,"oldContent":"@Composable"},{"type":"DELETE","lineNumber":58,"oldContent":"private fun TelemetryRow(label: String, value: String) {"},{"type":"DELETE","lineNumber":60,"oldContent":"    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {"},{"type":"DELETE","lineNumber":62,"oldContent":"        Text(label, style = MaterialTheme.typography.bodyMedium)"},{"type":"DELETE","lineNumber":64,"oldContent":"        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)"},{"type":"DELETE","lineNumber":66,"oldContent":"    }"},{"type":"DELETE","lineNumber":69,"oldContent":"}"},{"type":"DELETE","lineNumber":71,"oldContent":""},{"type":"DELETE","lineNumber":73,"oldContent":"private fun fmt(v: Float, places: Int = 2): String {"},{"type":"DELETE","lineNumber":75,"oldContent":"    val factor = 10f.pow(places)"},{"type":"DELETE","lineNumber":77,"oldContent":"    return (kotlin.math.round(v * factor) / factor).toString()"},{"type":"DELETE","lineNumber":79,"oldContent":"}"},{"type":"DELETE","lineNumber":81,"oldContent":""},{"type":"DELETE","lineNumber":83,"oldContent":"private fun Float.pow(p: Int): Float = Math.pow(this.toDouble(), p.toDouble()).toFloat()"},{"type":"DELETE","lineNumber":86,"oldContent":""},{"type":"DELETE","lineNumber":87,"oldContent":"}"},{"type":"DELETE","lineNumber":89,"oldContent":"    println(\"Takeoff button clicked\")"},{"type":"DELETE","lineNumber":91,"oldContent":"    // TODO: Implement takeoff logic"},{"type":"DELETE","lineNumber":93,"oldContent":"private fun onTakeoffClick() {"},{"type":"DELETE","lineNumber":95,"oldContent":""},{"type":"DELETE","lineNumber":97,"oldContent":"}"},{"type":"DELETE","lineNumber":99,"oldContent":"    println(\"Disarm button clicked\")"},{"type":"DELETE","lineNumber":101,"oldContent":"    // TODO: Implement disarm logic"},{"type":"DELETE","lineNumber":103,"oldContent":"private fun onDisarmClick() {"},{"type":"DELETE","lineNumber":105,"oldContent":""},{"type":"DELETE","lineNumber":107,"oldContent":"}"},{"type":"DELETE","lineNumber":109,"oldContent":"    println(\"Arm button clicked\")"},{"type":"DELETE","lineNumber":111,"oldContent":"    // TODO: Implement arm logic"},{"type":"DELETE","lineNumber":113,"oldContent":"private fun onArmClick() {"},{"type":"DELETE","lineNumber":115,"oldContent":""},{"type":"DELETE","lineNumber":117,"oldContent":"}"},{"type":"DELETE","lineNumber":119,"oldContent":"    println(\"Change Mode button clicked\")"},{"type":"DELETE","lineNumber":121,"oldContent":"    // TODO: Implement mode change logic"},{"type":"DELETE","lineNumber":123,"oldContent":"private fun onChangeModeClick() {"},{"type":"DELETE","lineNumber":125,"oldContent":"// Placeholder functions for button actions"},{"type":"DELETE","lineNumber":127,"oldContent":"            }"},{"type":"DELETE","lineNumber":129,"oldContent":"                }"},{"type":"DELETE","lineNumber":131,"oldContent":"                    Text(\"Takeoff\")"},{"type":"DELETE","lineNumber":133,"oldContent":"                ) {"},{"type":"DELETE","lineNumber":135,"oldContent":"                    )"},{"type":"DELETE","lineNumber":137,"oldContent":"                        containerColor = MaterialTheme.colorScheme.tertiary"},{"type":"DELETE","lineNumber":139,"oldContent":"                    colors = ButtonDefaults.buttonColors("},{"type":"DELETE","lineNumber":141,"oldContent":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":103,"content":"                    modifier = Modifier.weight(1f),"},{"type":"INSERT","lineNumber":104,"content":"                    colors = ButtonDefaults.buttonColors("},{"type":"INSERT","lineNumber":105,"content":"                        containerColor = MaterialTheme.colorScheme.tertiary"},{"type":"INSERT","lineNumber":106,"content":"                    )"},{"type":"INSERT","lineNumber":107,"content":"                ) {"},{"type":"INSERT","lineNumber":108,"content":"                    Text(\"Takeoff\")"},{"type":"INSERT","lineNumber":109,"content":"                }"},{"type":"INSERT","lineNumber":110,"content":"            }"},{"type":"INSERT","lineNumber":111,"content":"        }"},{"type":"INSERT","lineNumber":112,"content":"    }"},{"type":"INSERT","lineNumber":113,"content":"}"},{"type":"INSERT","lineNumber":114,"content":""},{"type":"INSERT","lineNumber":115,"content":"@Composable"},{"type":"INSERT","lineNumber":116,"content":"private fun TelemetryRow(label: String, value: String) {"},{"type":"INSERT","lineNumber":117,"content":"    Row(modifier = Modifier.fillMaxWidth(), horizontalArrangement = Arrangement.SpaceBetween) {"},{"type":"INSERT","lineNumber":118,"content":"        Text(label, style = MaterialTheme.typography.bodyMedium)"},{"type":"INSERT","lineNumber":119,"content":"        Text(value, style = MaterialTheme.typography.bodyMedium, fontWeight = FontWeight.SemiBold)"},{"type":"INSERT","lineNumber":120,"content":"    }"},{"type":"INSERT","lineNumber":121,"content":"}"},{"type":"INSERT","lineNumber":122,"content":""},{"type":"INSERT","lineNumber":123,"content":"private fun fmt(v: Float, places: Int = 2): String {"},{"type":"INSERT","lineNumber":124,"content":"    val factor = 10f.pow(places)"},{"type":"INSERT","lineNumber":125,"content":"    return (kotlin.math.round(v * factor) / factor).toString()"},{"type":"INSERT","lineNumber":126,"content":"}"},{"type":"INSERT","lineNumber":127,"content":""},{"type":"INSERT","lineNumber":128,"content":"private fun Float.pow(p: Int): Float = Math.pow(this.toDouble(), p.toDouble()).toFloat()"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/AppScope.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/AppScope.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\npackage com.example.kotlingcspractice.core\n\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.SupervisorJob\n\nobject AppScope : CoroutineScope {\n    override val coroutineContext = SupervisorJob() + Dispatchers.IO\n}\n","baseTimestamp":1757055109760,"deltas":[{"timestamp":1757055114873,"changes":[{"type":"DELETE","lineNumber":2,"oldContent":"package com.example.kotlingcspractice.core"},{"type":"INSERT","lineNumber":3,"content":""}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/MainActivity.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/MainActivity.kt","baseContent":"package com.example.kotlingcspractice\n\nimport android.os.Bundle\nimport androidx.activity.ComponentActivity\nimport androidx.activity.compose.setContent\nimport androidx.activity.enableEdgeToEdge\nimport androidx.compose.material3.SnackbarHost\nimport androidx.compose.material3.SnackbarHostState\nimport androidx.compose.runtime.LaunchedEffect\nimport androidx.compose.runtime.remember\nimport androidx.compose.runtime.rememberCoroutineScope\nimport androidx.compose.foundation.layout.fillMaxWidth\nimport androidx.compose.material3.Scaffold\nimport androidx.compose.runtime.Composable\nimport androidx.compose.ui.Modifier\nimport androidx.lifecycle.compose.collectAsStateWithLifecycle\nimport com.example.kotlingcspractice.Design.TelemetryOverlay\nimport com.example.kotlingcspractice.Telemetry.TelemetryViewModel\nimport kotlinx.coroutines.launch\n\nclass MainActivity : ComponentActivity() {\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n        setContent {\n            val vm = remember { TelemetryViewModel() }\n            val state = vm.telemetry.collectAsStateWithLifecycle()\n            val snackbarHostState = remember { SnackbarHostState() }\n            val scope = rememberCoroutineScope()\n\n            LaunchedEffect(state.value.connected) {\n                scope.launch {\n                    snackbarHostState.showSnackbar(\n                        if (state.value.connected) \"Connected\" else \"Disconnected\"\n                    )\n                }\n            }\n\n            Scaffold(\n                snackbarHost = { SnackbarHost(snackbarHostState) }\n            ) { padding ->\n                TelemetryOverlay(\n                    state = state.value,\n                    modifier = Modifier\n                        .fillMaxWidth()\n                )\n            }\n        }\n    }\n}\n","baseTimestamp":1757055441930,"deltas":[{"timestamp":1757056698788,"changes":[{"type":"DELETE","lineNumber":9,"oldContent":"import androidx.compose.runtime.remember"},{"type":"INSERT","lineNumber":12,"content":"import androidx.lifecycle.viewmodel.compose.viewModel"},{"type":"MODIFY","lineNumber":24,"content":"            val vm: TelemetryViewModel = viewModel()","oldContent":"            val vm = remember { TelemetryViewModel() }"}]},{"timestamp":1757056709631,"changes":[{"type":"MODIFY","lineNumber":12,"content":"import androidx.lifecycle.viewmodel.compose.viewModel","oldContent":"import androidx.lifecycle.viewmodel.compose.viewModel"}]},{"timestamp":1757056714587,"changes":[{"type":"INSERT","lineNumber":11,"content":"import androidx.compose.material3.Scaffold"},{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.lifecycle.viewmodel.compose.viewModel"},{"type":"INSERT","lineNumber":18,"content":"import com.example.kotlingcspractice.telemetry.TelemetryViewModel"}]},{"timestamp":1757056736733,"changes":[{"type":"MODIFY","lineNumber":17,"content":"","oldContent":"import com.example.kotlingcspractice.Telemetry.TelemetryViewModel"}]},{"timestamp":1757056754224,"changes":[{"type":"INSERT","lineNumber":14,"content":"import androidx.compose.runtime.remember"}]},{"timestamp":1757056758528,"changes":[{"type":"INSERT","lineNumber":52,"content":"private fun MainActivity.viewModel(): TelemetryViewModel {}"},{"type":"INSERT","lineNumber":53,"content":""}]},{"timestamp":1757056760606,"changes":[{"type":"DELETE","lineNumber":52,"oldContent":"private fun MainActivity.viewModel(): TelemetryViewModel {}"},{"type":"DELETE","lineNumber":53,"oldContent":""}]},{"timestamp":1757056887338,"changes":[{"type":"DELETE","lineNumber":5,"oldContent":"import androidx.activity.enableEdgeToEdge"},{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.lifecycle.viewmodel.compose.viewModel"},{"type":"DELETE","lineNumber":13,"oldContent":"import androidx.compose.runtime.Composable"},{"type":"DELETE","lineNumber":18,"oldContent":""},{"type":"INSERT","lineNumber":15,"content":"import androidx.lifecycle.viewmodel.compose.viewModel"},{"type":"DELETE","lineNumber":41,"oldContent":"            ) { padding ->"},{"type":"INSERT","lineNumber":38,"content":"            ) { _ ->"}]},{"timestamp":1757487082519,"changes":[{"type":"DELETE","lineNumber":12,"oldContent":"import androidx.lifecycle.viewmodel.compose.viewModel"},{"type":"INSERT","lineNumber":15,"content":"import androidx.lifecycle.viewmodel.compose.viewModel"},{"type":"DELETE","lineNumber":35,"oldContent":"            ) { _ ->"},{"type":"INSERT","lineNumber":38,"content":"            ) { _ ->"},{"type":"MODIFY","lineNumber":42,"content":"                        .fillMaxWidth(),","oldContent":"                        .fillMaxWidth()"},{"type":"INSERT","lineNumber":43,"content":"                    onArmClick = {"},{"type":"INSERT","lineNumber":44,"content":"                        if (state.value.armable) {"},{"type":"INSERT","lineNumber":45,"content":"                            vm.arm()"},{"type":"INSERT","lineNumber":46,"content":"                        } else {"},{"type":"INSERT","lineNumber":47,"content":"                            scope.launch {"},{"type":"INSERT","lineNumber":48,"content":"                                snackbarHostState.showSnackbar(\"Drone is not armable\")"},{"type":"INSERT","lineNumber":49,"content":"                            }"},{"type":"INSERT","lineNumber":50,"content":"                        }"},{"type":"INSERT","lineNumber":51,"content":"                    },"},{"type":"INSERT","lineNumber":52,"content":"                    onDisarmClick = {"},{"type":"INSERT","lineNumber":53,"content":"                        if (state.value.altitudeRelative != null && state.value.altitudeRelative!! < 0.5f) {"},{"type":"INSERT","lineNumber":54,"content":"                            vm.disarm()"},{"type":"INSERT","lineNumber":55,"content":"                        } else {"},{"type":"INSERT","lineNumber":56,"content":"                            scope.launch {"},{"type":"INSERT","lineNumber":57,"content":"                                snackbarHostState.showSnackbar(\"Drone must be landed to disarm\")"},{"type":"INSERT","lineNumber":58,"content":"                            }"},{"type":"INSERT","lineNumber":59,"content":"                        }"},{"type":"INSERT","lineNumber":60,"content":"                    },"},{"type":"INSERT","lineNumber":61,"content":"                    onChangeModeClick = { vm.changeMode() },"},{"type":"INSERT","lineNumber":62,"content":"                    onTakeoffClick = {"},{"type":"INSERT","lineNumber":63,"content":"                        if (state.value.armed) {"},{"type":"INSERT","lineNumber":64,"content":"                            vm.takeoff()"},{"type":"INSERT","lineNumber":65,"content":"                            scope.launch {"},{"type":"INSERT","lineNumber":66,"content":"                                snackbarHostState.showSnackbar(\"Taking off to 10m...\")"},{"type":"INSERT","lineNumber":67,"content":"                                val startTime = System.currentTimeMillis()"},{"type":"INSERT","lineNumber":68,"content":"                                var timeout = false"},{"type":"INSERT","lineNumber":69,"content":"                                while (state.value.altitudeRelative == null || state.value.altitudeRelative!! < 9.5f) {"},{"type":"INSERT","lineNumber":70,"content":"                                    kotlinx.coroutines.delay(100)"},{"type":"INSERT","lineNumber":71,"content":"                                    if (System.currentTimeMillis() - startTime > 20000) { // 20 second timeout"},{"type":"INSERT","lineNumber":72,"content":"                                        timeout = true"},{"type":"INSERT","lineNumber":73,"content":"                                        break"},{"type":"INSERT","lineNumber":74,"content":"                                    }"},{"type":"INSERT","lineNumber":75,"content":"                                }"},{"type":"INSERT","lineNumber":76,"content":"                                if (timeout) {"},{"type":"INSERT","lineNumber":77,"content":"                                    snackbarHostState.showSnackbar(\"Takeoff timed out\")"},{"type":"INSERT","lineNumber":78,"content":"                                } else {"},{"type":"INSERT","lineNumber":79,"content":"                                    vm.land()"},{"type":"INSERT","lineNumber":80,"content":"                                    snackbarHostState.showSnackbar(\"Landing...\")"},{"type":"INSERT","lineNumber":81,"content":"                                }"},{"type":"INSERT","lineNumber":82,"content":"                            }"},{"type":"INSERT","lineNumber":83,"content":"                        } else {"},{"type":"INSERT","lineNumber":84,"content":"                            scope.launch {"},{"type":"INSERT","lineNumber":85,"content":"                                snackbarHostState.showSnackbar(\"Drone is not armed\")"},{"type":"INSERT","lineNumber":86,"content":"                            }"},{"type":"INSERT","lineNumber":87,"content":"                        }"},{"type":"INSERT","lineNumber":88,"content":"                    }"}]}]},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/gradle/libs.versions.toml":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/gradle/libs.versions.toml","baseContent":"[versions]\nagp = \"8.10.1\"\nkotlin = \"2.0.21\"\ncoreKtx = \"1.17.0\"\njunit = \"4.13.2\"\njunitVersion = \"1.3.0\"\nespressoCore = \"3.7.0\"\nlifecycleRuntimeKtx = \"2.9.3\"\nactivityCompose = \"1.10.1\"\ncomposeBom = \"2024.09.00\"\n\n[libraries]\nandroidx-core-ktx = { group = \"androidx.core\", name = \"core-ktx\", version.ref = \"coreKtx\" }\njunit = { group = \"junit\", name = \"junit\", version.ref = \"junit\" }\nandroidx-junit = { group = \"androidx.test.ext\", name = \"junit\", version.ref = \"junitVersion\" }\nandroidx-espresso-core = { group = \"androidx.test.espresso\", name = \"espresso-core\", version.ref = \"espressoCore\" }\nandroidx-lifecycle-runtime-ktx = { group = \"androidx.lifecycle\", name = \"lifecycle-runtime-ktx\", version.ref = \"lifecycleRuntimeKtx\" }\nandroidx-activity-compose = { group = \"androidx.activity\", name = \"activity-compose\", version.ref = \"activityCompose\" }\nandroidx-compose-bom = { group = \"androidx.compose\", name = \"compose-bom\", version.ref = \"composeBom\" }\nandroidx-ui = { group = \"androidx.compose.ui\", name = \"ui\" }\nandroidx-ui-graphics = { group = \"androidx.compose.ui\", name = \"ui-graphics\" }\nandroidx-ui-tooling = { group = \"androidx.compose.ui\", name = \"ui-tooling\" }\nandroidx-ui-tooling-preview = { group = \"androidx.compose.ui\", name = \"ui-tooling-preview\" }\nandroidx-ui-test-manifest = { group = \"androidx.compose.ui\", name = \"ui-test-manifest\" }\nandroidx-ui-test-junit4 = { group = \"androidx.compose.ui\", name = \"ui-test-junit4\" }\nandroidx-material3 = { group = \"androidx.compose.material3\", name = \"material3\" }\nandroidx-lifecycle-viewmodel-compose = { group = \"androidx.lifecycle\", name = \"lifecycle-viewmodel-compose\", version = \"2.7.0\" }\n\n[plugins]\nandroid-application = { id = \"com.android.application\", version.ref = \"agp\" }\nkotlin-android = { id = \"org.jetbrains.kotlin.android\", version.ref = \"kotlin\" }\nkotlin-compose = { id = \"org.jetbrains.kotlin.plugin.compose\", version.ref = \"kotlin\" }\n","baseTimestamp":1757056903767},"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/MavMode.kt":{"filePath":"C:/Users/Hrushikesh/AndroidStudioProjects/practiceGCS/app/src/main/java/com/example/kotlingcspractice/Telemetry/MavMode.kt","baseContent":"package com.example.kotlingcspractice.Telemetry\n\ndata class MavMode(val value: UInt)\n\n","baseTimestamp":1757494025940}}}